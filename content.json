{"meta":{"title":"Mahan's Blog","subtitle":null,"description":null,"author":"Mahan Rad","url":"http://truelogician.com"},"pages":[{"title":"Categories","date":"2016-08-21T17:17:28.000Z","updated":"2016-08-21T17:07:18.000Z","comments":true,"path":"categories/index.html","permalink":"http://truelogician.com/categories/index.html","excerpt":"","text":""},{"title":"About","date":"2016-08-22T21:59:06.000Z","updated":"2016-08-21T17:07:18.000Z","comments":true,"path":"about/index.html","permalink":"http://truelogician.com/about/index.html","excerpt":"","text":""},{"title":"Tags","date":"2016-08-21T17:17:28.000Z","updated":"2016-08-21T17:07:18.000Z","comments":true,"path":"tags/index.html","permalink":"http://truelogician.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Enhance Your Hexo Blog","slug":"2016/hexo-install-plugins","date":"2016-07-23T20:22:01.000Z","updated":"2016-08-28T14:35:16.000Z","comments":true,"path":"2016/hexo-install-plugins/","link":"","permalink":"http://truelogician.com/2016/hexo-install-plugins/","excerpt":"This tutorial covers how you can enhance your Hexo blog. If you have not yet create it, you might want to check out the quick start with Hexo, otherwise let’s go through a few essential plugins that might leverage your blog’s usability very briefly. You can find the detailed list of plugins here.","text":"This tutorial covers how you can enhance your Hexo blog. If you have not yet create it, you might want to check out the quick start with Hexo, otherwise let’s go through a few essential plugins that might leverage your blog’s usability very briefly. You can find the detailed list of plugins here. Comments &amp; DiscussionsOne of the most important features of a blog is perhaps the possiblity to interact with your readers and that will keep them coming back. disqus is a popular commenting service that works through the javascript snippet within your page. What you need to do to modify your blog with a full fledged commenting service is to sign up for a disqus account, register your site and pick a unique shortname for your blog and paste it in your _config.yaml file, right below your theme name as shown here. 1disqus_shortname: &lt;your-disqus-shortname&gt; Blog SearchUsing this plugin, you can empower your blog reader with the ability of searching through your posts. 1$ npm install hexo-generator-json-content --save Right after installation, the plugin should work properly out of the box (after running hexo generate or hexo server). however, in order to through details of configuration you might want to check its github page or your theme’s “_config.yaml” file. RSS FeedYou can enable your blog with an RSS feed out of your posts in hexo by installing this plugin. 1$ npm install hexo-generator-feed --save The plugin can be configured in the _config.yaml with the following configuration section. 1234feed: type: atom path: atom.xml limit: 20 Markdown SupportThis plugin provides more support on the markdown such as gmf (Github flavored markdown) tables and line breaks. 1$ npm install hexo-renderer-marked --save You can customize the plugin by pasting the following in your _config.yaml and changing the values. 12345678marked: gfm: true pedantic: false sanitize: false tables: true breaks: true smartLists: true smartypants: true Category GeneratorThis plugin allows you to assign one or more tags to your post. It will group your posts and enables your readers to later on find out about all of posts that are tagged with the same category. 1$ npm install hexo-generator-category --save and the related options are as follows: 12category_generator: per_page: 10 CNAME GeneratorThis plugin will automatically generate a Github pages CNAME file. 1$ npm install hexo-generator-cname --save This plugin does not require any specific configuration. Only make sure to change your blog’s url to the real one in the _config.yaml 123# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: &lt;real-blog-url&gt; Git DeployerThis plugin will help you deploy your blog using git. 1$ npm install hexo-deployer-git --save You can configure the deployer plugin like this: 1234deploy: type: git repo: https://github.com/&lt;username&gt;/&lt;repository&gt; branch: master Deploy to GithubWhen you are ready to deploy your blog to the github, run the following commands to generate your blog and deploy it to the specified branch in your github repository as you setup before. 12$ hexo generate$ hexo deploy Now that you have your generated blog on github, you can configure and connect your custom domain to load your blog from github.","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://truelogician.com/categories/Hexo/"},{"name":"Plugins","slug":"Hexo/Plugins","permalink":"http://truelogician.com/categories/Hexo/Plugins/"}],"tags":[{"name":"Tutorials","slug":"Tutorials","permalink":"http://truelogician.com/tags/Tutorials/"},{"name":"Hexo","slug":"Hexo","permalink":"http://truelogician.com/tags/Hexo/"},{"name":"Blogging","slug":"Blogging","permalink":"http://truelogician.com/tags/Blogging/"},{"name":"StaticWebsite","slug":"StaticWebsite","permalink":"http://truelogician.com/tags/StaticWebsite/"}],"keywords":[{"name":"Hexo","slug":"Hexo","permalink":"http://truelogician.com/categories/Hexo/"},{"name":"Plugins","slug":"Hexo/Plugins","permalink":"http://truelogician.com/categories/Hexo/Plugins/"}]},{"title":"Creating a Blog by Hexo","slug":"2016/hexo-quick-start","date":"2016-07-14T19:55:50.000Z","updated":"2016-08-28T14:37:46.000Z","comments":true,"path":"2016/hexo-quick-start/","link":"","permalink":"http://truelogician.com/2016/hexo-quick-start/","excerpt":"Have you ever wished you could create your own blog in no time? Did you get frustrated as you thought you might not have enough time to design and set it up? Do you also wish to have more control over your blog comparing to other blogs such as those in Wordpress?","text":"Have you ever wished you could create your own blog in no time? Did you get frustrated as you thought you might not have enough time to design and set it up? Do you also wish to have more control over your blog comparing to other blogs such as those in Wordpress? Well, that was exactly the case for me and if it’s the same for you, then give “static site generators” a go. What is a “Static Stite Generator”?In short, a static site generator is basically a html file generator. It crates and formats html files by using its template engine as well as your text which is usually in a format such as markdown. Static site generators are very much easy to setup and use while providing users with more control over it. You can choose and heavily customize themes, choose among plenty of plugins and finally host your website on github pages for free. What is Hexo?Accoding to Hexo’s documentation, Hexo is a fast, simple and powerful blog framework. You write posts in Markdown (or other languages) and Hexo generates static files with a beautiful theme in seconds. -Alright, now let’s dive in. Installing HexoBefore installing hexo, use your OS package manager to update and cleanup system packages. 1$ brew update --all &amp;&amp; brew upgrade --all &amp;&amp; brew cleanup &amp;&amp; brew doctor &amp;&amp; brew prune Install Node.jsHexo is a node.js package. As a result, we first need to install the node.js in case it’s not. 1$ brew install node On linux machines, the procedure is similar with the distro’s package manager. On Windows machines, please refer to this page for download. npm is the default package manager of the node.js. In case you have had the node installed for some time, make an update and clean the previously installed packages. We will later on use npm to install all the required packages in our blog. 1$ npm update &amp;&amp; npm upgrade &amp;&amp; npm cache clean Now, we can actually install the hexo package. 1$ npm install hexo-cli -g Creaing Your First BlogNow, in order to create a blog, goto a directory in which you want to create a blog. 1$ hexo init blog After the blog directory is created cd to the created folder and download all the node modules we need to run and manage our blog. 12$ cd blog$ npm install Running Your Blog serverNow let’s clean (not needed for the first time but it’s a good practice), generate and run the blog on a node server on the default port 4000. 1$ hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server You can now view your blog locally on your browser. Creating Post, Page or DraftIn order to create more posts, you simply need to create .md files within your _posts folder. Additionally, Hexo also provides the following sugar coated commands to create a post, page or draft. 1234$ hexo new \"My Post\"$ hexo new post \"My Post\"$ hexo new page \"About Me\"$ hexo new draft \"My Post\" Now that you have a post, open it in your favorite editor and write your content in markdown language. Having a cheat sheet at your disposal is also a good idea while you are writing in Markdown. At this point you have a working blog (with the default theme). You might want to apply and customize a different theme. Hexo provides a handfule of themes on their website that you can choose from. In addition to themes, plenty of plugins are also available for hexo that can totally enhance your blog and your reader’s experience form it. So, if you still eager about improving your blog and connect a couple of useful plugins, read further on the next section.","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://truelogician.com/categories/Hexo/"},{"name":"Startup","slug":"Hexo/Startup","permalink":"http://truelogician.com/categories/Hexo/Startup/"}],"tags":[{"name":"Tutorials","slug":"Tutorials","permalink":"http://truelogician.com/tags/Tutorials/"},{"name":"Hexo","slug":"Hexo","permalink":"http://truelogician.com/tags/Hexo/"},{"name":"Blogging","slug":"Blogging","permalink":"http://truelogician.com/tags/Blogging/"},{"name":"StaticWebsite","slug":"StaticWebsite","permalink":"http://truelogician.com/tags/StaticWebsite/"}],"keywords":[{"name":"Hexo","slug":"Hexo","permalink":"http://truelogician.com/categories/Hexo/"},{"name":"Startup","slug":"Hexo/Startup","permalink":"http://truelogician.com/categories/Hexo/Startup/"}]},{"title":"Introduction to Akka","slug":"2014/introduction-to-akka","date":"2014-06-12T19:21:34.000Z","updated":"2016-08-31T11:07:35.000Z","comments":true,"path":"2014/introduction-to-akka/","link":"","permalink":"http://truelogician.com/2014/introduction-to-akka/","excerpt":"The following intends to provide a brief introduction to Akka which is framework based on the actor model and designed to increase the abstraction, scalability and fault-tolerance of systems. It provides a platform enabling developers to easily create concurrent and loosely coupled applications with the ability of self-healing in the face of failures.","text":"The following intends to provide a brief introduction to Akka which is framework based on the actor model and designed to increase the abstraction, scalability and fault-tolerance of systems. It provides a platform enabling developers to easily create concurrent and loosely coupled applications with the ability of self-healing in the face of failures. Typical Problems of Complex SystemsBelow is mentioned a few of the more important problems and issues that need to be addressed when dealing with more complex systems: Threads tend to need a lot of coordination logic, locks and synchronizations. The amount of threads to be used within an application is limited. It is usually hard to scale up, scale out, deploy and run the complex applications. Creating fault tolerant applications that can recover form errors is tedious. It is cumbersome to modify applications and systems with load balancing. How Akka Addresses the Issues?Alright, now that we know some of the top issues, let’s also mention a few key notes about what Akka has to offer in general and what it brings to the table to address them. Akka pushes the burden of low-level thread management and thread-safe code to the actor model. The use of actor model also makes Akka to be aligned with reactive manifesto which improves applications in the following terms: Message-Driven:Asynchronous message passing decreases coupling and provides location transparency for system components. Resilience:Akka enforces single responsibility through component isolation (actors). Elasticity:As systems scale, they will still be able to handle various workloads. In addition, actors can be increased in amount where they are exactly needed and they also can divide the workload among themselves. Responsiveness:Loose coupling, Resilience and Elasticity will make the system responsive. The increases in abstraction and loose coupling will also result into: Reduction in use of shared states among components. Increase in CPU utilization. Increase in capability to scale up and out. Increasing system fault-tolerance. So, What is an Actor?Definition: an actor is a fundamental primitive unit of computation or work which basically means that they are designed to perform small, simple and well-defined tasks. In order to better imagine and understand what an actor is, let’s start getting to know about their behavior and attributes. Each actor has a unique address and hence location transparent. Each actor has a mailbox (queue of messages), state and behavior. Actors are very lightweight (2.7 Million per 1GB of RAM). They are formed in hierarchies/trees (parent child relationship). They can live and communicate on different machines. They can create child actors. They can heal their children. They can supervise their children. They can change their behavior. They only communicate with one or more actors via message passing. They can only handle one message at a time. They can decide what to do with the message. Their states are only known by querying them (sending messages). Note: The fact that actors come in hierarchies and that they can heal their children can really help developers push the risky and error-prone logic to child actors (or leaves); Therefore, as soon as a child dies, its parent is notified and supervises it accordingly. What is an Actor-System (node)?A node or an actor-system groups several actors and thus, an instance of it can contain one or more actors. According to this definition, we can now have local or remote actors. Let’s say actor “a” lives on actor-system “X”; in this case: Local Actor: An actor “b” is local to actor “a”, if “b” lives on the same actor-system as “a” (meaning actor-system “X”). Remote Actor: An actor “b” is remote to actor “a”, if “b” lives on a different actor-system (let’s say actor-system “Y”). Also note that actor-system “Y” might be located on the same or a separate machine. Using addresses, an actor in one actor-system can send messages to local actor or remote actors. The address of an actor follows the format below and consists of these parts. 1[protocol]://[actor-system]@[hostname]:[port] Details of Actors Actions Creating Actor: With a name and certain properties (called props), actors can create other child actors. Sending Messages: An actor can send message to a local or remote actor. Passing messages among actors are async and non-blocking (Fire &amp; Forget). Actors are totally inactive/passive until they receive a message. Actors can handle throughput of 50 million messages per second per machine. The order of messages are maintained the same for sender and receiver. Changing Behavior: An actor can change its behavior at runtime. This change in behavior is triggered after receiving a message. Supervising Children: Actors can supervise their child actors. Child actors send failure signal and the parent instruct them what to do. The child does not need to know how to handle the error. Actors can supervise their children even over separate physical nodes. There are several error supervising strategies they can pick from. these strategies basically indicate what to do if a child fails in general or of a certain event. The strategy options are: resume / restart / escalate Note: In Akka, the message transport and the message delivery are completely separated processes. Akka uses concurrent-linked-queue as the mailbox, however one can define what message queue to use either per actor or per actor-system (node). Its also possible to use broker and let broker handle messaging. Properties of an Akka MessageAn Akka message is a simple immutable data container defined by user and is created and passed asynchronously among actors. Akka messages also aligned with the definition of a message in reactive manifesto. A message is an item of data that is sent to a specific destination. In a message driven system, addressable recipients await the arrival of messages and react to them, otherwise lying dormant (Reactive Manifesto).","categories":[{"name":"Software Architecture","slug":"Software-Architecture","permalink":"http://truelogician.com/categories/Software-Architecture/"},{"name":"Akka","slug":"Software-Architecture/Akka","permalink":"http://truelogician.com/categories/Software-Architecture/Akka/"}],"tags":[{"name":"Tutorials","slug":"Tutorials","permalink":"http://truelogician.com/tags/Tutorials/"},{"name":"Akka","slug":"Akka","permalink":"http://truelogician.com/tags/Akka/"},{"name":"Distributed-Systems","slug":"Distributed-Systems","permalink":"http://truelogician.com/tags/Distributed-Systems/"},{"name":"Actor Model","slug":"Actor-Model","permalink":"http://truelogician.com/tags/Actor-Model/"}],"keywords":[{"name":"Software Architecture","slug":"Software-Architecture","permalink":"http://truelogician.com/categories/Software-Architecture/"},{"name":"Akka","slug":"Software-Architecture/Akka","permalink":"http://truelogician.com/categories/Software-Architecture/Akka/"}]},{"title":"Prototype Pattern","slug":"2011/prototype","date":"2011-06-09T17:11:09.000Z","updated":"2016-08-31T14:15:04.000Z","comments":true,"path":"2011/prototype/","link":"","permalink":"http://truelogician.com/2011/prototype/","excerpt":"Design Patterns Overview DefinitionCreate new instances by copying the existing one. Client code can make new instances without knowing which specific class is being instantiated.","text":"Design Patterns Overview DefinitionCreate new instances by copying the existing one. Client code can make new instances without knowing which specific class is being instantiated. Recipe The product prototype and its concrete implementation. Notice how each product casts the clone to self type. 123456789101112131415161718192021interface IPrototype extends Cloneable &#123; IPrototype copy();&#125;class ProductA implements IPrototype &#123; IPrototype copy() &#123; ProductA product = null; try &#123; product = (ProductA) super.clone(); &#125; catch (CloneNotSupportedException e) &#123; log(e); &#125; return product; &#125;&#125;class ProductB implements IPrototype &#123; IPrototype copy() &#123; ProductB product = null; try &#123; product = (ProductB) super.clone(); &#125; catch (CloneNotSupportedException e) &#123; log(e); &#125; return product; &#125;&#125; The clone factory which receives a prototype or a subclass of it and creates a clone of it 12345class CloneFactory &#123; IPrototype clone(IPrototype prototype) &#123; return prototype.copy(); &#125;&#125; ServeNow that you have everything in place, to clone a product, simply pass it to the clone factory and cast it back. 12345678910class Client &#123; ProductA a = new ProductA(); ProductB b = new ProductB(); Client() &#123; CloneFactory cloneFactory = new CloneFactory(); ProductA a1 = (ProductA) cloneFactory.clone(a); ProductA a2 = (ProductA) cloneFactory.clone(a); ProductB b1 = (ProductB) cloneFactory.clone(b); &#125;&#125; Important Benefits Reduces the need for creating subclasses. ExampleAlright, imagine that a graphical application needs to present its graphical elements. In this example, they are ‘Pixel’ and ‘Circle’. A Pixel is defined by its x and y coordinates and a circle is defined by its center and radius. We want provide our users with shape duplication ability in order to clone shapes instead of drawing an identical ones. 123456789101112131415161718192021222324252627282930313233343536interface IPrototype extends Cloneable &#123; IPrototype copy();&#125;class Pixel implements IPrototype &#123; int x; int y; Pixel(int x, int y) &#123; this.x = x; this.y = y; &#125; public IPrototype copy() &#123; Pixel pixel = null; try &#123; pixel = (Pixel) super.clone(); &#125; catch (CloneNotSupportedException e) &#123; log(e); &#125; return pixel; &#125;&#125;class Circle implements IPrototype &#123; Pixel center; double radius; Circle(Pixel center, double radius) &#123; this.center = center; this.radius = radius; &#125; public IPrototype copy() &#123; Circle circle = null; try &#123; circle = (Circle) super.clone(); &#125; catch (CloneNotSupportedException e) &#123; log(e); &#125; return circle; &#125; void draw() &#123;/*logic to draw a circle*/&#125;&#125; The clone factory is completely untouched. 12345class CloneFactory &#123; public IPrototype clone(IPrototype prototype) &#123; return prototype.copy(); &#125;&#125; And finally the ‘Canvas’ provides the duplication functionality and draws a circle with the same specs next to the original one. 12345678class Canvas &#123; void duplicate(Circle circle) &#123; CloneFactory cloneFactory = new CloneFactory(); Circle clone = (Circle) cloneFactory.clone(circle); clone.center = new Pixel(clone.center.x + 1, clone.center.y + 1); clone.draw(); &#125;&#125; Design Patterns Overview","categories":[{"name":"Software Architecture","slug":"Software-Architecture","permalink":"http://truelogician.com/categories/Software-Architecture/"},{"name":"Design Patterns","slug":"Software-Architecture/Design-Patterns","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/"},{"name":"Types","slug":"Software-Architecture/Design-Patterns/Types","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"},{"name":"Creational","slug":"Software-Architecture/Design-Patterns/Types/Creational","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Creational/"}],"tags":[{"name":"Design-Patterns","slug":"Design-Patterns","permalink":"http://truelogician.com/tags/Design-Patterns/"},{"name":"Tutorials","slug":"Tutorials","permalink":"http://truelogician.com/tags/Tutorials/"}],"keywords":[{"name":"Software Architecture","slug":"Software-Architecture","permalink":"http://truelogician.com/categories/Software-Architecture/"},{"name":"Design Patterns","slug":"Software-Architecture/Design-Patterns","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/"},{"name":"Types","slug":"Software-Architecture/Design-Patterns/Types","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"},{"name":"Creational","slug":"Software-Architecture/Design-Patterns/Types/Creational","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Creational/"}]},{"title":"Builder Pattern","slug":"2011/builder","date":"2011-03-19T21:37:18.000Z","updated":"2016-08-31T11:27:08.000Z","comments":true,"path":"2011/builder/","link":"","permalink":"http://truelogician.com/2011/builder/","excerpt":"Design Patterns Overview DefinitionSimplify Creation of Objects Which Need Many Properties for Creation.","text":"Design Patterns Overview DefinitionSimplify Creation of Objects Which Need Many Properties for Creation. Recipe The product definition along with its required/optional properties. Notice it uses the passed ‘builder’ object to propagate its property values. 1234567891011class Product &#123; String propertyA; int propertyB; boolean propertyC; Product(Builder builder) &#123; propertyA = builder.propertyA; propertyB = builder.propertyB; propertyC = builder.propertyC; &#125;&#125; The builder which almost maps the properties of the product. Notice the setter method return a ‘Builder’ to allow chaining methods. Enforce the product’s required properties in the builder too. 12345678910111213141516171819202122class Builder &#123; String propertyA; int propertyB; boolean propertyC; Builder setPropertyA(String value) &#123; propertyA = value; return this; &#125; Builder setPropertyB(int value) &#123; propertyB = value; return this; &#125; Builder setPropertyC(boolean value) &#123; propertyC = value; return this; &#125; Product build() &#123; return new Product(this); &#125;&#125; The build director which could be optional to have. It uses the ‘Builder’ to instantiate certain products. 12345678910111213141516class BuildDirector &#123; static Product buildAbc123True() &#123; return new Builder() .setPropertyA(\"abc\") .setPropertyB(123) .setPropertyC(true) .build(); &#125; static Product buildDef456False() &#123; return new Builder() .setPropertyA(\"def\") .setPropertyB(456) .setPropertyC(false) .build(); &#125;&#125; ServeIt is now possible to use the build director to create specific products or simply ask the builder to assign the product’s properties and build it. 123456789101112class Client &#123; Client() &#123; Product p1 = BuildDirector.buildAbc123True(); Product p2 = BuildDirector.buildDef456False(); Product p3 = new Builder() .setPropertyA(\"xyz\") .setPropertyB(789) .setPropertyC(true) .build(); &#125;&#125; Important BenefitsHiding from clients the creation of all side-objects and logics that are probably required for an instantiation. Hence, only the builder will know the specifics of this creation and no one else. ExampleKeeping in mind that the following code is merely an example, let’s imaging that we need to create our own Socket class. Well, one might come up with many properties when designing a sophisticated object such as this. Note that two of these properties however, are mandatory for instantiation and as a result are part of the socket builder constructor. 12345678910111213141516171819class Socket &#123; InetAddress addr; int port; boolean keepAlive; ComplexProperty complexProperty; long timeout; long sendBufferSize Socket(SocketBuilder builder) &#123; this.addr = builder.addr; this.port = builder.port; this.keepAlive = builder.keepAlive; this.complexProperty = builder.complexProperty; this.socketChannel = builder.socketChannel; this.timeout = builder.timeout; this.sendBufferSize = builder.sendBufferSize; &#125;&#125; The builder class. Note that how builder tries to hide the complexity of object creation within ‘setComplexProperty()’ method. 123456789101112131415161718192021222324252627282930313233343536373839class SocketBuilder &#123; InetAddress addr; int port; boolean keepAlive; boolean complexProperty; long timeout; long sendBufferSize SocketBuilder(InetAddress addr, int port) &#123; this.addr = addr; this.port = port; &#125; Builder setKeepAlive(boolean value) &#123; keepAlive = value; return this; &#125; Builder setComplexProperty(String simpleValue) &#123; /* performing complex actions on simpleValue to create the complexValue needed for the property */ complexProperty = complexValue; return this; &#125; Builder setTimeout(long value) &#123; timeout = value; return this; &#125; Builder setSendBufferSize(long value) &#123; sendBufferSize = value; return this; &#125; Product build() &#123; return new Socket(this); &#125;&#125; And finally the builder class which can either be used in a director or the client code. 12345678910111213class SocketDirector &#123; static InetAddress host = InetAddress.getByName(\"127.0.0.1\"); static Product buildHostSocket() &#123; return new SocketBuilder(host, 8080) .setKeepAlive(true) .setTimeout(0) .setSendBufferSize(1024) .setComplexProperty(\"F42\"); .build(); &#125;&#125; Design Patterns Overview","categories":[{"name":"Software Architecture","slug":"Software-Architecture","permalink":"http://truelogician.com/categories/Software-Architecture/"},{"name":"Design Patterns","slug":"Software-Architecture/Design-Patterns","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/"},{"name":"Types","slug":"Software-Architecture/Design-Patterns/Types","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"},{"name":"Creational","slug":"Software-Architecture/Design-Patterns/Types/Creational","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Creational/"}],"tags":[{"name":"Design-Patterns","slug":"Design-Patterns","permalink":"http://truelogician.com/tags/Design-Patterns/"},{"name":"Tutorials","slug":"Tutorials","permalink":"http://truelogician.com/tags/Tutorials/"}],"keywords":[{"name":"Software Architecture","slug":"Software-Architecture","permalink":"http://truelogician.com/categories/Software-Architecture/"},{"name":"Design Patterns","slug":"Software-Architecture/Design-Patterns","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/"},{"name":"Types","slug":"Software-Architecture/Design-Patterns/Types","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"},{"name":"Creational","slug":"Software-Architecture/Design-Patterns/Types/Creational","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Creational/"}]},{"title":"Singleton Pattern","slug":"2011/singleton","date":"2011-02-21T08:49:21.000Z","updated":"2016-08-31T11:06:51.000Z","comments":true,"path":"2011/singleton/","link":"","permalink":"http://truelogician.com/2011/singleton/","excerpt":"Design Patterns Overview DefinitionMaking Only One Object of a Class to Be Available for All. Making Only One Object of a Class to Be Available for All.","text":"Design Patterns Overview DefinitionMaking Only One Object of a Class to Be Available for All. Making Only One Object of a Class to Be Available for All. RecipeThere are different ways to define a singleton. The snippet below presents one of the simplest thread-safe approaches that is not too complicated to confuse you and also not too simple to ignore the complexities it might require in real implementation. A public class with a private constructor and a private instance of itself that can be assigned only once. 1234567891011121314151617public class Singleton &#123; private static Singleton singleton; // constructor private Singleton() &#123; &#125; public static Singleton getInstance() &#123; if (singleton != null) return singleton; synchronized (Singleton.class) &#123; if (singleton == null) &#123; singleton = new Singleton(); &#125; &#125; return singleton; &#125; public void operation() &#123;/*do sth.*/&#125;&#125; ServeAfter defining the singleton, all other classes can only access the very same instance of it across the virtual machine (JVM) as shown below. 123456class Client &#123; Client() &#123; Singleton singleton = Singleton.getInstance(); singleton.operation(); &#125;&#125; Important BenefitsDisadvantages of singletons are far more than their benefits. They reduce testability in great deal and introduce unnecessary coupling throughout the system. A singleton can yield best results in a situation where various parts of an application concurrently try to access a shared resource. An example of a shared resource would be Logger, Print Spooler, etc.In general, the use of singletons are only encouraged through the dependency injection. Design Patterns Overview","categories":[{"name":"Software Architecture","slug":"Software-Architecture","permalink":"http://truelogician.com/categories/Software-Architecture/"},{"name":"Design Patterns","slug":"Software-Architecture/Design-Patterns","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/"},{"name":"Types","slug":"Software-Architecture/Design-Patterns/Types","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"},{"name":"Creational","slug":"Software-Architecture/Design-Patterns/Types/Creational","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Creational/"}],"tags":[{"name":"Design-Patterns","slug":"Design-Patterns","permalink":"http://truelogician.com/tags/Design-Patterns/"},{"name":"Tutorials","slug":"Tutorials","permalink":"http://truelogician.com/tags/Tutorials/"}],"keywords":[{"name":"Software Architecture","slug":"Software-Architecture","permalink":"http://truelogician.com/categories/Software-Architecture/"},{"name":"Design Patterns","slug":"Software-Architecture/Design-Patterns","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/"},{"name":"Types","slug":"Software-Architecture/Design-Patterns/Types","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"},{"name":"Creational","slug":"Software-Architecture/Design-Patterns/Types/Creational","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Creational/"}]},{"title":"Abstract Factory Pattern","slug":"2010/abstract-factory","date":"2010-12-03T17:10:43.000Z","updated":"2016-08-31T11:07:25.000Z","comments":true,"path":"2010/abstract-factory/","link":"","permalink":"http://truelogician.com/2010/abstract-factory/","excerpt":"Design Patterns Overview DefinitionGroup Factories That Produce Similar Products. Choose a Factory at Runtime, in Order to Create Different Objects of a Certain Category.","text":"Design Patterns Overview DefinitionGroup Factories That Produce Similar Products. Choose a Factory at Runtime, in Order to Create Different Objects of a Certain Category. Recipe Definition of the products. In our case, 4 products: product Type A (comes in A1 &amp; A2 Flavors) product Type B (comes in B1 &amp; B2 Flavors) 123456789/* Product A Flavors */interface IProductA &#123; &#125;class ProductA1 implements IProductA &#123; &#125;class ProductA2 implements IProductA &#123; &#125;/* Product B Flavors */interface IProductB &#123; &#125;class ProductB1 implements IProductB &#123; &#125;class ProductB2 implements IProductB &#123; &#125; The family of factories. Notice that when ‘Factory2’ wants to create a product of type ‘A’, it returns ‘A1’ (and not ‘A2’) and this basically tries to emphasize that it is possible to build our factories in a way to return various flavors of available products according to the software needs. 12345678910111213interface IFactory &#123; IProductA createA(); IProductB createB();&#125;class Factory1 implements IFactory &#123; IProductA createA() &#123; return new ProductA1(); &#125; IProductB createB() &#123; return new ProductB1(); &#125;&#125;class Factory2 implements IFactory &#123; IProductA createA() &#123; return new ProductA1(); &#125; IProductB createB() &#123; return new ProductB2(); &#125;&#125; Now that we have the factories, let’s have simple static method that chooses a factory for us at runtime to create the right product. The ‘Props’ is an arbitrary object that contains some properties on which the selection is based. 12345678class FactorySelector &#123; static IFactory selectBy(Props props) &#123; if(/*shall select factory1?*/) return new Factory1(); if(/*shall select factory2?*/) return new Factory2(); &#125;&#125; ServeIf you have everything ready, then it would be only a matter of asking ‘FactorySelector’ to choose the right factory and create the desired product. 123456class Client &#123; Client() &#123; IFactory factory = FactorySelector.selectBy(props); IProductB product = factory.createB(); &#125;&#125; Important Benefits It basically has advantages similar to the factory pattern. ExampleLet’s say that we want to print some messages. The printer object can be designed to print messages to file, console, paper and etc. Messages can also come in different formats such as unstructured text, xml, json and etc. As a result, the product hierarchy is define as following. 12345678910111213141516171819interface IPrinter &#123; void print(String message);&#125;class ConsolePrinter implements IPrinter &#123; void print(String message) &#123;/*to console*/&#125;&#125;class FilePrinter implements IPrinter &#123; void print(String message) &#123;/*to file*/&#125;&#125;interface IParser &#123; String parse(String message);&#125;class JsonParser implements IParser &#123; String parse(String message) &#123; /*parse json*/ &#125;&#125;class XmlParser implements IParser &#123; String parse(String message) &#123; /*parse xml*/ &#125;&#125; Two different factories are defined here: ‘Logger’ which logs json messages to file ‘Display’ which shows xml messages in console 1234567891011121314151617181920212223interface IFactory &#123; IPrinter createPrinter(); IParser createParser(); void printMessage(String message);&#125;abstract class AbstractFactory implements IFactory &#123; void printMessage(String message) &#123; IPrinter printer = createPrinter(); IParser parser = createParser(); printer.print(parser.parse(message)); &#125;&#125;class Logger extends AbstractFactory &#123; IPrinter createPrinter() &#123; return new FilePrinter(); &#125; IParser createParser() &#123; return new JsonParser(); &#125;&#125;class Display extends AbstractFactory &#123; IPrinter createPrinter() &#123; return new ConsolePrinter(); &#125; IParser createParser() &#123; return new XmlParser(); &#125;&#125; Our ‘FactorySelector’ chooses the proper factory based on a given string. 12345678class FactorySelector &#123; static IFactory select(String type) &#123; if(type.equals(\"display\")) return new Display(); if(type.equals(\"logger\")) return new Logger(); &#125;&#125; And finally, the client code can use factories as demonstrated. 12345678910111213141516class Client &#123; IFactory factory; Client() &#123; factory = FactorySelector.select(\"logger\"); factory.printMessage(\"&#123; \\\"hello\\\" : \\\"world\\\" &#125;\"); writeOutput(\"writing to file...\"); factory = FactorySelector.select(\"display\"); writeOutput(\"writing to console\"); &#125; void writeOutput(String message) &#123; factory.createPrinter().print(message); &#125;&#125; Design Patterns Overview","categories":[{"name":"Software Architecture","slug":"Software-Architecture","permalink":"http://truelogician.com/categories/Software-Architecture/"},{"name":"Design Patterns","slug":"Software-Architecture/Design-Patterns","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/"},{"name":"Types","slug":"Software-Architecture/Design-Patterns/Types","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"},{"name":"Creational","slug":"Software-Architecture/Design-Patterns/Types/Creational","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Creational/"}],"tags":[{"name":"Design-Patterns","slug":"Design-Patterns","permalink":"http://truelogician.com/tags/Design-Patterns/"},{"name":"Tutorials","slug":"Tutorials","permalink":"http://truelogician.com/tags/Tutorials/"}],"keywords":[{"name":"Software Architecture","slug":"Software-Architecture","permalink":"http://truelogician.com/categories/Software-Architecture/"},{"name":"Design Patterns","slug":"Software-Architecture/Design-Patterns","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/"},{"name":"Types","slug":"Software-Architecture/Design-Patterns/Types","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"},{"name":"Creational","slug":"Software-Architecture/Design-Patterns/Types/Creational","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Creational/"}]},{"title":"Factory Pattern","slug":"2010/factory","date":"2010-11-25T22:10:55.000Z","updated":"2016-08-31T11:07:16.000Z","comments":true,"path":"2010/factory/","link":"","permalink":"http://truelogician.com/2010/factory/","excerpt":"Design Patterns Overview DefinitionHaving Decisions of object creation to be made at Runtime. Create Objects Without Knowing the Specific Type.","text":"Design Patterns Overview DefinitionHaving Decisions of object creation to be made at Runtime. Create Objects Without Knowing the Specific Type. RecipesSimple Factory: Centralized Object Instantiation A hierarchy of products with a common parent. 1234interface IProduct &#123;&#125;class ProductA implements IProduct &#123;&#125;class ProductB implements IProduct &#123;&#125;class ProductC implements IProduct &#123;&#125; The Factory class to make the decision making. Decision is based on the properties presented by ‘Props’ object. The decision of which product to create is integrated in one place. 1234567class Factory &#123; IProduct createProduct(Props props) &#123; if (props ....) return new ProductA(); if (props ....) return new ProductB(); if (props ....) return new ProductC(); &#125;&#125; Factory Method: Decentralized Object Instantiation. Again, a hierarchy of products with a common parent. 1234interface IProduct &#123;&#125;class ProductA implements IProduct &#123;&#125;class ProductB implements IProduct &#123;&#125;class ProductC implements IProduct &#123;&#125; The product consumer with an abstract method. This will give the responsibility of product creation to subclasses 1234567abstract class Consumer &#123; void consume() &#123; IProduct p = createProduct(); /*logic for consuming the product*/ &#125; abstract IProduct createProduct();&#125; Consumer subclasses that each might need to consume a certain product. 123456789101112131415class ConsumerA extends Consumer &#123; IProduct createProduct() &#123; return new ProductA(); &#125;&#125;class ConsumerB extends Consumer &#123; IProduct createProduct() &#123; return new ProductB(); &#125;&#125;class ConsumerC extends Consumer &#123; IProduct createProduct() &#123; return new ProductC(); &#125;&#125; ServeUsing the simple factory is trivial since the client only needs to somehow pass a ‘Props’ object to the Factory and receive an instance of the product. For the 2nd approach, the snippet below, demonstrates how a consumer of certain type is created and that the creation of the product is pushed to the consumer itself. 123456class Client &#123; Client() &#123; Consumer consumerB = new ConsumerB(); consumerB.consume(); &#125;&#125; Important Benefits Getting rid of many scattered if-else statements used for object creation. Making it easier to modify the object creation logic. The client knows what types of classes are possible to build. ExampleSuppose that we want to send a message from one computer to another. This can be done in various ways such as sending via TCP, email, web services and etc. In such case, let’s call them devices as defined in ‘Device’ class. 12345678910interface IDevice &#123; void send(String message); &#125;class TcpDevice implements IDevice &#123; void send(String message) &#123;/*TCP impl.*/&#125;&#125;class MailDevice implements IDevice &#123; void send(String message) &#123;/*Mail Impl.*/&#125;&#125; We also have a messenger that uses a Device to send a message. Note that the derivations return the type of device they need for messaging. 123456789101112131415161718abstract class Messenger &#123; send(String message) &#123; IDevice Device = createDevice(); Device.send(message); &#125; abstract IDevice createDevice();&#125;class TcpMessenger extends Messenger &#123; IDevice createDevice() &#123; return new TcpDevice(); &#125;&#125;class MailMessenger extends Messenger &#123; IDevice createDevice() &#123; return new MailDevice(); &#125;&#125; Now, if the client needs to send a TCP message, it only needs to create a ‘TcpMessenger’ and the creation will be taken care of. 123456class Client &#123; Client() &#123; Messenger tcpMessenger = new TcpMessenger(); tcpMessenger.send(\"hello world!\"); &#125;&#125; Design Patterns Overview","categories":[{"name":"Software Architecture","slug":"Software-Architecture","permalink":"http://truelogician.com/categories/Software-Architecture/"},{"name":"Design Patterns","slug":"Software-Architecture/Design-Patterns","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/"},{"name":"Types","slug":"Software-Architecture/Design-Patterns/Types","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"},{"name":"Creational","slug":"Software-Architecture/Design-Patterns/Types/Creational","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Creational/"}],"tags":[{"name":"Design-Patterns","slug":"Design-Patterns","permalink":"http://truelogician.com/tags/Design-Patterns/"},{"name":"Tutorials","slug":"Tutorials","permalink":"http://truelogician.com/tags/Tutorials/"}],"keywords":[{"name":"Software Architecture","slug":"Software-Architecture","permalink":"http://truelogician.com/categories/Software-Architecture/"},{"name":"Design Patterns","slug":"Software-Architecture/Design-Patterns","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/"},{"name":"Types","slug":"Software-Architecture/Design-Patterns/Types","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"},{"name":"Creational","slug":"Software-Architecture/Design-Patterns/Types/Creational","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Creational/"}]},{"title":"Observer Pattern","slug":"2010/observer","date":"2010-10-18T19:11:19.000Z","updated":"2016-08-31T11:07:12.000Z","comments":true,"path":"2010/observer/","link":"","permalink":"http://truelogician.com/2010/observer/","excerpt":"Design Patterns Overview DefinitionReceive topic updates from publisher by subscribing to them. Objects/subscribers are notified of an event when it happens or a topic when it’s published.","text":"Design Patterns Overview DefinitionReceive topic updates from publisher by subscribing to them. Objects/subscribers are notified of an event when it happens or a topic when it’s published. Recipe The topic (also called Context/Event/Observable) and its properties. 1interface ITopic &#123; /* properties */ &#125; The subscriber/observer interface and its concrete class. Notice how the topic/context is received. 12345678interface ISubscriber &#123; void onReceived(ITopic topic); &#125;class Subscriber implements ISubscriber &#123; void onReceived(ITopic topic) &#123; /* implementation */ &#125;&#125; The publisher interface and its concrete class that at least does the following 3 actions: subscribe: Adds the subscriber to the subscriber’s list. unsubscribe: Removes the subscriber from the subscriber’s list. publish: Notifies all subscribers in the list by invoking their onReceived(topic) method. 12345interface IPublisher &#123; void subscribe(ISubscriber subscriber); void unsubscribe(ISubscriber subscriber); void publish(ITopic topic); &#125; ServeThe snippet below demonstrate two subscribers that register themselves to receive topics/events from a publisher. At some point in time when the topic is ready (or the event is happened) the publisher notifies all subscribers about that. 1234567891011121314class Client &#123; Client() &#123; // create a publisher &amp; subscriber Publisher pub = new Publisher(); Subscriber sub1 = new Subscriber(); Subscriber sub2 = new Subscriber(); // subscribe to receive topics/events pub.subscribe(sub1); pub.subscribe(sub2); // now let's say some event happened and // we want to notify all subscribers pub.publish(new Topic()); &#125;&#125; Important BenefitsPublishers and subscribers are loosely coupled since publisher knows nothing about subscribers except that they implement the Subscriber’s interface by which they can be notified. ExampleImagine that an e-commerce system can receive a purchase order in the ‘OrderService’ class. As soon as the order is received, a confirmation mail shall be sent to user, the item shall be fetched from the inventory and finally the purchase amount shall be sent to accounting system. In this case, all these units should subscribe to the ‘OrderService’ class to be notified when an order is received. Let’s first define the topic which is an order in our case. 12345class Order implements ITopic &#123; String userEmail; String itemId; double price;&#125; Accordingly, the subscribers will look like this. 123456789class Inventory implements ISubscriber &#123; void onReceived(Order order) &#123;/* fetch item using order.itemId */&#125;&#125;class Confirmation implements ISubscriber &#123; void onReceived(Order order) &#123;/* send email using order.userMail */&#125;&#125;class Accounting implements ISubscriber &#123; void onReceived(Order order) &#123;/* proceed using order.price */&#125;&#125; Also, the OrderService will look like below 123456789101112class OrderService implements Publisher &#123; void subscribe(ISubscriber subscriber) &#123;/*implementation*/&#125; void unsubscribe(ISubscriber subscriber) &#123;/*implementation*/&#125; // Let's say we receive orders from clients here void onOrderReceived(Order order) &#123; publish(order); &#125; void publish(Order order) &#123; for (subscriber : subscribers) subscriber.onReceived(order) &#125;&#125; Design Patterns Overview","categories":[{"name":"Software Architecture","slug":"Software-Architecture","permalink":"http://truelogician.com/categories/Software-Architecture/"},{"name":"Design Patterns","slug":"Software-Architecture/Design-Patterns","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/"},{"name":"Types","slug":"Software-Architecture/Design-Patterns/Types","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"},{"name":"Behavioral","slug":"Software-Architecture/Design-Patterns/Types/Behavioral","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Behavioral/"}],"tags":[{"name":"Design-Patterns","slug":"Design-Patterns","permalink":"http://truelogician.com/tags/Design-Patterns/"},{"name":"Tutorials","slug":"Tutorials","permalink":"http://truelogician.com/tags/Tutorials/"}],"keywords":[{"name":"Software Architecture","slug":"Software-Architecture","permalink":"http://truelogician.com/categories/Software-Architecture/"},{"name":"Design Patterns","slug":"Software-Architecture/Design-Patterns","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/"},{"name":"Types","slug":"Software-Architecture/Design-Patterns/Types","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"},{"name":"Behavioral","slug":"Software-Architecture/Design-Patterns/Types/Behavioral","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Behavioral/"}]},{"title":"Strategy Pattern","slug":"2010/strategy","date":"2010-09-07T20:14:58.000Z","updated":"2016-08-31T11:07:08.000Z","comments":true,"path":"2010/strategy/","link":"","permalink":"http://truelogician.com/2010/strategy/","excerpt":"Design Patterns Overview DefinitionAdding Behavior at Runtime. Strategy pattern encapsulates Interchangeable Behaviors and Uses Delegation to Decide Which One to Use.","text":"Design Patterns Overview DefinitionAdding Behavior at Runtime. Strategy pattern encapsulates Interchangeable Behaviors and Uses Delegation to Decide Which One to Use. Recipe The actual behavior (strategy) interface and concrete implementations. 123456789interface IBehavior &#123; void behave();&#125;class BehaviorA implements IBehavior &#123; void behave() &#123;/*implementation*/&#125;&#125;class BehaviorB implements IBehavior &#123; void behave() &#123;/*implementation*/&#125;&#125; The class that owns the behavior (called context) 123class Product &#123; IBehavior behavior;&#125; ServeIn the following snippet, the product is initiated with BehaviorA; however, at some point during runtime its behavior is changed to BehaviorB. 123456789class Client &#123; Client() &#123; Product p = new Product(); p.behavior = new BehaviorA(); // after a while if (/*shall change behavior?*/) p.behavior = new BehaviorB(); &#125;&#125; Important Benefits Composition over inheritance: The interchangeability of the behavior for the product class and its derivations. Causes the behavior independence from superclass or subclasses. Allows the behavior vary independently from the clients that use it. ExampleImagine there is a class called ‘Animal’. Also imaging that we want to provide the ‘Movement’ capability for it. Obviously this ability comes in different flavors for different animals. So, we know that we need an interface to define the generality of the behavior. 1interface IMovement &#123; void move(); &#125; In such case, the ‘Animal’ is called a “context class” and ‘Movability’ is called “behavior”.One way to do it, is to define an interface ‘IMovement’ and implement it within the ‘Animal’ class. 123class Animal implements IMovement &#123; void move() &#123;/*implementations*/&#125; &#125; Although this could also be one solution, due to reasons partly mentioned below, it’s better if we do NOT inherit the behavior but instead, own it: 123class Animal &#123; IMovement movement; &#125; Design Patterns Overview","categories":[{"name":"Software Architecture","slug":"Software-Architecture","permalink":"http://truelogician.com/categories/Software-Architecture/"},{"name":"Design Patterns","slug":"Software-Architecture/Design-Patterns","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/"},{"name":"Types","slug":"Software-Architecture/Design-Patterns/Types","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"},{"name":"Behavioral","slug":"Software-Architecture/Design-Patterns/Types/Behavioral","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Behavioral/"}],"tags":[{"name":"Design-Patterns","slug":"Design-Patterns","permalink":"http://truelogician.com/tags/Design-Patterns/"},{"name":"Tutorials","slug":"Tutorials","permalink":"http://truelogician.com/tags/Tutorials/"}],"keywords":[{"name":"Software Architecture","slug":"Software-Architecture","permalink":"http://truelogician.com/categories/Software-Architecture/"},{"name":"Design Patterns","slug":"Software-Architecture/Design-Patterns","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/"},{"name":"Types","slug":"Software-Architecture/Design-Patterns/Types","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"},{"name":"Behavioral","slug":"Software-Architecture/Design-Patterns/Types/Behavioral","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Behavioral/"}]},{"title":"Design Patterns Cookbook","slug":"2010/design-patterns","date":"2010-09-07T18:52:07.000Z","updated":"2016-08-31T21:25:54.000Z","comments":true,"path":"2010/design-patterns/","link":"","permalink":"http://truelogician.com/2010/design-patterns/","excerpt":"Even after reading the original GoF book and “Head First Design Patterns” (which is one of the best book in this field), as well as many articles, I still found it very daunting and hard to grasp the gist of each pattern and apply the most suitable one for a certain scenario. All the examples and UML diagrams do help understanding the pattern, but deep down, developers are far better at reading code; specially code snippets.","text":"Even after reading the original GoF book and “Head First Design Patterns” (which is one of the best book in this field), as well as many articles, I still found it very daunting and hard to grasp the gist of each pattern and apply the most suitable one for a certain scenario. All the examples and UML diagrams do help understanding the pattern, but deep down, developers are far better at reading code; specially code snippets. This became the very reason for me to start describing patterns in an easier manner and friendlier format. In a way that I was expected to be explained when I began. Each pattern are described in 5 sections: Definition: One or two sentence to describe the essence of the pattern. Recipe: Introducing the basic elements and the nuts and bolts of a pattern. Serve: Putting it all together to see how the pattern is served to the client code. Benefits: Mentioning some few important benefits of the pattern. Example: Giving a trivial concrete example to help reader remember the pattern. A section like ‘When to Use’ is intentionally ignored since I believe if developers understand the pattern thoroughly, then they will realize which one to use when they encounter a problem. What is a Design PatternI believe the Wikipedia‘s definition of design pattern is quite clear. It basically states that a design pattern is a general solution to problems that we developers usually encounter on daily basis while adding new features or refactoring code. They are not finished solution for specific problems nor they can be transformed directly into source code. Design Patterns ClassificationClassical Design Patterns are essentially divided in 3 categories. Each category addresses problems in a specific much wider area of software development. Behavioral PatternsBehavioral patterns are those that concern the different aspects of the behaviors that your entities might take on. These patterns help your design to be more resilient to change specifically when the change concerns the communication between objects. Strategy Changing the Behavior at Runtime Observer Be Notified When Something Happens Command State Template Method Visitor Interpreter Chain of Responsibility Iterator Mediator Memento Creational PatternsCreational patterns are ones that create objects for you, rather than having you instantiate objects directly. This gives your program more flexibility in deciding which objects need to be created for a given case (Wikipedia). Factory Method Create Objects Without Knowing Their Specific Type Abstract Factory Group Factories of Similar Products Singleton Making Only One Object of a Class to Be Available for All Prototype Create New Objects by Cloning Builder Simplify Creation of Objects With Many Properties Structural PatternsThese patterns concern class and object composition. They use inheritance to compose interfaces and define ways to compose objects to obtain new functionality (Wikipedia Adapter Decorator Providing New Behavior at Runtime Composite Bridge Facade Flyweight Proxy","categories":[{"name":"Software Architecture","slug":"Software-Architecture","permalink":"http://truelogician.com/categories/Software-Architecture/"},{"name":"Design Patterns","slug":"Software-Architecture/Design-Patterns","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/"},{"name":"Overview","slug":"Software-Architecture/Design-Patterns/Overview","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/Overview/"}],"tags":[{"name":"Design-Patterns","slug":"Design-Patterns","permalink":"http://truelogician.com/tags/Design-Patterns/"},{"name":"Tutorials","slug":"Tutorials","permalink":"http://truelogician.com/tags/Tutorials/"}],"keywords":[{"name":"Software Architecture","slug":"Software-Architecture","permalink":"http://truelogician.com/categories/Software-Architecture/"},{"name":"Design Patterns","slug":"Software-Architecture/Design-Patterns","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/"},{"name":"Overview","slug":"Software-Architecture/Design-Patterns/Overview","permalink":"http://truelogician.com/categories/Software-Architecture/Design-Patterns/Overview/"}]}]}