{"meta":{"title":"Mahan's Blog","subtitle":null,"description":null,"author":"Mahan Rad","url":"http://truelogician.com"},"pages":[{"title":"About","date":"2016-08-22T21:59:06.000Z","updated":"2016-08-21T17:07:18.000Z","comments":true,"path":"about/index.html","permalink":"http://truelogician.com/about/index.html","excerpt":"","text":""},{"title":"Categories","date":"2016-08-21T17:17:28.000Z","updated":"2016-08-21T17:07:18.000Z","comments":true,"path":"categories/index.html","permalink":"http://truelogician.com/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2016-08-21T17:17:28.000Z","updated":"2016-08-21T17:07:18.000Z","comments":true,"path":"tags/index.html","permalink":"http://truelogician.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Introduction to Akka","slug":"introduction-to-akka","date":"2016-08-24T19:21:34.000Z","updated":"2016-08-25T19:12:45.000Z","comments":true,"path":"2016/08/introduction-to-akka/","link":"","permalink":"http://truelogician.com/2016/08/introduction-to-akka/","excerpt":"The following intends to provide a brief introduction to Akka which is framework based on the actor model and designed to increase the abstraction, scalability and fault-tolerance of systems. It provides a platform enabling developers to easily create concurrent and loosely coupled applications with the ability of self-healing in the face of failures.","text":"The following intends to provide a brief introduction to Akka which is framework based on the actor model and designed to increase the abstraction, scalability and fault-tolerance of systems. It provides a platform enabling developers to easily create concurrent and loosely coupled applications with the ability of self-healing in the face of failures. Typical Problems of Complex SystemsBelow is mentioned a few of the more important problems and issues that need to be addressed when dealing with more complex systems: Threads tend to need a lot of coordination logic, locks and synchronizations. The amount of threads to be used within an application is limited. It is usually hard to scale up, scale out, deploy and run the complex applications. Creating fault tolerant applications that can recover form errors is tedious. It is cumbersome to modify applications and systems with load balancing. How Akka Addresses the Issues?Alright, now that we know some of the top issues, let’s also mention a few key notes about what Akka has to offer in general and what it brings to the table to address them. Akka pushes the burden of low-level thread management and thread-safe code to the actor model. The use of actor model also makes Akka to be aligned with reactive manifesto which improves applications in the following terms: Message-Driven:Asynchronous message passing decreases coupling and provides location transparency for system components. Resilience:Akka enforces single responsibility through component isolation (actors). Elasticity:As systems scale, they will still be able to handle various workloads. In addition, actors can be increased in amount where they are exactly needed and they also can divide the workload among themselves. Responsivenes:Loose coupling, Resilience and Elasticity will make the system responsive. The increases in abstraction and loose coupling will also result into: Reduction in use of shared states among components. Increase in CPU utilization. Increase in capability to scale up and out. Increasing system fault-tolerance. So, What is an Actor?Definition: an actor is a fundamental primitive unit of computation or work which basically means that they are designed to perform small, simple and well-defined tasks. In order to better imagine and understand what an actor is, let’s start getting to know about their behavior and attributes. Each actor has a unique address and hence location transparent. Each actor has a mailbox (queue of messages), state and behavior. Actors are very lightweight (2.7 Million per 1GB of RAM). They are formed in hierarchies/trees (parent child relationship). They can live and communicate on different machines. They can create child actors. They can heal their children. They can supervise their children. They can change their behavior. They only communicate with one or more actors via message passing. They can only handle one message at a time. They can decide what to do with the message. Their states are only known by querying them (sending messages). Note: The fact that actors come in hierarchies and that they can heal their children can really help developers push the risky and error-prone logic to child actors (or leaves); Therefore, as soon as a child dies, its parent is notified and supervises it accordingly. What is an Actor-System (node)?A node or an actor-system groups several actors and thus, an instance of it can contain one or more actors. According to this definition, we can now have local or remote actors. Let’s say actor “a” lives on actor-system “X”; in this case: Local Actor: An actor “b” is local to actor “a”, if “b” lives on the same actor-system as “a” (meaning actor-system “X”). Remote Actor: An actor “b” is remote to actor “a”, if “b” lives on a different actor-system (let’s say actor-system “Y”). Also note that actor-system “Y” might be located on the same or a separate machine. Using addresses, an actor in one actor-system can send messages to local actor or remote actors. The address of an actor follows the format below and consists of these parts. 1[protocol]://[actor-system]@[hostname]:[port] Details of Actors Actions Creating Actor: With a name and certain properties (called props), actors can create other child actors. Sending Messages: An actor can send message to a local or remote actor. Passing messages among actors are async and non-blocking (Fire &amp; Forget). Actors are totally inactive/passive until they receive a message. Actors can handle throughput of 50 million messages per second per machine. The order of messages are maintained the same for sender and receiver. Changing Behavior: An actor can change its behavior at runtime. This change in behavior is triggered after receiving a message. Supervising Children: Actors can supervise their child actors. Child actors send failure signal and the parent instruct them what to do. The child does not need to know how to handle the error. Actors can supervise their children even over separate physical nodes. There are several error supervising strategies they can pick from. these strategies basically indicate what to do if a child fails in general or of a certain event. The strategy options are: resume / restart / escalate Note: In Akka, the message transport and the message delivery are completely separated processes. Akka uses concurrent-linked-queue as the mailbox, however one can define what message queue to use either per actor or per actor-system (node). Its also possible to use broker and let broker handle messaging. Properties of an Akka MessageAn Akka message is a simple immutable data container defined by user and is created and passed asynchronously among actors. Akka messages also aligned with the definition of a message in reactive manifesto. A message is an item of data that is sent to a specific destination. In a message driven system, addressable recipients await the arrival of messages and react to them, otherwise lying dormant (Reactive Manifesto).","categories":[{"name":"Architecture","slug":"Architecture","permalink":"http://truelogician.com/categories/Architecture/"},{"name":"Akka","slug":"Architecture/Akka","permalink":"http://truelogician.com/categories/Architecture/Akka/"}],"tags":[{"name":"Akka","slug":"Akka","permalink":"http://truelogician.com/tags/Akka/"},{"name":"Distributed","slug":"Distributed","permalink":"http://truelogician.com/tags/Distributed/"},{"name":"Actor Model","slug":"Actor-Model","permalink":"http://truelogician.com/tags/Actor-Model/"}],"keywords":[{"name":"Architecture","slug":"Architecture","permalink":"http://truelogician.com/categories/Architecture/"},{"name":"Akka","slug":"Architecture/Akka","permalink":"http://truelogician.com/categories/Architecture/Akka/"}]},{"title":"Enhance Your Hexo Blog","slug":"hexo-install-plugins","date":"2016-07-23T20:22:01.000Z","updated":"2016-08-24T19:26:17.000Z","comments":true,"path":"2016/07/hexo-install-plugins/","link":"","permalink":"http://truelogician.com/2016/07/hexo-install-plugins/","excerpt":"This tutorial covers how you can enhance your Hexo blog. If you have not yet create it, you might want to check out the quick start with Hexo, otherwise let’s go through a few essential plugins that might leverage your blog’s usability very briefly. You can find the detailed list of plugins here.","text":"This tutorial covers how you can enhance your Hexo blog. If you have not yet create it, you might want to check out the quick start with Hexo, otherwise let’s go through a few essential plugins that might leverage your blog’s usability very briefly. You can find the detailed list of plugins here. Comments &amp; DiscussionsOne of the most important features of a blog is perhaps the possiblity to interact with your readers and that will keep them coming back. disqus is a popular commenting service that works through the javascript snippet within your page. What you need to do to modify your blog with a full fledged commenting service is to sign up for a disqus account, register your site and pick a unique shortname for your blog and paste it in your _config.yaml file, right below your theme name as shown here. 1disqus_shortname: &lt;your-disqus-shortname&gt; Blog SearchUsing this plugin, you can empower your blog reader with the ability of searching through your posts. 1$ npm install hexo-generator-json-content --save Right after installation, the plugin should work properly out of the box (after running hexo generate or hexo server). however, in order to through details of configuration you might want to check its github page or your theme’s “_config.yaml” file. RSS FeedYou can enable your blog with an RSS feed out of your posts in hexo by installing this plugin. 1$ npm install hexo-generator-feed --save The plugin can be configured in the _config.yaml with the following configuration section. 1234feed: type: atom path: atom.xml limit: 20 Markdown SupportThis plugin provides more support on the markdown such as gmf (Github flavored markdown) tables and line breaks. 1$ npm install hexo-renderer-marked --save You can customize the plugin by pasting the following in your _config.yaml and changing the values. 12345678marked: gfm: true pedantic: false sanitize: false tables: true breaks: true smartLists: true smartypants: true Category GeneratorThis plugin allows you to assign one or more tags to your post. It will group your posts and enables your readers to later on find out about all of posts that are tagged with the same category. 1$ npm install hexo-generator-category --save and the related options are as follows: 12category_generator: per_page: 10 CNAME GeneratorThis plugin will automatically generate a Github pages CNAME file. 1$ npm install hexo-generator-cname --save This plugin does not require any specific configuration. Only make sure to change your blog’s url to the real one in the _config.yaml 123# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: &lt;real-blog-url&gt; Git DeployerThis plugin will help you deploy your blog using git. 1$ npm install hexo-deployer-git --save You can configure the deployer plugin like this: 1234deploy: type: git repo: https://github.com/&lt;username&gt;/&lt;repository&gt; branch: master Deploy to GithubWhen you are ready to deploy your blog to the github, run the following commands to generate your blog and deploy it to the specified branch in your github repository as you setup before. 12$ hexo generate$ hexo deploy Now that you have your generated blog on github, you can configure and connect your custom domain to load your blog from github.","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://truelogician.com/categories/Hexo/"},{"name":"Plugins","slug":"Hexo/Plugins","permalink":"http://truelogician.com/categories/Hexo/Plugins/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://truelogician.com/tags/Hexo/"},{"name":"Blogging","slug":"Blogging","permalink":"http://truelogician.com/tags/Blogging/"},{"name":"StaticWebsite","slug":"StaticWebsite","permalink":"http://truelogician.com/tags/StaticWebsite/"}],"keywords":[{"name":"Hexo","slug":"Hexo","permalink":"http://truelogician.com/categories/Hexo/"},{"name":"Plugins","slug":"Hexo/Plugins","permalink":"http://truelogician.com/categories/Hexo/Plugins/"}]},{"title":"Creating a Blog by Hexo","slug":"hexo-quick-start","date":"2016-07-14T19:55:50.000Z","updated":"2016-08-24T19:26:10.000Z","comments":true,"path":"2016/07/hexo-quick-start/","link":"","permalink":"http://truelogician.com/2016/07/hexo-quick-start/","excerpt":"Have you ever wished you could create your own blog in no time? Did you get frustrated as you thought you might not have enough time to design and set it up? Do you also wish to have more control over your blog comparing to other blogs such as those in Wordpress?","text":"Have you ever wished you could create your own blog in no time? Did you get frustrated as you thought you might not have enough time to design and set it up? Do you also wish to have more control over your blog comparing to other blogs such as those in Wordpress?Well, that was exactly the case for me and if it’s the same for you, then give “static site generators” a go. What is a “Static Stite Generator”?In short, a static site generator is basically a html file generator. It crates and formats html files by using its template engine as well as your text which is usually in a format such as markdown. Static site generators are very much easy to setup and use while providing users with more control over it. You can choose and heavily customize themes, choose among plenty of plugins and finally host your website on github pages for free. What is Hexo?Accoding to Hexo’s documentation, Hexo is a fast, simple and powerful blog framework. You write posts in Markdown (or other languages) and Hexo generates static files with a beautiful theme in seconds. -Alright, now let’s dive in. Installing HexoBefore installing hexo, use your OS package manager to update and cleanup system packages. 1$ brew update --all &amp;&amp; brew upgrade --all &amp;&amp; brew cleanup &amp;&amp; brew doctor &amp;&amp; brew prune Install Node.jsHexo is a node.js package. As a result, we first need to install the node.js in case it’s not. 1$ brew install node On linux machines, the procedure is similar with the distro’s package manager. On Windows machines, please refer to this page for download. npm is the default package manager of the node.js. In case you have had the node installed for some time, make an update and clean the previously installed packages. We will later on use npm to install all the required packages in our blog. 1$ npm update &amp;&amp; npm upgrade &amp;&amp; npm cache clean Now, we can actually install the hexo package. 1$ npm install hexo-cli -g Creaing Your First BlogNow, in order to create a blog, goto a directory in which you want to create a blog. 1$ hexo init blog After the blog directory is created cd to the created folder and download all the node modules we need to run and manage our blog. 12$ cd blog$ npm install Running Your Blog serverNow let’s clean (not needed for the first time but it’s a good practice), generate and run the blog on a node server on the default port 4000. 1$ hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server You can now view your blog locally on your browser. Creating Post, Page or DraftIn order to create more posts, you simply need to create .md files within your _posts folder. Additionally, Hexo also provides the following sugar coated commands to create a post, page or draft. 1234$ hexo new \"My Post\"$ hexo new post \"My Post\"$ hexo new page \"About Me\"$ hexo new draft \"My Post\" Now that you have a post, open it in your favorite editor and write your content in markdown language. Having a cheat sheet at your disposal is also a good idea while you are writing in Markdown. At this point you have a working blog (with the default theme). You might want to apply and customize a different theme. Hexo provides a handfule of themes on their website that you can choose from. In addition to themes, plenty of plugins are also available for hexo that can totally enhance your blog and your reader’s experience form it. So, if you still eager about improving your blog and connect a couple of useful plugins, read further on the next section.","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://truelogician.com/categories/Hexo/"},{"name":"Startup","slug":"Hexo/Startup","permalink":"http://truelogician.com/categories/Hexo/Startup/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://truelogician.com/tags/Hexo/"},{"name":"Blogging","slug":"Blogging","permalink":"http://truelogician.com/tags/Blogging/"},{"name":"StaticWebsite","slug":"StaticWebsite","permalink":"http://truelogician.com/tags/StaticWebsite/"}],"keywords":[{"name":"Hexo","slug":"Hexo","permalink":"http://truelogician.com/categories/Hexo/"},{"name":"Startup","slug":"Hexo/Startup","permalink":"http://truelogician.com/categories/Hexo/Startup/"}]}]}