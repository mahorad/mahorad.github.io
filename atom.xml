<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mahan&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://truelogician.com/"/>
  <updated>2017-03-16T18:23:18.000Z</updated>
  <id>http://truelogician.com/</id>
  
  <author>
    <name>Mahan Rad</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Getting Started with Kafka</title>
    <link href="http://truelogician.com/2017/kafka-startup/"/>
    <id>http://truelogician.com/2017/kafka-startup/</id>
    <published>2017-02-11T21:18:29.000Z</published>
    <updated>2017-03-16T18:23:18.000Z</updated>
    
    <content type="html"><![CDATA[<div align="justify"><br><a href="https://en.wikipedia.org/wiki/Apache_Kafka" target="_blank" rel="external">Kafka</a> is Apache’s open-source platform for <a href="http://kafka.apache.org/documentation.html#introduction" target="_blank" rel="external">distributed stream processing</a> in high throughput environments. In the following tutorial we will try to configure Apache Kafka and Zookeeper as well as demonstrating a basic and a fault tolerant messaging setup.<br></div>

<a id="more"></a>
<p>This post tries to cover the following areas on a Linux machine.</p>
<ul>
<li><a href="#kafka-introduction">Kafka Introduction</a></li>
<li><a href="#setting-up-kafka">Setting up Kafka</a></li>
<li><a href="#basic-messaging">Basic Messaging</a><ul>
<li><a href="#running-a-zookeeper-server-instance">Running a Zookeeper Server Instance</a></li>
<li><a href="#running-a-kafka-server-instance">Running a Kafka Server Instance</a></li>
<li><a href="#creating-and-checking-topics">Creating and Checking Topics</a></li>
<li><a href="#creating-producer-and-consumer">Creating Producer and Consumer</a></li>
</ul>
</li>
<li><a href="#scaled-messaging">Scaled Messaging</a><ul>
<li><a href="#creating-zookeeper-ensemble">Creating Zookeeper Ensemble</a></li>
<li><a href="#setting-up-a-kafka-cluster">Setting up a Kafka Cluster</a></li>
<li><a href="#creating-replicated-topics">Creating Replicated Topics</a></li>
<li><a href="#testing-resiliency">Testing Resiliency</a></li>
</ul>
</li>
</ul>
<h3 id="Kafka-Introduction"><a href="#Kafka-Introduction" class="headerlink" title="Kafka Introduction"></a>Kafka Introduction</h3><p>Kafka is a distributed publish/subscribe fault tolerant messaging system with partitioning and replication abilities that is based on distributed commit logs. It can handle high volumes of message streams (more than 1.5 million messages per second). Kafka heavily depends on the Apache Zookeeper maintain its internal states.</p>
<p>In a nutshell, Zookeeper is a distributed key-value store used for maintaining configuration information, distributed synchronization, group services and etc. for various distributed applications.</p>
<p><img src="/images/kafka/diagram.png" alt="A general view of Zookeeper and Kafka internals as well as their relationship"></p>
<p>However, before diving into the installation and configuration, let’s go through the basic terminology and key facts about Apache Kafka.</p>
<ul>
<li><strong>Kafka Message:</strong> is an entity with a arrival timestamp, a unique id and the binary data payload.</li>
<li><strong>Topic:</strong> is a logical concept; a named feed of messages to be exchanged.</li>
<li><strong>Broker:</strong> is a software process or node by which Kafka manages topics.<ul>
<li>They can be scaled out to achieve a higher load distribution, throughput and fault tolerance.</li>
</ul>
</li>
<li><strong>Cluster:</strong> is a group of brokers (a leader and followers) on one or more hosts</li>
<li><strong>Partition:</strong> is an immutable sequence of topic messages in a physical log file.<ul>
<li>A broker could have one or more partitions.</li>
<li>One partition cannot be split across machines.</li>
</ul>
</li>
<li><strong>Message Offset:</strong> is a non-global zero-based immutable sequence-number of a message within a partition that is maintained by consumer.</li>
<li><strong>Retention Policy:</strong> is Kafka’s configurable period during which the messages are retained by Kafka cluster for a topic.</li>
<li><strong>Replication Factor:</strong> is the data redundancy factor by which Kafka replicates messages among brokers.  </li>
<li><strong>In-Sync Replicas (ISR):</strong> is the number of in-sync brokers in a topic’s replica-set or quorum.</li>
<li><strong>Producer &amp; consumer:</strong> entities interested in sending and receiving messages to and from topics.<ul>
<li>Kafka won’t allow more than 2 consumers to read from the same partition simultaneously.</li>
</ul>
</li>
<li><strong>Controller:</strong> is an elected broker within a cluster for carrying out administrative tasks (e.g. managing the states of partitions and replicas).</li>
<li><strong>Partition Leader:</strong> is a broker responsible for recruiting workers for replicating and propagating messages.</li>
<li><strong>Follower/Worker:</strong> is a broker that only replicates the leader.<ul>
<li><ul>
<li>A broker can simultaneously be the leader for one topic a worker for another topic.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Setting-up-Kafka"><a href="#Setting-up-Kafka" class="headerlink" title="Setting up Kafka"></a>Setting up Kafka</h3><p>Installing Kafka is as easy as <a href="https://kafka.apache.org/downloads" target="_blank" rel="external">downloading</a> and unzipping the archive into a folder.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span></div><div class="line">$ wget http://www-eu.apache.org/dist/kafka/0.10.2.0/kafka_2.12-0.10.2.0.tgz</div><div class="line">$ tar -xzvf kafka_2.12-0.10.2.0.tgz</div><div class="line">$ mv kafka_2.12-0.10.2.0 kafka</div></pre></td></tr></table></figure>
<p>The above script switches to home directory, downloads and unzips kafka and finally removes version from folder name to simplify invocations.</p>
<p>Inside kafka/ directory, the <strong>bin/</strong> is where all the Kafka and Zookeeper executables exist. Also, the <strong>config/</strong> folder as the name suggests, contains the configuration files for both Zookeeper and Kafka.</p>
<h3 id="Basic-Messaging"><a href="#Basic-Messaging" class="headerlink" title="Basic Messaging"></a>Basic Messaging</h3><p>The following section demonstrates how to setup a producer/consumer messaging using a single Zookeeper node and a single Kafka broker.</p>
<h4 id="Running-a-Zookeeper-Server-Instance"><a href="#Running-a-Zookeeper-Server-Instance" class="headerlink" title="Running a Zookeeper Server Instance"></a>Running a Zookeeper Server Instance</h4><p>In order to start a Kafka server instance, an instance of the Zookeeper server needs to be running. This is done using the following executable and the instance’s configuration.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sh kafka/bin/zookeeper-server-start.sh kafka/config/zookeeper.properties</div></pre></td></tr></table></figure>
<p>The instance can be shutdown using ctrl+c or the running the binary below:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sh kafka/bin/zookeeper-server-stop.sh</div></pre></td></tr></table></figure>
<p>Check the Zookeeper server using:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ telnet localhost 2181</div></pre></td></tr></table></figure>
<p>followed by a Zookeeper command like ‘<strong>stat</strong>‘ to produce a similar output as below:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Trying 127.0.0.1...</div><div class="line">Connected to localhost.</div><div class="line">Escape character is <span class="string">'^]'</span>.</div><div class="line"><span class="built_in">stat</span></div><div class="line">Zookeeper version: 3.4.9-1757313, built on 08/23/2016 06:50 GMT</div><div class="line">Clients:</div><div class="line"> /127.0.0.1:48134[1](queued=0,recved=1107,sent=1109)</div><div class="line"> /127.0.0.1:41180[0](queued=0,recved=1,sent=0)</div><div class="line"></div><div class="line">Latency min/avg/max: 0/0/115</div><div class="line">Received: 1259</div><div class="line">Sent: 1264</div><div class="line">Connections: 2</div><div class="line">Outstanding: 0</div><div class="line">Zxid: 0x22</div><div class="line">Mode: standalone</div><div class="line">Node count: 21</div><div class="line">Connection closed by foreign host.</div></pre></td></tr></table></figure>
<h4 id="Running-a-Kafka-Server-Instance"><a href="#Running-a-Kafka-Server-Instance" class="headerlink" title="Running a Kafka Server Instance"></a>Running a Kafka Server Instance</h4><p>Now that a Zookeeper server is up and running, a Kafka server can startup in the same fashion.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sh kafka/bin/kafka-server-start.sh kafka/config/server.properties</div></pre></td></tr></table></figure>
<p>Again, a ctrl+c or the following binary stops the Kafka server.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sh kafka/bin/kafka-server-stop.sh</div></pre></td></tr></table></figure>
<h4 id="Creating-and-Checking-Topics"><a href="#Creating-and-Checking-Topics" class="headerlink" title="Creating and Checking Topics"></a>Creating and Checking Topics</h4><p>Now let’s create a topic (named ‘TestTopic’) by passing the address to our running Zookeeper instance. Let’s also leave the description to ‘–partitions’ and ‘–replication-factor’ switches for later.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ sh kafka/bin/kafka-topics.sh \</div><div class="line">&gt; --create \</div><div class="line">&gt; --topic TestTopic \</div><div class="line">&gt; --zookeeper localhost:2181 \</div><div class="line">&gt; --partitions 1 \</div><div class="line">&gt; --replication-factor 1</div></pre></td></tr></table></figure>
<p>Use the following commands in order to get the list and description of the created topics.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sh kafka/bin/kafka-topics.sh --list --zookeeper localhost:2181</div><div class="line">$ sh kafka/bin/kafka-topics.sh --describe --zookeeper localhost:2181</div></pre></td></tr></table></figure>
<h4 id="Creating-Producer-and-Consumer"><a href="#Creating-Producer-and-Consumer" class="headerlink" title="Creating Producer and Consumer"></a>Creating Producer and Consumer</h4><p>The only missing parts of the basic messaging is a producer and a consumer that can publish/receive messages on the topic that was created earlier. Let’s create a producer first.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sh kafka/bin/kafka-console-producer.sh \</div><div class="line">&gt; --broker-list localhost:9092 \</div><div class="line">&gt; --topic TestTopic</div></pre></td></tr></table></figure>
<p>The above command creates a producer pointing it to where it can find one or more brokers to determine the leader for the given topic. After running the producer console program, it is possible to queue up messages (type and ‘Enter’) to be later fetched by consumer.</p>
<p>Now let’s create a consumer for the ‘TestTopic’ topic that receives all the messages published on the topic previously (–from-beginning).</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sh kafka/bin/kafka-console-consumer.sh \</div><div class="line">&gt; --bootstrap-server localhost:9092 \</div><div class="line">&gt; --from-beginning \</div><div class="line">&gt; --topic TestTopic</div></pre></td></tr></table></figure>
<p>This shall show previously sent messages as well as messages that are sent now by the producer.</p>
<h3 id="Scaled-Messaging"><a href="#Scaled-Messaging" class="headerlink" title="Scaled Messaging"></a>Scaled Messaging</h3><p>In basic producer-consumer communication, in case the Zookeeper node or Kafka broker is crashed, the whole messaging fails. However it’s possible to make it fault tolerant by introducing a Zookeeper ensemble (a cluster of Zookeeper nodes) together with a Kafka cluster with multiple brokers (3 Zookeeper nodes and 3 Kafka brokers).</p>
<h4 id="Creating-Zookeeper-Ensemble"><a href="#Creating-Zookeeper-Ensemble" class="headerlink" title="Creating Zookeeper Ensemble"></a>Creating Zookeeper Ensemble</h4><p>If the Zookeeper and Kafka servers are still running from the previous section, stop them and head into ‘config/‘ folder in kafka installation directory. Create 3 files called ‘<em>zoo1.properties</em>‘, ‘<em>zoo2.properties</em>‘ and ‘<em>zoo3.properties</em>‘. Use the following content as a template and copy it to zoo2 and zoo3 and increment the corresponding values of ‘<strong>dataDir</strong>‘ and ‘<strong>clientPort</strong>‘.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># zoo1.properties</span></div><div class="line">tickTime=2000</div><div class="line">dataDir=/tmp/zookeeper/1</div><div class="line">clientPort=2181</div><div class="line">maxClientCnxns=0</div><div class="line">initLimit=5</div><div class="line">syncLimit=2</div><div class="line"></div><div class="line">server.1=localhost:2888:3888</div><div class="line">server.2=localhost:2889:3889</div><div class="line">server.3=localhost:2890:3890</div></pre></td></tr></table></figure>
<h6 id="Essential-Properties"><a href="#Essential-Properties" class="headerlink" title="Essential Properties"></a>Essential Properties</h6><ul>
<li><strong>tickTime:</strong> The number of milliseconds to be considered as one tick.</li>
<li><strong>dataDir:</strong> The server’s data directory.<ul>
<li>Notice that the /tmp/zookeeper directory might be removed after each restart.</li>
</ul>
</li>
<li><strong>clientPort:</strong> The port on which this server listens to client connections.</li>
<li><strong>maxClientCnxns:</strong> Maximum amount of client connections allowed for this server.</li>
<li><strong>initLimit:</strong> Maximum number of ticks for followers to connect and sync up with leader.</li>
<li><strong>syncLimit:</strong> Maximum number of ticks for followers to sync up with Zookeeper.</li>
<li><strong>server.x:</strong> The list of servers that create the Zookeeper ensemble.</li>
</ul>
<p>Also, for each of our servers that will run, we need to create a file called ‘myid’ in their data directory. This file basically consists of a single line and a single number of that machine’s id.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ mkdir -p /tmp/zookeeper/1</div><div class="line">$ touch /tmp/zookeeper/1/myid</div><div class="line">$ <span class="built_in">echo</span> <span class="string">'1'</span> &gt;&gt; /tmp/zookeeper/1/myid</div><div class="line"></div><div class="line">$ mkdir -p /tmp/zookeeper/2</div><div class="line">$ touch /tmp/zookeeper/2/myid</div><div class="line">$ <span class="built_in">echo</span> <span class="string">'2'</span> &gt;&gt; /tmp/zookeeper/2/myid</div><div class="line"></div><div class="line">$ mkdir -p /tmp/zookeeper/3</div><div class="line">$ touch /tmp/zookeeper/3/myid</div><div class="line">$ <span class="built_in">echo</span> <span class="string">'3'</span> &gt;&gt; /tmp/zookeeper/3/myid</div></pre></td></tr></table></figure>
<p>Now let’s run the first Zookeeper server in our ensemble.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sh kafka/bin/zookeeper-server-start.sh kafka/config/zoo1.properties</div></pre></td></tr></table></figure>
<p>After running our server a couple of ‘<em>java.net.ConnectException: Connection refused</em>‘ will be thrown which imply that our server instance cannot connect to the other two (since they are not running yet). So ignore the warning and run the rest of them.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sh kafka/bin/zookeeper-server-start.sh kafka/config/zoo2.properties</div><div class="line">$ sh kafka/bin/zookeeper-server-start.sh kafka/config/zoo3.properties</div></pre></td></tr></table></figure>
<p>As of this point, our Zookeeper ensemble with 3 server nodes shall be up and running.</p>
<h4 id="Setting-up-a-Kafka-Cluster"><a href="#Setting-up-a-Kafka-Cluster" class="headerlink" title="Setting up a Kafka Cluster"></a>Setting up a Kafka Cluster</h4><p>Let’s now create a Kafka cluster with 3 broker inside it which is as easy as running 3 server instances with different configurations. So let’s create 3 properties files kafka-0, kafka-1 and kafka-2 that are only different in values of ‘<strong>broker.id</strong>‘, ‘<strong>port</strong>‘ and ‘<strong>log.dirs</strong>‘. As a result, increment those values for <em>kafka-1.properties</em> and <em>kafka-2.properties</em>.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># kafka-0.properties</span></div><div class="line">broker.id=0</div><div class="line">port=9090</div><div class="line"></div><div class="line">num.network.threads=3</div><div class="line">num.io.threads=8</div><div class="line">socket.send.buffer.bytes=102400</div><div class="line">socket.receive.buffer.bytes=102400</div><div class="line">socket.request.max.bytes=104857600</div><div class="line"></div><div class="line">log.dirs=/tmp/kafka-logs/0</div><div class="line">num.partitions=1</div><div class="line">num.recovery.threads.per.data.dir=1</div><div class="line">log.retention.hours=168</div><div class="line"></div><div class="line">log.segment.bytes=1073741824</div><div class="line">log.retention.check.interval.ms=300000</div><div class="line"></div><div class="line">zookeeper.connect=localhost:2181,localhost:2182,localhost:2183</div><div class="line">zookeeper.connection.timeout.ms=6000</div></pre></td></tr></table></figure>
<h6 id="Essential-Properties-1"><a href="#Essential-Properties-1" class="headerlink" title="Essential Properties"></a>Essential Properties</h6><ul>
<li><strong>broker.id:</strong> The unique broker id for this server instance.</li>
<li><strong>port:</strong> A <em>deprecated</em> property denoting the port to which this server listens and accepts connections.</li>
<li><strong>log.dirs:</strong> The list of directories to maintain data logs.</li>
<li><strong>zookeeper.connect:</strong> The list of nodes within the Zookeeper ensemble.</li>
</ul>
<p>After creating the properties files with proper content, it’s time to run the Kafka server instances.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sh kafka/bin/kafka-server-start.sh kafka/config/kafka-0.properties</div><div class="line">$ sh kafka/bin/kafka-server-start.sh kafka/config/kafka-1.properties</div><div class="line">$ sh kafka/bin/kafka-server-start.sh kafka/config/kafka-2.properties</div></pre></td></tr></table></figure>
<h4 id="Creating-Replicated-Topics"><a href="#Creating-Replicated-Topics" class="headerlink" title="Creating Replicated Topics"></a>Creating Replicated Topics</h4><p>After having Zookeeper and Kafka brokers up and running, it’s now time to create a couple of topics that</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ sh kafka/bin/kafka-topics.sh \</div><div class="line">&gt; --create \</div><div class="line">&gt; --topic chat \</div><div class="line">&gt; --zookeeper localhost:2181,localhost:2182,localhost:2183 \</div><div class="line">&gt; --replication-factor 3 \</div><div class="line">&gt; --partitions 3</div><div class="line"></div><div class="line">$ sh kafka/bin/kafka-topics.sh</div><div class="line">&gt; --create \</div><div class="line">&gt; --topic event \</div><div class="line">&gt; --zookeeper localhost:2181,localhost:2182,localhost:2183 \</div><div class="line">&gt; --replication-factor 2 \</div><div class="line">&gt; --partitions 2</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sh kafka/bin/kafka-topics.sh --describe --zookeeper localhost:2181</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Topic:chat	PartitionCount:1	ReplicationFactor:3	Configs:</div><div class="line">	Topic: chat	Partition: 0	Leader: 1	Replicas: 1,2,0	Isr: 1,2,0</div><div class="line">Topic:event	PartitionCount:1	ReplicationFactor:2	Configs:</div><div class="line">	Topic: event	Partition: 0	Leader: 0	Replicas: 0,1	Isr: 0,1</div></pre></td></tr></table></figure>
<p>The output is the description of topics and their relation with existing brokers. The first two lines of output state that the topic ‘chat’ has one partition that is replicated among brokers 1,2 and 3 while all three of them are in sync at the moment (Isr: 1,2,0). The rest of the output demonstrate similar information for the ‘event’ topic. In order to get a better understanding, compare it with the diagram shown at the beginning of the post.</p>
<h4 id="Testing-Resiliency"><a href="#Testing-Resiliency" class="headerlink" title="Testing Resiliency"></a>Testing Resiliency</h4><p>It’s now time to create one consumer and one producer for our ‘chat’ topic (the same will stand for the ‘event’ topic as well) and test how resilient our setup is.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sh kafka/bin/kafka-console-producer.sh \</div><div class="line">&gt; --broker-list localhost:9092 \</div><div class="line">&gt; --topic chat</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sh kafka/bin/kafka-console-consumer.sh \</div><div class="line">&gt; --bootstrap-server localhost:9092 \</div><div class="line">&gt; --from-beginning --topic chat</div></pre></td></tr></table></figure>
<p>Try to send a few messages to ensure the setup works in the first place. According to the ‘chat’ topic description, broker1 is the topic leader. However, if that broker is killed, Kafka will elect another broker as the topic’s leader. Test this by killing broker 1 and issuing the topic description command which shall produce a similar output as below:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Topic:chat      PartitionCount:1        ReplicationFactor:3     Configs:</div><div class="line">        Topic: chat     Partition: 0    Leader: 2       Replicas: 1,2,0 Isr: 2,0</div><div class="line">Topic:event     PartitionCount:1        ReplicationFactor:2     Configs:</div><div class="line">        Topic: event    Partition: 0    Leader: 0       Replicas: 0,1   Isr: 0</div></pre></td></tr></table></figure>
<p>As can be seen, the producer and consumer are not affected and messages can still be passed; however, the topics are. The ‘chat’ topic has now the broker2 as its new leader and has only 2 ISRs while topic ‘event’ now owns only 1 ISR.</p>
<p>To further test the setup resiliency, try to kill a Zookeeper node and see that messaging will not fail until all nodes are down.</p>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;justify&quot;&gt;&lt;br&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_Kafka&quot;&gt;Kafka&lt;/a&gt; is Apache’s open-source platform for &lt;a href=&quot;http://kafka.apache.org/documentation.html#introduction&quot;&gt;distributed stream processing&lt;/a&gt; in high throughput environments. In the following tutorial we will try to configure Apache Kafka and Zookeeper as well as demonstrating a basic and a fault tolerant messaging setup.&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Kafka" scheme="http://truelogician.com/categories/Kafka/"/>
    
      <category term="Startup" scheme="http://truelogician.com/categories/Kafka/Startup/"/>
    
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
      <category term="Kafka" scheme="http://truelogician.com/tags/Kafka/"/>
    
      <category term="Messaging" scheme="http://truelogician.com/tags/Messaging/"/>
    
      <category term="Zookeeper" scheme="http://truelogician.com/tags/Zookeeper/"/>
    
      <category term="Messaging System" scheme="http://truelogician.com/tags/Messaging-System/"/>
    
      <category term="Event Sourcing" scheme="http://truelogician.com/tags/Event-Sourcing/"/>
    
  </entry>
  
  <entry>
    <title>Enhance Your Hexo Blog</title>
    <link href="http://truelogician.com/2016/hexo-install-plugins/"/>
    <id>http://truelogician.com/2016/hexo-install-plugins/</id>
    <published>2016-08-23T20:22:01.000Z</published>
    <updated>2017-03-15T14:38:52.000Z</updated>
    
    <content type="html"><![CDATA[<div align="justify"><br>This tutorial covers how you can enhance your Hexo blog. If you have not yet create it, you might want to check out the <a href="/2016/08/hexo-quick-start/">quick start</a> with Hexo, otherwise let’s go through a few essential plug-ins that might leverage your blog’s usability very briefly. You can find the detailed list of plug-ins <a href="https://hexo.io/plug-ins/" target="_blank" rel="external">here</a>.<br></div>

<a id="more"></a>
<h3 id="Comments-amp-Discussions"><a href="#Comments-amp-Discussions" class="headerlink" title="Comments &amp; Discussions"></a>Comments &amp; Discussions</h3><p>One of the most important features of a blog is perhaps the possibility to interact with your readers and that will keep them coming back. <a href="https://disqus.com/" target="_blank" rel="external">disqus</a> is a popular commenting service that works through the Javascript snippet within your page.</p>
<p>What you need to do to modify your blog with a full fledged commenting service is to <a href="https://disqus.com/profile/signup/" target="_blank" rel="external">sign up</a> for a disqus account, <a href="http://disqus.com/admin/create" target="_blank" rel="external">register your site</a> and pick a unique short-name for your blog and paste it in your _config.yaml file, right below your theme name as shown here.</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">disqus_shortname:</span> &lt;your-disqus-shortname<span class="string">&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Blog-Search"><a href="#Blog-Search" class="headerlink" title="Blog Search"></a><a href="https://github.com/alexbruno/hexo-generator-json-content" target="_blank" rel="external">Blog Search</a></h3><p>Using this plug-in, you can empower your blog reader with the ability of searching through your posts.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-json-content --save</div></pre></td></tr></table></figure>
<p>Right after installation, the plug-in should work properly out of the box (after running <em>hexo generate</em> or <em>hexo server</em>). however, in order to through details of configuration you might want to check its Github page or your theme’s “_config.yaml” file.</p>
<h3 id="RSS-Feed"><a href="#RSS-Feed" class="headerlink" title="RSS Feed"></a><a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="external">RSS Feed</a></h3><p>You can enable your blog with an RSS feed out of your posts in hexo by installing this plug-in.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-feed --save</div></pre></td></tr></table></figure>
<p>The plug-in can be configured in the _config.yaml with the following configuration section.</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">feed:</span></div><div class="line"><span class="attr">  type:</span> atom</div><div class="line"><span class="attr">  path:</span> atom.xml</div><div class="line"><span class="attr">  limit:</span> <span class="number">20</span></div></pre></td></tr></table></figure>
<h3 id="Markdown-Support"><a href="#Markdown-Support" class="headerlink" title="Markdown Support"></a><a href="https://github.com/hexojs/hexo-renderer-marked" target="_blank" rel="external">Markdown Support</a></h3><p>This plug-in provides more support on the markdown such as GFM (Github Flavored Markdown) tables and line breaks.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-renderer-marked --save</div></pre></td></tr></table></figure>
<p>You can customize the plug-in by pasting the following in your _config.yaml and changing the values.</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attr">marked:</span></div><div class="line"><span class="attr">  gfm:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  pedantic:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  sanitize:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  tables:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  breaks:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  smartLists:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  smartypants:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<h3 id="Category-Generator"><a href="#Category-Generator" class="headerlink" title="Category Generator"></a><a href="https://github.com/hexojs/hexo-generator-category" target="_blank" rel="external">Category Generator</a></h3><p>This plug-in allows you to assign one or more tags to your post. It will group your posts and enables your readers to later on find out about all of posts that are tagged with the same category.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-category --save</div></pre></td></tr></table></figure>
<p>and the related options are as follows:</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">category_generator:</span></div><div class="line"><span class="attr">  per_page:</span> <span class="number">10</span></div></pre></td></tr></table></figure>
<h3 id="CNAME-Generator"><a href="#CNAME-Generator" class="headerlink" title="CNAME Generator"></a><a href="https://github.com/leecrossley/hexo-generator-cname" target="_blank" rel="external">CNAME Generator</a></h3><p>This plug-in will automatically generate a Github pages CNAME file.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-cname --save</div></pre></td></tr></table></figure>
<p>This plug-in does not require any specific configuration. Only make sure to change your blog’s url to the real one in the _config.yaml</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># URL</span></div><div class="line"><span class="comment">## If your site is put in a subdirectory, set URL as 'http://yoursite.com/child' and root as '/child/'</span></div><div class="line"><span class="attr">url:</span> &lt;real-blog-url<span class="string">&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Git-Deployer"><a href="#Git-Deployer" class="headerlink" title="Git Deployer"></a><a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="external">Git Deployer</a></h3><p>This plug-in will help you deploy your blog using git.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>You can configure the deploy plug-in like this:</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> git</div><div class="line"><span class="attr">  repo:</span> https://github.com/&lt;username&gt;/&lt;repository<span class="string">&gt;</span></div><div class="line"><span class="attr">  branch:</span> master</div></pre></td></tr></table></figure>
<h2 id="Deploy-to-Github"><a href="#Deploy-to-Github" class="headerlink" title="Deploy to Github"></a>Deploy to Github</h2><p>When you are ready to deploy your blog to the Github, run the following commands to generate your blog and deploy it to the specified branch in your Github repository as you setup before.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>Now that you have your generated blog on Github, you can configure and connect your custom domain to load your blog from Github.</p>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;justify&quot;&gt;&lt;br&gt;This tutorial covers how you can enhance your Hexo blog. If you have not yet create it, you might want to check out the &lt;a href=&quot;/2016/08/hexo-quick-start/&quot;&gt;quick start&lt;/a&gt; with Hexo, otherwise let’s go through a few essential plug-ins that might leverage your blog’s usability very briefly. You can find the detailed list of plug-ins &lt;a href=&quot;https://hexo.io/plug-ins/&quot;&gt;here&lt;/a&gt;.&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://truelogician.com/categories/Hexo/"/>
    
      <category term="Plugins" scheme="http://truelogician.com/categories/Hexo/Plugins/"/>
    
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
      <category term="Hexo" scheme="http://truelogician.com/tags/Hexo/"/>
    
      <category term="Blogging" scheme="http://truelogician.com/tags/Blogging/"/>
    
      <category term="StaticWebsite" scheme="http://truelogician.com/tags/StaticWebsite/"/>
    
  </entry>
  
  <entry>
    <title>Creating a Blog by Hexo</title>
    <link href="http://truelogician.com/2016/hexo-quick-start/"/>
    <id>http://truelogician.com/2016/hexo-quick-start/</id>
    <published>2016-07-14T19:55:50.000Z</published>
    <updated>2016-09-18T15:36:36.000Z</updated>
    
    <content type="html"><![CDATA[<div align="justify"><br>Have you ever wished you could create your own blog in no time? Did you get frustrated as you thought you might not have enough time to design and set it up? Do you also wish to have more control over your blog comparing to other blogs such as those in WordPress?<br></div>

<a id="more"></a>
<p>Well, that was exactly the case for me and if it’s the same for you, then give “static site generators” a go.</p>
<h3 id="What-is-a-“Static-Site-Generator”"><a href="#What-is-a-“Static-Site-Generator”" class="headerlink" title="What is a “Static Site Generator”?"></a>What is a “Static Site Generator”?</h3><p>In short, a static site generator is basically a HTML file generator. It crates and formats HTML files by using its template engine as well as your text which is usually in a format such as markdown.</p>
<p>Static site generators are very much easy to setup and use while providing users with more control over it. You can choose and heavily customize themes, choose among plenty of plug-ins and finally host your website on Github pages for free.</p>
<h3 id="What-is-Hexo"><a href="#What-is-Hexo" class="headerlink" title="What is Hexo?"></a><a href="https://hexo.io/docs/" target="_blank" rel="external">What is Hexo?</a></h3><p>According to Hexo’s documentation, <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> is a fast, simple and powerful blog framework. You write posts in Markdown (or other languages) and Hexo generates static files with a beautiful theme in seconds.</p>
<p>-Alright, now let’s dive in.</p>
<h2 id="Installing-Hexo"><a href="#Installing-Hexo" class="headerlink" title="Installing Hexo"></a>Installing Hexo</h2><p>Before installing hexo, use your OS package manager to update and cleanup system packages.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew update --all &amp;&amp; brew upgrade --all &amp;&amp; brew cleanup &amp;&amp; brew doctor &amp;&amp; brew prune</div></pre></td></tr></table></figure>
<h2 id="Install-Node-js"><a href="#Install-Node-js" class="headerlink" title="Install Node.js"></a>Install Node.js</h2><p>Hexo is a node.js package. As a result, we first need to install the node.js in case it’s not.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install node</div></pre></td></tr></table></figure>
<p>On Linux machines, the procedure is similar with the distro’s package manager. On Windows machines, please refer to this <a href="https://nodejs.org/en/download/" target="_blank" rel="external">page</a> for download.</p>
<p>npm is the default package manager of the node.js. In case you have had the node installed for some time, make an update and clean the previously installed packages. We will later on use npm to install all the required packages in our blog.  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm update &amp;&amp; npm upgrade &amp;&amp; npm cache clean</div></pre></td></tr></table></figure>
<p>Now, we can actually install the Hexo package.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cli -g</div></pre></td></tr></table></figure>
<h2 id="Creating-Your-First-Blog"><a href="#Creating-Your-First-Blog" class="headerlink" title="Creating Your First Blog"></a>Creating Your First Blog</h2><p>Now, in order to create a blog, goto a directory in which you want to create a blog.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init blog</div></pre></td></tr></table></figure>
<p>After the blog directory is created, change directory (cd) to the created folder and download all the node modules we need to run and manage our blog.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> blog</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<h2 id="Running-Your-Blog-server"><a href="#Running-Your-Blog-server" class="headerlink" title="Running Your Blog server"></a>Running Your Blog server</h2><p>Now let’s clean (<em>not needed for the first time but it’s a good practice</em>), generate and run the blog on a node server on the default port 4000.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server</div></pre></td></tr></table></figure>
<p>You can now <a href="http://localhost:4000" target="_blank" rel="external">view your blog</a> locally on your browser.</p>
<h2 id="Creating-Post-Page-or-Draft"><a href="#Creating-Post-Page-or-Draft" class="headerlink" title="Creating Post, Page or Draft"></a>Creating Post, Page or Draft</h2><p>In order to create more posts, you simply need to create .md files within your _posts folder. Additionally, Hexo also provides the following sugar coated commands to create a post, page or draft.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My Post"</span></div><div class="line">$ hexo new post <span class="string">"My Post"</span></div><div class="line">$ hexo new page <span class="string">"About Me"</span></div><div class="line">$ hexo new draft <span class="string">"My Post"</span></div></pre></td></tr></table></figure>
<p>Now that you have a post, open it in your favorite editor and write your content in <a href="https://en.wikipedia.org/wiki/Markdown" target="_blank" rel="external">markdown</a> language. Having a <a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet" target="_blank" rel="external">cheat sheet</a> at your disposal is also a good idea while you are writing in Markdown.</p>
<p>At this point you have a working blog (<em>with the default theme</em>). You might want to apply and customize a different theme. Hexo provides a handful of <a href="https://hexo.io/themes/" target="_blank" rel="external">themes</a> on their website that you can choose from. In addition to themes, plenty of plug-ins are also available for hexo that can totally enhance your blog and your reader’s experience form it.</p>
<p>So, if you still eager about improving your blog and connect a couple of useful plug-ins, read further on the <a href="/2016/hexo-install-plugins/">next section</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;justify&quot;&gt;&lt;br&gt;Have you ever wished you could create your own blog in no time? Did you get frustrated as you thought you might not have enough time to design and set it up? Do you also wish to have more control over your blog comparing to other blogs such as those in WordPress?&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://truelogician.com/categories/Hexo/"/>
    
      <category term="Startup" scheme="http://truelogician.com/categories/Hexo/Startup/"/>
    
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
      <category term="Hexo" scheme="http://truelogician.com/tags/Hexo/"/>
    
      <category term="Blogging" scheme="http://truelogician.com/tags/Blogging/"/>
    
      <category term="StaticWebsite" scheme="http://truelogician.com/tags/StaticWebsite/"/>
    
  </entry>
  
  <entry>
    <title>FlatMap</title>
    <link href="http://truelogician.com/2015/flatmap/"/>
    <id>http://truelogician.com/2015/flatmap/</id>
    <published>2015-04-26T19:46:12.000Z</published>
    <updated>2017-03-16T20:33:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><div align="justify"><br>One of the most crucial and important concepts in mastering reactive extensions is understanding flatMap() and the uses of it which is mainly due to the fact that even a fairly simple application tend to work with multiple observables.<br></div><br><a id="more"></a><br>However, before understanding flatMap, we need to learn its simpler version, the map() operator and the details around using it.</p>
<h3 id="map-Transformation-On-the-fly"><a href="#map-Transformation-On-the-fly" class="headerlink" title="map(), Transformation On-the-fly"></a>map(), Transformation On-the-fly</h3><p>Sometimes you want to perform a transformation on each and every event from the upstream as soon as they arrive and pack them into a new observable for the downstream subscribers. In other words, map() constructs Observable<r> and replaces all upstream values of type T with R using your desired mapping function.</r></p>
<p>The snippet below takes integer values and maps items to corresponding strings embellished with double quotes.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Observable&lt;Integer&gt; observable =</div><div class="line">  Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</div><div class="line">Observable&lt;String&gt; map1 =</div><div class="line">  observable.map(n -&gt; <span class="string">"\""</span> + n + <span class="string">"\""</span>);</div><div class="line">map1.subscribe(log::info);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[main] - &quot;1&quot;</div><div class="line">[main] - &quot;2&quot;</div><div class="line">[main] - &quot;3&quot;</div></pre></td></tr></table></figure>
<p>We could also use multiple map() operators together.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Observable&lt;Instant&gt; map = observable</div><div class="line">  .map(order -&gt; order.getUser())</div><div class="line">  .map(user -&gt; user.birthDate())</div><div class="line">  .map(Date::toInstant);</div></pre></td></tr></table></figure>
<p>So far, each event within the upstream was a simple object, but what if the computation used for mapping is asynchronous or already return observables?</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Observable&lt;Integer&gt; observable =</div><div class="line">  Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</div><div class="line"></div><div class="line">Observable&lt;Observable&lt;Integer&gt;&gt; map =</div><div class="line">  observable.map(integer -&gt;</div><div class="line">    Observable.timer(<span class="number">1</span>, SECONDS)</div><div class="line">              .map(s -&gt; integer)</div><div class="line">  );</div><div class="line"></div><div class="line">map.subscribe(log::info);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[main] - rx.Observable@36f6e879</div><div class="line">[main] - rx.Observable@5a61f5df</div><div class="line">[main] - rx.Observable@3551a94</div></pre></td></tr></table></figure>
<h3 id="Using-flatMap"><a href="#Using-flatMap" class="headerlink" title="Using flatMap()"></a>Using flatMap()</h3><p>Since working with nested observables are cumbersome as you need to subscribe to each inner Observable and synchronize the results back into a single stream, flatMap() was created.</p>
<p>flatMap() does the following in order:</p>
<ul>
<li>constructs Observable<observable<r>&gt; (an observable of observables)</observable<r></li>
<li>replaces all upstream values of type T with Observable<r> (just like map()).</r></li>
<li>then it automatically subscribes to these inner Observable<r> streams</r></li>
<li>produces a single stream of type R, containing all values from all inner streams, as they come.</li>
<li>note that events produced from one inner Observable can interleave with events from another.</li>
</ul>
<p>The use cases of flatMap() mainly fall into the following categories; however check out its other overloads to find more usages.</p>
<h4 id="Asynchronous-Lengthy-Operations"><a href="#Asynchronous-Lengthy-Operations" class="headerlink" title="Asynchronous Lengthy Operations"></a>Asynchronous Lengthy Operations</h4><p>When the result of map() conversion is an Observable or a lengthy asynchronous operation that occurs on each element of the upstream. Examples of such operations are nonblocking IO operations.</p>
<p>The following example demonstrates a stream of webpages objects that only contain valid URLs that are to be fetched and parsed respectively.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> webPages</div><div class="line">  .flatMap(<span class="keyword">this</span>::fetchAsync)</div><div class="line">  .flatMap(<span class="keyword">this</span>::parseAsync);</div><div class="line"></div><div class="line"><span class="function">Observable&lt;Page&gt; <span class="title">fetchAsync</span><span class="params">(Page webPage)</span> </span>&#123;</div><div class="line">  <span class="comment">/* fetches page's document */</span></div><div class="line">&#125;</div><div class="line"><span class="function">Observable&lt;Page&gt; <span class="title">parseAsync</span><span class="params">(Page webPage)</span> </span>&#123;</div><div class="line">  <span class="comment">/* parses page's content */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>or a lengthy operation such as recognizing people from their photos.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Observable&lt;Image&gt; photos = getPhotos();</div><div class="line">Observable&lt;String&gt; names =</div><div class="line">  photos.flatMap(<span class="keyword">this</span>::recognize);</div><div class="line"></div><div class="line"><span class="function">Observable&lt;String&gt; <span class="title">recognize</span><span class="params">(Image photo)</span> </span>&#123;</div><div class="line">  <span class="comment">/* recognizes name by photo */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="One-to-Many-Transformation"><a href="#One-to-Many-Transformation" class="headerlink" title="One-to-Many Transformation:"></a>One-to-Many Transformation:</h4><p>That is when a single event is mapped into multiple sub-events; like a stream of orders where each order could contain multiple products that can be mapped to.</p>
<p>Consider the following API and imagine that we need to create a stream of items (products) being purchased in order to run some statistical calculations and find the popular products.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnlinePurchase</span> </span>&#123;</div><div class="line">  <span class="comment">//...</span></div><div class="line">  <span class="function">Observable&lt;Order&gt; <span class="title">getOrders</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">/* an observable of orders made so far */</span></div><div class="line">  &#125;</div><div class="line">  <span class="comment">//...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</div><div class="line">  <span class="comment">//...</span></div><div class="line">  <span class="function">List&lt;Product&gt; <span class="title">getProducts</span><span class="params">()</span> </span>&#123;<span class="comment">/*...*/</span>&#125;</div><div class="line">  <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Notice the Customer class that has simple getter method <strong>List<product> getProducts()</product></strong> returning an Iterable, now let’s see what we need to go through to create such a pipeline:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>Now let’s see how this can be implemented using flatMap() or its counterpart flatMapIterable().</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Observable&lt;Product&gt; items =</div><div class="line">  getOrders()</div><div class="line">    .map(order -&gt; order.getProducts())</div><div class="line">    .flatMap(Observable::from);</div><div class="line"></div><div class="line"><span class="comment">/* which is equivalen to */</span></div><div class="line">Observable&lt;Product&gt; items =</div><div class="line">  getOrders()</div><div class="line">    .flatMapIterable(order -&gt; order.getProducts());</div></pre></td></tr></table></figure>
<h5 id="Using-Instead-of-subscribe"><a href="#Using-Instead-of-subscribe" class="headerlink" title="Using Instead of subscribe()"></a>Using Instead of subscribe()</h5><p>imagine that we can upload a video (while we get notified of how much of it is uploaded) and we need to rate it right after upload is done.<br>consider the following replacement with flatMap()</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">store</span><span class="params">(UUID id)</span> </span>&#123;</div><div class="line">  upload(id).subscribe(</div><div class="line">    bytes -&gt; &#123;&#125;, <span class="comment">//ignore</span></div><div class="line">    e -&gt; log.error(<span class="string">"Error"</span>, e),</div><div class="line">    () -&gt; rate(id)</div><div class="line">  );</div><div class="line">&#125;</div><div class="line"><span class="function">Observable&lt;Long&gt; <span class="title">upload</span><span class="params">(UUID id)</span> </span>&#123;</div><div class="line">  <span class="comment">//...</span></div><div class="line">&#125;</div><div class="line"><span class="function">Observable&lt;Rating&gt; <span class="title">rate</span><span class="params">(UUID id)</span> </span>&#123;</div><div class="line">  <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>we could replace the content of store(..) method with the following using the flatMap()</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">upload(id)</div><div class="line">  .flatMap(</div><div class="line">    bytes -&gt; Observable.empty(),</div><div class="line">    e -&gt; Observable.error(e),</div><div class="line">    () -&gt; rate(id)</div><div class="line">  );</div></pre></td></tr></table></figure>
<p>we replace the completion notification with another Observable<rating> (i.e. rate(id)). So, even if the<br>original Observable wanted to terminate, we ignore that and in a way append a different<br>Observable.</rating></p>
<p>Remember that in practice, we do not replace map() and filter() with flatMap() due to the clarity<br>of code and performance.</p>
<p>the following is another example of flatMap()</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function">Observable&lt;Sound&gt; <span class="title">toMorseCode</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</div><div class="line">  <span class="keyword">switch</span>(ch) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'a'</span>: <span class="keyword">return</span> just(DI, DAH);</div><div class="line">    <span class="keyword">case</span> <span class="string">'b'</span>: <span class="keyword">return</span> just(DAH, DI, DI, DI);</div><div class="line">    <span class="keyword">case</span> <span class="string">'c'</span>: <span class="keyword">return</span> just(DAH, DI, DAH, DI);</div><div class="line">    <span class="comment">//...</span></div><div class="line">    <span class="keyword">case</span> <span class="string">'p'</span>: <span class="keyword">return</span> just(DI, DAH, DAH, DI);</div><div class="line">    <span class="keyword">case</span> <span class="string">'r'</span>: <span class="keyword">return</span> just(DI, DAH, DI);</div><div class="line">    <span class="keyword">case</span> <span class="string">'s'</span>: <span class="keyword">return</span> just(DI, DI, DI);</div><div class="line">    <span class="keyword">case</span> <span class="string">'t'</span>: <span class="keyword">return</span> just(DAH);</div><div class="line">    <span class="comment">//...</span></div><div class="line">    <span class="keyword">default</span>:</div><div class="line">    <span class="keyword">return</span> empty();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">enum</span> Sound &#123; DI, DAH &#125;</div><div class="line"><span class="comment">//...</span></div><div class="line">just(<span class="string">'S'</span>, <span class="string">'p'</span>, <span class="string">'a'</span>, <span class="string">'r'</span>, <span class="string">'t'</span>, <span class="string">'a'</span>)</div><div class="line">  .map(Character::toLowerCase)</div><div class="line">  .flatMap(<span class="keyword">this</span>::toMorseCode);</div></pre></td></tr></table></figure>
<p><strong>Note</strong>: flatMap() does not preserve the original order of events. In other words,<br>flatMap() cannot give any guarantee about what order of sub-events will arrive at the downstream operator/subscriber.<br>In fact, flatMap() subscribes to all sub-streams immediately and merges them together, pushing events downstream whenever any of the inner streams emit anything.</p>
<h3 id="Order-of-Events-After-flatMap"><a href="#Order-of-Events-After-flatMap" class="headerlink" title="Order of Events After flatMap()"></a>Order of Events After flatMap()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Observable</div><div class="line">  .just(DayOfWeek.SUNDAY, DayOfWeek.MONDAY)</div><div class="line">  .flatMap(<span class="keyword">this</span>::loadRecordsFor);</div><div class="line"></div><div class="line"><span class="function">Observable&lt;String&gt; <span class="title">loadRecordsFor</span><span class="params">(DayOfWeek dow)</span> </span>&#123;</div><div class="line">  <span class="keyword">switch</span>(dow) &#123;</div><div class="line">    <span class="keyword">case</span> SUNDAY:</div><div class="line">      <span class="keyword">return</span> Observable</div><div class="line">        .interval(<span class="number">90</span>, MILLISECONDS)</div><div class="line">        .take(<span class="number">5</span>)</div><div class="line">        .map(i -&gt; <span class="string">"Sun-"</span> + i);</div><div class="line">    <span class="keyword">case</span> MONDAY:</div><div class="line">      <span class="keyword">return</span> Observable</div><div class="line">        .interval(<span class="number">65</span>, MILLISECONDS)</div><div class="line">        .take(<span class="number">5</span>)</div><div class="line">        .map(i -&gt; <span class="string">"Mon-"</span> + i);</div><div class="line">        <span class="comment">//...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>flatMap() instead subscribes to all substreams<br>immediately and merges them together, pushing events downstream whenever<br>any of the inner streams emit anything. All subsequences returned from<br>flatMap() are merged and treated equally; that is, RxJava subscribes to all of them<br>immediately and pushes events downstream evenly:</p>
<p>Sun-0, Sun-1, Sun-2, Sun-3, Sun-4, Mon-0, Mon-1, Mon-2, Mon-3, Mon-4</p>
<h3 id="Controlling-the-concurrency-of-flatMap"><a href="#Controlling-the-concurrency-of-flatMap" class="headerlink" title="Controlling the concurrency of flatMap()"></a>Controlling the concurrency of flatMap()</h3><p>Consider the following example where we load user profiles through HTTP requests.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">  <span class="function">Observable&lt;Profile&gt; <span class="title">loadProfile</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//Make HTTP request...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Profile</span> </span>&#123;<span class="comment">/* ... */</span>&#125;</div><div class="line"><span class="comment">//...</span></div><div class="line"></div><div class="line"></div><div class="line">List&lt;User&gt; veryLargeList = <span class="comment">//...</span></div><div class="line">Observable&lt;Profile&gt; profiles = Observable</div><div class="line">  .from(veryLargeList)</div><div class="line">  .flatMap(User::loadProfile);</div></pre></td></tr></table></figure>
<p>this might look great at first glance since it emits all users pretty much instantaneously. However, subscription to<br>inner Observable<profile> most likely makes a new HTTP connection for each user. Therefore,<br>if we have, say 10,000 Users, we suddenly triggered 10,000 concurrent HTTP connections hitting the same server and we might end up with:</profile></p>
<ul>
<li>Rejected connections</li>
<li>Long wait time and timeouts</li>
<li>Crashing the server</li>
<li>Hitting rate-limit or blacklisting</li>
<li>Overall latency increase</li>
<li>Issues on the client, including too many open sockets, threads, excessive memory usage</li>
</ul>
<p>Increasing concurrency pays off only up to certain point. If you try to run too many<br>operations concurrently, you will most likely end up with a lot of context switches,<br>high memory and CPU utilization, and overall performance degradation.</p>
<p>flatMap() has a very simple overloaded version that limits the<br>total number of concurrent subscriptions to inner streams:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flatMap(User::loadProfile, <span class="number">10</span>);</div></pre></td></tr></table></figure>
<p>the maxConcurrent parameter limits the number of background<br>tasks that are forked from flatMap(). As in our case, when the 11th User appears from upstream, flatMap() will<br>not even call loadProfile() but instead, it will wait for any ongoing inner streams to complete.</p>
<p>as can be deduced, concatMap(f) is semantically equivalent to flatMap(f, 1)</p>
<h3 id="Preserving-Order-Using-concatMap"><a href="#Preserving-Order-Using-concatMap" class="headerlink" title="Preserving Order Using concatMap()"></a>Preserving Order Using concatMap()</h3><p>concatMap() operator has the exact same syntax as flatMap() but keeps the order of downstream events so that they align<br>perfectly with upstream events.<br>It does not introduce any concurrency whatsoever but it preserves the order of upstream events, avoiding overlapping.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Observable</div><div class="line">  .just(DayOfWeek.SUNDAY, DayOfWeek.MONDAY)</div><div class="line">  .concatMap(<span class="keyword">this</span>::loadRecordsFor);</div></pre></td></tr></table></figure>
<p>This time the output is exactly what we anticipated:</p>
<p>Sun-0, Sun-1, Sun-2, Sun-3, Sun-4, Mon-0, Mon-1, Mon-2, Mon-3, Mon-4</p>
<h5 id="concatMap-amp-flatMap-Comparison"><a href="#concatMap-amp-flatMap-Comparison" class="headerlink" title="concatMap &amp; flatMap Comparison"></a>concatMap &amp; flatMap Comparison</h5><p>flatMap() subscribes to all sub-Observables at the same time and uses the merge() operator internally<br>concatMap() subscribes only to the first underlying Observable and continues with the second one when the first one completes.</p>
<h3 id="merge-amp-mergeWith"><a href="#merge-amp-mergeWith" class="headerlink" title="merge() &amp; mergeWith()"></a>merge() &amp; mergeWith()</h3><p>merge() operator catches all events and aggregates them into a single stream.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Observable&lt;LicensePlate&gt; all = Observable.merge(</div><div class="line">  preciseAlgo(photo),</div><div class="line">  fastAlgo(photo),</div><div class="line">  experimentalAlgo(photo)</div><div class="line">);</div></pre></td></tr></table></figure>
<p>as soon as someone subscribes to <strong><em>Observable<licenseplate> all</licenseplate></em></strong>, it will automatically subscribe to all<br>upstream Observables at once. No matter which one emits a value first, it will be forwarded<br>to the Observer ensuring that events are serialized<br>(do not overlap), even if underlying streams each emit a value at the same time.</p>
<p>The merge() operator is used extensively when you want to treat multiple sources of<br>events of the same type as a single source.</p>
<p>errors appearing in any of the underlying Observables will be<br>eagerly propagated to Observers.<br>You can use the mergeDelayError() variant of<br>merge() to postpone any errors until all of the other streams have finished. mergeDe<br>layError() will even make sure to collect all exceptions, not only the first one, and<br>encapsulate them in rx.exceptions.CompositeException.</p>
<h3 id="zip-amp-zipWith"><a href="#zip-amp-zipWith" class="headerlink" title="zip() &amp; zipWith()"></a>zip() &amp; zipWith()</h3><p>Zipping is the act of taking two (or more) streams and combining them with each<br>other in such a way that each element from one stream is paired with corresponding<br>event from the other.</p>
<p>Therefore, events appear only<br>when all upstream sources emit an event. This is useful when you want to combine<br>results from multiple streams that are somehow related to one another.<br>Or, quite the<br>contrary, when two independent streams emit values but only combining them<br>together has business meaning.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Observable.zip(s1, s2, s3...);</div><div class="line"></div><div class="line">s1.zipWith(s2, ...);</div></pre></td></tr></table></figure>
<p>example 1:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weather</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Weather</span><span class="params">(Temperature temperature, Wind wind)</span> </span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//...</span></div><div class="line">Observable&lt;Temperature&gt; temperatureMeasurements = station.temperature();</div><div class="line">Observable&lt;Wind&gt; windMeasurements = station.wind();</div><div class="line">temperatureMeasurements.zipWith(windMeasurements,</div><div class="line">  (temperature, wind) -&gt; <span class="keyword">new</span> Weather(temperature, wind));</div></pre></td></tr></table></figure>
<p>example 2:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">Observable&lt;LocalDate&gt; nextTenDays =</div><div class="line">  Observable</div><div class="line">    .range(<span class="number">1</span>, <span class="number">10</span>)</div><div class="line">    .map(i -&gt; LocalDate.now().plusDays(i));</div><div class="line"></div><div class="line">Observable&lt;Vacation&gt; possibleVacations = Observable</div><div class="line">  .just(City.Warsaw, City.London, City.Paris)</div><div class="line">  .flatMap(city -&gt; nextTenDays.map(date -&gt; <span class="keyword">new</span> Vacation(city, date)))</div><div class="line">  .flatMap(vacation -&gt;</div><div class="line">    Observable.zip(</div><div class="line">      vacation.weather().filter(Weather::isSunny),</div><div class="line">      vacation.cheapFlightFrom(City.NewYork),</div><div class="line">      vacation.cheapHotel(),</div><div class="line">      (w, f, h) -&gt; vacation</div><div class="line">  ));</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vacation</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> City where;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> LocalDate when;</div><div class="line">  Vacation(City where, LocalDate when) &#123;</div><div class="line">    <span class="keyword">this</span>.where = where;</div><div class="line">    <span class="keyword">this</span>.when = when;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> Observable&lt;Weather&gt; <span class="title">weather</span><span class="params">()</span> </span>&#123;<span class="comment">/*...*/</span>&#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> Observable&lt;Flight&gt; <span class="title">cheapFlightFrom</span><span class="params">(City from)</span> </span>&#123;<span class="comment">/*...*/</span>&#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> Observable&lt;Hotel&gt; <span class="title">cheapHotel</span><span class="params">()</span> </span>&#123;<span class="comment">/*...*/</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>the line <strong>(w, f, h) -&gt; vacation</strong> basically means that for each vacation, we want to make sure<br>weather, cheap flight, and hotel are present. If all these conditions are met, we return<br>vacation instance; otherwise, zip will not invoke our lambda expression at all.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;div align=&quot;justify&quot;&gt;&lt;br&gt;One of the most crucial and important concepts in mastering reactive extensions is understanding flatMap() and the uses of it which is mainly due to the fact that even a fairly simple application tend to work with multiple observables.&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Reactive" scheme="http://truelogician.com/categories/Reactive/"/>
    
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
      <category term="Reactive Programming" scheme="http://truelogician.com/tags/Reactive-Programming/"/>
    
      <category term="Reactive Extensions" scheme="http://truelogician.com/tags/Reactive-Extensions/"/>
    
      <category term="RxJava" scheme="http://truelogician.com/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Observables &amp; Subscriptions</title>
    <link href="http://truelogician.com/2015/observables/"/>
    <id>http://truelogician.com/2015/observables/</id>
    <published>2015-03-02T21:17:36.000Z</published>
    <updated>2017-02-08T06:15:48.000Z</updated>
    
    <content type="html"><![CDATA[<div align="justify"><br>Now that we are familiar with reactive programming concepts and that Observable resides at the core of it, let’s find out about the ways we can create and use simple observables.<br></div>

<a id="more"></a>
<h3 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h3><p>As mentioned earlier, observables are lazy by default and accordingly in order to begin seeing observables outputs there should be at least one subscriber such as the one mentioned below.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Observable&lt;T&gt; obsevable = <span class="comment">//...</span></div><div class="line">observable.subscribe(</div><div class="line">        (i) -&gt; System.out.println(i),</div><div class="line">        (e) -&gt; System.out.println(e),</div><div class="line">        ( ) -&gt; System.out.println(<span class="string">"completed"</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
<p>Notice that the event callback is invoked each time upstream pushes an event to downstream and that the callback will not be invoked from more than one thread at a time. In the output given for each snippet, the thread name on which the code being executed is mentioned.</p>
<h2 id="1-Observables"><a href="#1-Observables" class="headerlink" title="1- Observables"></a>1- Observables</h2><h3 id="Factory-Methods"><a href="#Factory-Methods" class="headerlink" title="Factory Methods"></a>Factory Methods</h3><p>There are a few factory methods to create fixed Observables. Except interval(interval, unit) method, the rest of factory methods execute on the client thread meaning that they block the client thread until all events are received.</p>
<h4 id="Observable-just-value"><a href="#Observable-just-value" class="headerlink" title="Observable.just(value)"></a>Observable.just(value)</h4><p>This method creates an Observable instance that only emits the given values and then completes afterward.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Observable&lt;String&gt; observable =</div><div class="line">  Observable.just(<span class="string">"hello world!"</span>);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[main] - hello world!</div><div class="line">[main] - completed</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Observable&lt;String&gt; observable =</div><div class="line">  Observable.just(<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[main] - one</div><div class="line">[main] - two</div><div class="line">[main] - three</div><div class="line">[main] - completed</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Observable&lt;Integer&gt; observable =</div><div class="line">  Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[main] - 1</div><div class="line">[main] - 2</div><div class="line">[main] - 3</div><div class="line">[main] - completed</div></pre></td></tr></table></figure>
<h4 id="Observable-from-values"><a href="#Observable-from-values" class="headerlink" title="Observable.from(values)"></a>Observable.from(values)</h4><p>This method creates an Observable<t> from the given collection or iterable and emits its values.</t></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Observable&lt;Integer&gt; fibonacci =</div><div class="line">  Observable.from(<span class="keyword">new</span> Integer[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span> &#125;);</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[main] - 1</div><div class="line">[main] - 2</div><div class="line">[main] - 3</div><div class="line">[main] - 5</div><div class="line">[main] - 8</div><div class="line">[main] - completed</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">MongoCollection&lt;Document&gt; employees = db.getCollection(<span class="string">"employees"</span>);</div><div class="line">Observable</div><div class="line">  .from(employees.find())</div><div class="line">  .doAfterTerminate(() -&gt; &#123;</div><div class="line">    <span class="comment">// what needs to be done after termination</span></div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[main] - Document&#123;&#123;_id=589a3ebfb371aa47cfa03e1c, name=John Doe, salary=1234.0&#125;&#125;</div><div class="line">[main] - Document&#123;&#123;_id=589a3edeb371aa47cfa03e1d, name=James Brown, salary=4321.0&#125;&#125;</div></pre></td></tr></table></figure>
<h4 id="Observable-range-from-n"><a href="#Observable-range-from-n" class="headerlink" title="Observable.range(from, n)"></a>Observable.range(from, n)</h4><p>Produces an Observable and emits n integer numbers starting from <em>‘from’</em>. For example, range(5, 3) will emit 5, 6, and 7 and then complete normally.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Observable&lt;Integer&gt; observable =</div><div class="line">  Observable.range(<span class="number">10</span>, <span class="number">5</span>);</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[main] - 10</div><div class="line">[main] - 11</div><div class="line">[main] - 12</div><div class="line">[main] - 13</div><div class="line">[main] - 14</div><div class="line">[main] - 15</div><div class="line">[main] - completed</div></pre></td></tr></table></figure>
<h4 id="Observable-interval-interval-unit"><a href="#Observable-interval-interval-unit" class="headerlink" title="Observable.interval(interval, unit)"></a>Observable.interval(interval, unit)</h4><p>This factory method creates a cold observable that emits long numbers starting from zero and a fixed delay between each number including the first one. Notice that since numbers are emitted on the computation thread, in order to see some results, you need to block the main thread.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Observable&lt;Long&gt; observable =</div><div class="line">  Observable.interval(<span class="number">2</span>, TimeUnit.SECONDS);</div><div class="line">  <span class="comment">// 1, 2, 3, 4, 5, ...</span></div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[RxComputationScheduler-2] - 0</div><div class="line">[RxComputationScheduler-2] - 1</div><div class="line">[RxComputationScheduler-2] - 2</div><div class="line">...</div></pre></td></tr></table></figure>
<h4 id="Observable-create-…"><a href="#Observable-create-…" class="headerlink" title="Observable.create(…)"></a>Observable.create(…)</h4><p>Use this method, if you need more control over unsubscribes as well as production and consumption of events. The following snippet rapidly produces integers starting from zero.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Observable&lt;Integer&gt; observable = Observable.create(</div><div class="line">  subscriber -&gt; &#123;</div><div class="line">    Runnable r = () -&gt; &#123;</div><div class="line">      <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">      <span class="keyword">while</span> (!subscriber.isUnsubscribed())</div><div class="line">        subscriber.onNext(i++);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">new</span> Thread(r).start();</div><div class="line">  &#125;);</div><div class="line">  pause(<span class="number">1</span>);</div><div class="line">  subscription.unsubscribe();</div><div class="line">  pause(<span class="number">0</span>);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[Thread-0] - 0</div><div class="line">[Thread-0] - 1</div><div class="line">[Thread-0] - 2</div><div class="line">[Thread-0] - 3</div><div class="line">[Thread-0] - 4</div><div class="line">[Thread-0] - 5</div><div class="line">[Thread-0] - 6</div></pre></td></tr></table></figure>
<p>When creating observables by create() method, in order to avoid sending unnecessary events when there are no subscribers, check the isUnsubscribed() as often as possible.<br>Also notice that these custom implementations of Observable should ensure that events coming from multiple threads are called in a serialized fashion.</p>
<h4 id="Observable-fromCallable-…"><a href="#Observable-fromCallable-…" class="headerlink" title="Observable.fromCallable(…)"></a>Observable.fromCallable(…)</h4><p>This factory method creates an Observable from the value that is returned by another method (callable). The following snippet create a product Observable by fetching the product by its ID. This method is semantically the same as create() but much more concise.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function">Observable&lt;Product&gt; <span class="title">load</span><span class="params">(<span class="keyword">int</span> productId)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> Observable.fromCallable(() -&gt; findById(productId));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Composing-Observables"><a href="#Composing-Observables" class="headerlink" title="Composing Observables"></a>Composing Observables</h3><p>while composing observables, we can:</p>
<ul>
<li>A: Wait for corresponding events, process them and emit the results.</li>
</ul>
<p>In the following example the corresponding events of the first two Observable are added and emitted as the third one.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Observable&lt;Integer&gt; one = Observable.range(<span class="number">10</span>, <span class="number">100</span>);</div><div class="line">Observable&lt;Long&gt; two = Observable.interval(<span class="number">2</span>, SECONDS);</div><div class="line">Observable</div><div class="line">  .zip(one, two,</div><div class="line">    (l1, l2) -&gt; l1 + l2)</div><div class="line">  .subscribe(log::info);</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[RxComputationScheduler-2] - 10 <span class="comment"># 10 + 0</span></div><div class="line">[RxComputationScheduler-2] - 12 <span class="comment"># 11 + 1</span></div><div class="line">[RxComputationScheduler-2] - 14 <span class="comment"># 12 + 2</span></div><div class="line">[RxComputationScheduler-2] - 16 <span class="comment"># 13 + 3</span></div><div class="line">[RxComputationScheduler-2] - 18 <span class="comment"># 14 + 4</span></div><div class="line">...</div></pre></td></tr></table></figure>
<ul>
<li>B: Compose a stream from the first two Observable which emits events they are arrive.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Observable&lt;Integer&gt; one = Observable.range(<span class="number">10</span>, <span class="number">2</span>);</div><div class="line">Observable&lt;Long&gt; two = Observable.interval(<span class="number">1</span>, SECONDS);</div><div class="line">Observable</div><div class="line">  .merge(one, two)</div><div class="line">  .subscribe(log::info);</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[main] - 10</div><div class="line">[main] - 11</div><div class="line">[RxComputationScheduler-1] - 0</div><div class="line">[RxComputationScheduler-1] - 1</div><div class="line">[RxComputationScheduler-1] - 2</div><div class="line">...</div></pre></td></tr></table></figure>
<h2 id="2-Subscriptions"><a href="#2-Subscriptions" class="headerlink" title="2- Subscriptions"></a>2- Subscriptions</h2><p>As stated earlier, having a reference to a subscriber instance together with using add() method we can be notified of unsubscribe and perform suitable action. We only need to attach the unsubscribe action to a subscription and add it to the list of subscriber’s subscriptions.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Subscription onUnsubscribe =</div><div class="line">  Subscriptions.create(() -&gt; in.close());</div><div class="line">subscriber.add(onUnsubscribe);</div></pre></td></tr></table></figure>
<p>It is important to unsubscribe from an Observable as soon as you no longer want to receive more events and Subscription provides just a way to do that using unsubscribe() method.</p>
<h3 id="Multiple-Subscribers"><a href="#Multiple-Subscribers" class="headerlink" title="Multiple Subscribers"></a>Multiple Subscribers</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Observable&lt;Integer&gt; o1 =</div><div class="line">  Observable.create(subscriber -&gt; &#123;</div><div class="line">    log.info(<span class="string">"generating values"</span>);</div><div class="line">    subscriber.onNext(<span class="number">1</span>);</div><div class="line">    subscriber.onNext(<span class="number">2</span>);</div><div class="line">    subscriber.onNext(<span class="number">3</span>);</div><div class="line">  &#125;);</div><div class="line">o1.subscribe(log::info);</div><div class="line">o1.subscribe(log::info);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[main] - generating values</div><div class="line">[main] - 1</div><div class="line">[main] - 2</div><div class="line">[main] - 3</div><div class="line">[main] - generating values</div><div class="line">[main] - 1</div><div class="line">[main] - 2</div><div class="line">[main] - 3</div></pre></td></tr></table></figure>
<h4 id="Unsubscribing-from-Outside"><a href="#Unsubscribing-from-Outside" class="headerlink" title="Unsubscribing from Outside."></a>Unsubscribing from Outside.</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Observable&lt;Long&gt; one =</div><div class="line">  Observable.interval(<span class="number">1</span>, TimeUnit.SECONDS);</div><div class="line">Subscription subscription = one.subscribe(log::info);</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  Thread.currentThread().sleep(<span class="number">2000</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">  e.printStackTrace();</div><div class="line">&#125;</div><div class="line">subscription.unsubscribe();</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[RxComputationScheduler-1] - 0</div><div class="line">[RxComputationScheduler-1] - 1</div><div class="line"></div><div class="line">Process finished with exit code 0</div></pre></td></tr></table></figure>
<h4 id="Unsubscribing-from-Inside"><a href="#Unsubscribing-from-Inside" class="headerlink" title="Unsubscribing from Inside."></a>Unsubscribing from Inside.</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Observable&lt;Integer&gt; one =</div><div class="line">  Observable.from(<span class="keyword">new</span> Integer[] &#123; -<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;);</div><div class="line"></div><div class="line">Subscriber&lt;Integer&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer i)</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span> (i == <span class="number">0</span>)</div><div class="line">          unsubscribe();</div><div class="line">      log.info(i);</div><div class="line">  &#125;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123; &#125;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">      log.info(<span class="string">"completed"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">one.subscribe(subscriber);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[main] - -2</div><div class="line">[main] - -1</div><div class="line">[main] - 0</div><div class="line"></div><div class="line">Process finished with exit code 0</div></pre></td></tr></table></figure>
<h2 id="Sharing-an-Observable"><a href="#Sharing-an-Observable" class="headerlink" title="Sharing an Observable"></a>Sharing an Observable</h2><h3 id="ConnectableObservable"><a href="#ConnectableObservable" class="headerlink" title="ConnectableObservable"></a>ConnectableObservable</h3><p>Sometimes multiple subscribers are interested in your observable and you might none of them to miss any early emitted events. Without ConnectableObservable, hot observables will emit items and late subscribers might lose some of them.</p>
<p>A ConnectableObservable is an Observable that emits events to subscribers only when its connect() method is invoked. When this happens, a dedicated subscriber is assigned to the upstream which emits exactly the same sequence of events to all downstream subscribers. It ensures that the upstream Observable has at most one Subscriber as it opens only one subscription to the original Observable.</p>
<p>The following code tries to make a comparison between normal observable and a connectable observable with two subscribers. Notice how in case of ConnectableObservable, both subscribers experience the same events at the same time.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">Observable&lt;Integer&gt; observable = Observable.create(</div><div class="line">  subscriber -&gt; &#123;</div><div class="line">    log.info(<span class="string">"connecting..."</span>);</div><div class="line">    Runnable r = () -&gt; &#123;</div><div class="line">      subscriber.onNext(<span class="number">1</span>);</div><div class="line">      subscriber.onNext(<span class="number">2</span>);</div><div class="line">      subscriber.onNext(<span class="number">3</span>);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">new</span> Thread(r).start();</div><div class="line">    Subscription s = Subscriptions.create(</div><div class="line">      () -&gt; log.info(<span class="string">"disconnecting..."</span>)</div><div class="line">    );</div><div class="line">    subscriber.add(s);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">log.info(<span class="string">"before subscription"</span>);</div><div class="line"></div><div class="line">Subscription sub1 = observable.subscribe(i -&gt; log.info(<span class="string">"sub1: "</span> + i));</div><div class="line">log.info(<span class="string">"sub1 subscribed"</span>);</div><div class="line"></div><div class="line">Subscription sub2 = observable.subscribe(i -&gt; log.info(<span class="string">"sub2: "</span> + i));</div><div class="line">log.info(<span class="string">"sub2 subscribed"</span>);</div><div class="line"></div><div class="line">sub1.unsubscribe();</div><div class="line">log.info(<span class="string">"sub1 unsubscribed"</span>);</div><div class="line">sub2.unsubscribe();</div><div class="line">log.info(<span class="string">"sub2 unsubscribed"</span>);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">[main] - before subscription</div><div class="line"></div><div class="line">[main] - connecting...</div><div class="line">[Thread-0] - sub1: 1</div><div class="line">[Thread-0] - sub1: 2</div><div class="line">[Thread-0] - sub1: 3</div><div class="line">[main] - sub1 subscribed</div><div class="line"></div><div class="line">[main] - connecting...</div><div class="line">[main] - sub2 subscribed</div><div class="line">[Thread-1] - sub2: 1</div><div class="line">[Thread-1] - sub2: 2</div><div class="line">[Thread-1] - sub2: 3</div><div class="line"></div><div class="line">[main] - disconnecting...</div><div class="line">[main] - sub1 unsubscribed</div><div class="line"></div><div class="line">[main] - disconnecting...</div><div class="line">[main] - sub2 unsubscribed</div></pre></td></tr></table></figure>
<hr>
<p>The publish() operator converts a normal observable to a ConnectableObservable. Finally, the connect() method causes the ConnectableObservable to start emitting events.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// the same observable as previous example</span></div><div class="line"><span class="comment">// ...</span></div><div class="line">ConnectableObservable&lt;Integer&gt; shared = observable.publish();</div><div class="line"></div><div class="line">log.info(<span class="string">"before subscription"</span>);</div><div class="line"></div><div class="line">Subscription sub1 = shared.subscribe(s -&gt; log.info(<span class="string">"sub1: "</span> + s));</div><div class="line">log.info(<span class="string">"sub1 subscribed"</span>);</div><div class="line"></div><div class="line">Subscription sub2 = shared.subscribe(s -&gt; log.info(<span class="string">"sub2: "</span> + s));</div><div class="line">log.info(<span class="string">"sub2 subscribed"</span>);</div><div class="line"></div><div class="line">shared.connect();</div><div class="line"></div><div class="line">sub1.unsubscribe();</div><div class="line">log.info(<span class="string">"sub1 unsubscribed"</span>);</div><div class="line">sub2.unsubscribe();</div><div class="line">log.info(<span class="string">"sub2 unsubscribed"</span>);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[main] - before subscription</div><div class="line"></div><div class="line">[main] - sub1 subscribed</div><div class="line">[main] - sub2 subscribed</div><div class="line"></div><div class="line">[main] - connecting...</div><div class="line">[Thread-0] - sub1: 1</div><div class="line">[Thread-0] - sub2: 1</div><div class="line">[Thread-0] - sub1: 2</div><div class="line">[Thread-0] - sub2: 2</div><div class="line">[Thread-0] - sub1: 3</div><div class="line">[Thread-0] - sub2: 3</div><div class="line"></div><div class="line">[main] - sub1 unsubscribed</div><div class="line">[main] - sub2 unsubscribed</div></pre></td></tr></table></figure>
<p>Notice and compare the threads on which subscribers receive the events.</p>
<h3 id="publish-refCount-or-share"><a href="#publish-refCount-or-share" class="headerlink" title="publish().refCount() or share()"></a>publish().refCount() or share()</h3><p>The <strong>publish().refCount() duet</strong> is so commonly used for sharing observables that the alias of <strong>share()</strong> is created for them. share() basically subscribes to the upstream Observable and shares it if there is at least one active subscriber. It also unsubscribes from upstream as soon as the last active subscriber unsubscribes.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">Observable&lt;Integer&gt; observable = Observable.create(</div><div class="line">        subscriber -&gt; &#123;</div><div class="line"></div><div class="line">            log.info(<span class="string">"connecting..."</span>);</div><div class="line">            Runnable r = () -&gt; &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    subscriber.onNext(<span class="number">1</span>);</div><div class="line">                    Thread.currentThread().sleep(<span class="number">1000</span>);</div><div class="line">                    subscriber.onNext(<span class="number">2</span>);</div><div class="line">                    Thread.currentThread().sleep(<span class="number">1000</span>);</div><div class="line">                    subscriber.onNext(<span class="number">3</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    log.error(e);</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">            <span class="keyword">new</span> Thread(r).start();</div><div class="line">            Subscription s = Subscriptions.create(</div><div class="line">                    () -&gt; log.info(<span class="string">"disconnecting..."</span>)</div><div class="line">            );</div><div class="line">            subscriber.add(s);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        Observable&lt;Integer&gt; shared = observable.share();</div><div class="line"></div><div class="line">        log.info(<span class="string">"before subscription"</span>);</div><div class="line"></div><div class="line">        Subscription sub1 = shared.subscribe(s -&gt; log.info(<span class="string">"sub1: "</span> + s));</div><div class="line">        log.info(<span class="string">"sub1 subscribed"</span>);</div><div class="line"></div><div class="line">        pause(<span class="number">500</span>);</div><div class="line"></div><div class="line">        Subscription sub2 = shared.subscribe(s -&gt; log.info(<span class="string">"sub2: "</span> + s));</div><div class="line">        log.info(<span class="string">"sub2 subscribed"</span>);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[main] - before subscription</div><div class="line">[main] - connecting...</div><div class="line">[main] - sub1 subscribed</div><div class="line">[Thread-0] - sub1: 1</div><div class="line">[main] - sub2 subscribed</div><div class="line">[Thread-0] - sub1: 2</div><div class="line">[Thread-0] - sub2: 2</div><div class="line">[Thread-0] - sub1: 3</div><div class="line">[Thread-0] - sub2: 3</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;justify&quot;&gt;&lt;br&gt;Now that we are familiar with reactive programming concepts and that Observable resides at the core of it, let’s find out about the ways we can create and use simple observables.&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Reactive" scheme="http://truelogician.com/categories/Reactive/"/>
    
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
      <category term="Reactive Programming" scheme="http://truelogician.com/tags/Reactive-Programming/"/>
    
      <category term="Reactive Extensions" scheme="http://truelogician.com/tags/Reactive-Extensions/"/>
    
      <category term="RxJava" scheme="http://truelogician.com/tags/RxJava/"/>
    
      <category term="Observable" scheme="http://truelogician.com/tags/Observable/"/>
    
      <category term="Subscription" scheme="http://truelogician.com/tags/Subscription/"/>
    
      <category term="Subscriber" scheme="http://truelogician.com/tags/Subscriber/"/>
    
  </entry>
  
  <entry>
    <title>Reactive Extensions Basics</title>
    <link href="http://truelogician.com/2015/rxbasics/"/>
    <id>http://truelogician.com/2015/rxbasics/</id>
    <published>2015-02-09T17:15:36.000Z</published>
    <updated>2016-12-24T08:58:19.000Z</updated>
    
    <content type="html"><![CDATA[<div align="justify"><br>The Reactive Extensions (Rx in short) are the libraries provided for a set of programming languages with the aim of simplifying development of asynchronous, event-based applications using streams (observable) and LINQ-style query operators.<br></div>

<a id="more"></a>
<p><a href="http://www.reactivemanifesto.org/" target="_blank" rel="external">Reactive manifesto</a> is a document describing reactive systems and the standards of quality software applications or components and is based on four primary concepts of responsiveness, resilience, elasticity and message driven. The reactive extensions libraries enable developers to easily create reactive programs that cater for those principles in essence.</p>
<p>The following and the rest of the series tries to have a brief overview of the main features of reactive extensions in RxJava.</p>
<h3 id="Observables"><a href="#Observables" class="headerlink" title="Observables"></a>Observables</h3><p>Observables are the building blocks of reactive systems. An Observable is an event stream; a sequence of events or data transmitted by a producer (Observable) to a consumer (Observer). It can be used in replace of a List, Iterable, or Stream. Think of an Observable as a pipeline of data flowing from one end to another.</p>
<p>Additionally, the concepts of upstream, downstream, hot and cold observables are repeatedly used and worth mentioning beforehand.</p>
<p>An upstream is the source stream from which we are receiving data while a downstream is the destination stream to which we are sending data.</p>
<p>Cold observables are those that never begin to emit events unless at least one interested party is subscribed to them. This means that each subscriber of a cold Observable receives a full copy of the same stream top to bottom. Hot Observables are those that push the events downstream regardless of any subscription. As a result of this, events may get lost and subscribers might receive the events from various parts of the observable stream.</p>
<h3 id="Core-Interfaces"><a href="#Core-Interfaces" class="headerlink" title="Core Interfaces"></a>Core Interfaces</h3><p>At the core of RxJava, there is the Observable type which represents a stream of data or events to be received by an Observer over time.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Observable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">  <span class="function">Subscription <span class="title">subscribe</span><span class="params">(Observer o)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>An Observer can connect to Observable through Subscription and can receive three kinds of events.</p>
<ul>
<li>Data or events: are pushed via the onNext() method.</li>
<li>Exceptions: are pushed via the onError() method.</li>
<li>Stream Completion is notified via the onCompleted() method.</li>
</ul>
<p>After the first exception occurrence or the stream completion, the underlying Observable stream is finished immediately and cannot be reused any more and no further events can be sent over that stream. Accordingly, these events (exception and completion) are called terminal events.<br>In case of infinite streams, the terminal events might never occur if the stream is infinite and does not fail.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Observer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T t)</span></span>;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span></span>;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The Subscriber wraps the Observer to provide the ability of unsubscribe from the Observable stream.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subscriber</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Observer</span>&lt;<span class="title">T</span>&gt;, <span class="title">Subscription</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T t)</span></span>;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span></span>;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span></span>;</div><div class="line">  ...</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">unsubscribe</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setProducer</span><span class="params">(Producer p)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Comparison-of-Non-Reactive-amp-Reactive-Systems"><a href="#Comparison-of-Non-Reactive-amp-Reactive-Systems" class="headerlink" title="Comparison of Non-Reactive &amp; Reactive Systems"></a>Comparison of Non-Reactive &amp; Reactive Systems</h3><h4 id="Pull-vs-Push"><a href="#Pull-vs-Push" class="headerlink" title="Pull vs. Push"></a>Pull vs. Push</h4><p>In traditional approaches, items are pulled gradually from the source to be processed. However, the main intent of Observable is to push the data or events (Observable can be used with pulling too). In fact, this shift from pull-base to push-base processing could be considered the whole point of RxJava.</p>
<h4 id="Sync-vs-Async"><a href="#Sync-vs-Async" class="headerlink" title="Sync vs. Async"></a>Sync vs. Async</h4><p>Non reactive systems tend to consume source data synchronously while blocking the requesting thread. Reactive components, however, use the fire and forget approach as a result being push-based. Note that an Observable can be used asynchronously or synchronously. They are synchronous by default as they block the subscribing thread and emit events via onNext().</p>
<p>Using callbacks which is a common pattern to achieve asynchronicity has its own few drawbacks including the hassle of coordinating them, their tendency to be nested to create a Christmas tree code as well as sever refactoring a callback-based API into RxJava.</p>
<p>Despite being asynchronous, an Observable stream is always serialized and thread-safe meaning that onNext(), onCompleted() or onError() cannot concurrently execute (e.g. onNext() will not be invoked from different threads).</p>
<h4 id="Eager-vs-Lazy"><a href="#Eager-vs-Lazy" class="headerlink" title="Eager vs. Lazy"></a>Eager vs. Lazy</h4><p>Traditional systems are mainly eager. This means that evaluations will occur regardless of an subscriber’s presence.<br>In contrast, laziness implies postponing the evaluations and computations until they are certainly asked by a subscriber/client.<br>This is a very useful feature while performing calculation and stream composition.</p>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;justify&quot;&gt;&lt;br&gt;The Reactive Extensions (Rx in short) are the libraries provided for a set of programming languages with the aim of simplifying development of asynchronous, event-based applications using streams (observable) and LINQ-style query operators.&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Reactive" scheme="http://truelogician.com/categories/Reactive/"/>
    
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
      <category term="Reactive Programming" scheme="http://truelogician.com/tags/Reactive-Programming/"/>
    
      <category term="Reactive Extensions" scheme="http://truelogician.com/tags/Reactive-Extensions/"/>
    
      <category term="RxJava" scheme="http://truelogician.com/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Introduction to Akka</title>
    <link href="http://truelogician.com/2014/introduction-to-akka/"/>
    <id>http://truelogician.com/2014/introduction-to-akka/</id>
    <published>2014-06-12T19:21:34.000Z</published>
    <updated>2016-08-31T11:07:35.000Z</updated>
    
    <content type="html"><![CDATA[<div align="justify"><br>The following intends to provide a brief introduction to Akka which is framework based on the actor model and designed to increase the abstraction, scalability and fault-tolerance of systems. It provides a platform enabling developers to easily create concurrent and loosely coupled applications with the ability of self-healing in the face of failures.<br></div>

<a id="more"></a>
<h3 id="Typical-Problems-of-Complex-Systems"><a href="#Typical-Problems-of-Complex-Systems" class="headerlink" title="Typical Problems of Complex Systems"></a>Typical Problems of Complex Systems</h3><p>Below is mentioned a few of the more important problems and issues that need to be addressed when dealing with more complex systems:</p>
<ul>
<li>Threads tend to need a lot of coordination logic, locks and synchronizations.</li>
<li>The amount of threads to be used within an application is limited.</li>
<li>It is usually hard to scale up, scale out, deploy and run the complex applications.</li>
<li>Creating fault tolerant applications that can recover form errors is tedious.</li>
<li>It is cumbersome to modify applications and systems with load balancing.</li>
</ul>
<h3 id="How-Akka-Addresses-the-Issues"><a href="#How-Akka-Addresses-the-Issues" class="headerlink" title="How Akka Addresses the Issues?"></a>How Akka Addresses the Issues?</h3><p>Alright, now that we know some of the top issues, let’s also mention a few key notes about what Akka has to offer in general and what it brings to the table to address them. </p>
<ul>
<li>Akka pushes the burden of low-level thread management and thread-safe code to the actor model.</li>
<li>The use of actor model also makes Akka to be aligned with reactive manifesto which improves applications in the following terms:<ul>
<li><strong>Message-Driven:</strong><br>Asynchronous message passing decreases coupling and provides location transparency for system components.</li>
<li><strong>Resilience:</strong><br>Akka enforces single responsibility through component isolation (<em>actors</em>).</li>
<li><strong>Elasticity:</strong><br>As systems scale, they will still be able to handle various workloads. In addition, actors can be increased in amount where they are exactly needed and they also can divide the workload among themselves.</li>
<li><strong>Responsiveness:</strong><br>Loose coupling, Resilience and Elasticity will make the system responsive.</li>
</ul>
</li>
<li>The increases in abstraction and loose coupling will also result into:<ul>
<li>Reduction in use of shared states among components.</li>
<li>Increase in CPU utilization.</li>
<li>Increase in capability to scale up and out.</li>
<li>Increasing system fault-tolerance.</li>
</ul>
</li>
</ul>
<h3 id="So-What-is-an-Actor"><a href="#So-What-is-an-Actor" class="headerlink" title="So, What is an Actor?"></a>So, What is an Actor?</h3><p><strong>Definition:</strong> <em>an actor is a fundamental primitive unit of computation or work which basically means that they are designed to perform small, simple and well-defined tasks.</em></p>
<p>In order to better imagine and understand what an actor is, let’s start getting to know about their behavior and attributes.</p>
<ul>
<li>Each actor has a unique address and hence location transparent.</li>
<li>Each actor has a mailbox (queue of messages), state and behavior.</li>
<li>Actors are very lightweight (2.7 Million per 1GB of RAM).</li>
<li>They are formed in hierarchies/trees (parent child relationship).</li>
<li>They can live and communicate on different machines.</li>
<li>They can create child actors.</li>
<li>They can heal their children.</li>
<li>They can supervise their children.</li>
<li>They can change their behavior.</li>
<li>They only communicate with one or more actors via message passing.</li>
<li>They can only handle one message at a time.</li>
<li>They can decide what to do with the message.</li>
<li>Their states are only known by querying them (sending messages).</li>
</ul>
<p><strong>Note:</strong> <em>The fact that actors come in hierarchies and that they can heal their children can really help developers push the risky and error-prone logic to child actors (or leaves); Therefore, as soon as a child dies, its parent is notified and supervises it accordingly.</em></p>
<h3 id="What-is-an-Actor-System-node"><a href="#What-is-an-Actor-System-node" class="headerlink" title="What is an Actor-System (node)?"></a>What is an Actor-System (node)?</h3><p>A node or an actor-system groups several actors and thus, an instance of it can contain one or more actors. According to this definition, we can now have local or remote actors. </p>
<p>Let’s say actor “a” lives on actor-system “X”; in this case:</p>
<p><strong>Local Actor:</strong> An actor “b” is local to actor “a”, if “b” lives on the same actor-system as “a” (meaning actor-system “X”). </p>
<p><strong>Remote Actor:</strong> An actor “b” is remote to actor “a”, if “b” lives on a different actor-system (let’s say actor-system “Y”). Also note that actor-system “Y” might be located on the same or a separate machine.</p>
<p>Using addresses, an actor in one actor-system can send messages to local actor or remote actors. </p>
<p>The address of an actor follows the format below and consists of these parts.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[protocol]://[actor-system]@[hostname]:[port]</div></pre></td></tr></table></figure>
<h3 id="Details-of-Actors-Actions"><a href="#Details-of-Actors-Actions" class="headerlink" title="Details of Actors Actions"></a>Details of Actors Actions</h3><ul>
<li><strong>Creating Actor:</strong><ul>
<li>With a name and certain properties (called props), actors can create other child actors.</li>
</ul>
</li>
<li><strong>Sending Messages:</strong><ul>
<li>An actor can send message to a local or remote actor.</li>
<li>Passing messages among actors are async and non-blocking (Fire &amp; Forget).</li>
<li>Actors are totally inactive/passive until they receive a message.</li>
<li>Actors can handle throughput of 50 million messages per second per machine.</li>
<li>The order of messages are maintained the same for sender and receiver.</li>
</ul>
</li>
<li><strong>Changing Behavior:</strong><ul>
<li>An actor can change its behavior at runtime.</li>
<li>This change in behavior is triggered after receiving a message.</li>
</ul>
</li>
<li><strong>Supervising Children:</strong><ul>
<li>Actors can supervise their child actors.</li>
<li>Child actors send failure signal and the parent instruct them what to do.<ul>
<li>The child does not need to know how to handle the error.</li>
</ul>
</li>
<li>Actors can supervise their children even over separate physical nodes.</li>
<li>There are several error supervising strategies they can pick from.<ul>
<li>these strategies basically indicate what to do if a child fails in general or of a certain event.</li>
<li>The strategy options are: resume / restart / escalate</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>Note:</strong> <em>In Akka, the message transport and the message delivery are completely separated processes. Akka uses concurrent-linked-queue as the mailbox, however one can define what message queue to use either per actor or per actor-system (node). Its also possible to use broker and let broker handle messaging.</em></p>
<h3 id="Properties-of-an-Akka-Message"><a href="#Properties-of-an-Akka-Message" class="headerlink" title="Properties of an Akka Message"></a>Properties of an Akka Message</h3><p>An Akka message is a simple <em>immutable</em> data container defined by user and is created and passed asynchronously among actors. Akka messages also aligned with the definition of a message in reactive manifesto.</p>
<blockquote>
<p>A message is an item of data that is sent to a specific destination. In a message driven system, addressable recipients await the arrival of messages and react to them, otherwise lying dormant (<a href="http://www.reactivemanifesto.org/glossary\#Message-Driven" target="_blank" rel="external">Reactive Manifesto</a>).</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;justify&quot;&gt;&lt;br&gt;The following intends to provide a brief introduction to Akka which is framework based on the actor model and designed to increase the abstraction, scalability and fault-tolerance of systems. It provides a platform enabling developers to easily create concurrent and loosely coupled applications with the ability of self-healing in the face of failures.&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Software Architecture" scheme="http://truelogician.com/categories/Software-Architecture/"/>
    
      <category term="Akka" scheme="http://truelogician.com/categories/Software-Architecture/Akka/"/>
    
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
      <category term="Akka" scheme="http://truelogician.com/tags/Akka/"/>
    
      <category term="Distributed-Systems" scheme="http://truelogician.com/tags/Distributed-Systems/"/>
    
      <category term="Actor Model" scheme="http://truelogician.com/tags/Actor-Model/"/>
    
  </entry>
  
  <entry>
    <title>Git on USB Stick</title>
    <link href="http://truelogician.com/2014/gitstick/"/>
    <id>http://truelogician.com/2014/gitstick/</id>
    <published>2014-04-23T12:05:38.000Z</published>
    <updated>2016-10-28T17:31:57.000Z</updated>
    
    <content type="html"><![CDATA[<div align="justify"><br>Sometimes within your development team, you might want to create a new or port an existing local Git repository to a USB drive/stick and share it. In such cases, what you need is to create a bare repository so that all developers can collaborate and push their changes to it.<br></div>

<a id="more"></a>
<p>Due to the distributed nature of the Git version control system, contents cannot be directly edited in the bare repository. The following more or less demonstrates the structure of a bare sharing repository (called sharing repository).</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">drwx------ 7 4,0K Apr 23 14:11 ./</div><div class="line">drwx------ 3 4,0K Apr 23 14:11 ../</div><div class="line">drwx------ 2 4,0K Apr 23 14:11 branches/</div><div class="line">drwx------ 2 4,0K Apr 23 14:11 hooks/</div><div class="line">drwx------ 2 4,0K Apr 23 14:11 info/</div><div class="line">drwx------ 4 4,0K Apr 23 14:11 objects/</div><div class="line">drwx------ 4 4,0K Apr 23 14:11 refs/</div><div class="line">-rw-r--r-- 1  104 Apr 23 14:11 config</div><div class="line">-rw-r--r-- 1   73 Apr 23 14:11 description</div><div class="line">-rw-r--r-- 1   23 Apr 23 14:11 HEAD</div></pre></td></tr></table></figure>
<p>Instead, users need to clone the bare sharing repository to create a local one (called working repository) with the following familiar structure.  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">drwxrwxr-x  3 4,0K Apr 23 14:11 ./</div><div class="line">drwxrwxr-x 11 4,0K Apr 23 14:11 ../</div><div class="line">drwxrwxr-x  7 4,0K Apr 23 14:11 .git/</div></pre></td></tr></table></figure>
<p>Having their own copies of the repository, users can now modify contents locally and push changes back to the sharing repository to make changes available to others.</p>
<h3 id="Creating-a-New-Bare-Sharing-Repository"><a href="#Creating-a-New-Bare-Sharing-Repository" class="headerlink" title="Creating a New Bare Sharing Repository"></a>Creating a New Bare Sharing Repository</h3><p>Creating a new bare repository on your USB drive is as easy as follows:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /path/to/usb/stick</div><div class="line">mkdir &lt;repo-name&gt;.git</div><div class="line"><span class="built_in">cd</span> &lt;repo-name&gt;.git</div><div class="line">git init --bare</div></pre></td></tr></table></figure>
<h3 id="Porting-an-Existing-Working-Repository"><a href="#Porting-an-Existing-Working-Repository" class="headerlink" title="Porting an Existing Working Repository"></a>Porting an Existing Working Repository</h3><p>In case you want to create a bare sharing repository based on an existing working one, take the following steps:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /path/to/usb/stick</div><div class="line">mkdir &lt;repo-name&gt;.git</div><div class="line"><span class="built_in">cd</span> /path/to/<span class="built_in">local</span>/working/repository</div><div class="line"><span class="comment"># create the bare repository by cloning the current one</span></div><div class="line">git <span class="built_in">clone</span> --bare --no-hardlinks . /path/to/usb/stick/&lt;repo-name&gt;.git</div><div class="line"><span class="comment"># enable pushing to an alias instead of typing the whole URL</span></div><div class="line">git remote add usbstick file:///path/to/usb/stick/&lt;repo-name&gt;.git</div></pre></td></tr></table></figure>
<p>Notice that according to <a href="https://git-scm.com/docs/git-clone" target="_blank" rel="external">Git documentations</a> “–no-hardlinks” forces the cloning process from a repository on a local filesystem to copy the files under the .git/objects directory instead of using hardlinks.</p>
<h3 id="Testing-Your-Bare-Repository"><a href="#Testing-Your-Bare-Repository" class="headerlink" title="Testing Your Bare Repository"></a>Testing Your Bare Repository</h3><p>At this point developers can create their working repository by cloning the bare repository on the USB drive.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> /path/to/usb/stick/&lt;repo-name&gt;.git /path/to/destination</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;justify&quot;&gt;&lt;br&gt;Sometimes within your development team, you might want to create a new or port an existing local Git repository to a USB drive/stick and share it. In such cases, what you need is to create a bare repository so that all developers can collaborate and push their changes to it.&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Dev. Tools" scheme="http://truelogician.com/categories/Dev-Tools/"/>
    
      <category term="Git" scheme="http://truelogician.com/categories/Dev-Tools/Git/"/>
    
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
      <category term="Git" scheme="http://truelogician.com/tags/Git/"/>
    
      <category term="Version Control" scheme="http://truelogician.com/tags/Version-Control/"/>
    
      <category term="Dev. Tools" scheme="http://truelogician.com/tags/Dev-Tools/"/>
    
  </entry>
  
  <entry>
    <title>Visitor Pattern</title>
    <link href="http://truelogician.com/2013/visitor/"/>
    <id>http://truelogician.com/2013/visitor/</id>
    <published>2013-11-21T21:01:56.000Z</published>
    <updated>2016-09-18T14:46:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><strong>Define an Operation for One Family of Classes, Push Its Various Implementations to Another Family of Classes.</strong> <em>The Former Is Called ‘Visitable’ or ‘Element’ and the Latter Is Known as ‘Visitor’.</em></p>
<a id="more"></a>
<h3 id="Recipe"><a href="#Recipe" class="headerlink" title="Recipe"></a>Recipe</h3><ul>
<li>The ‘Visitable’ is a simple class; perhaps with properties and/or behaviors. Yet it needs to provide a new functionality with logic which differs based on certain factors. Therefore, let’s push that logic for different implementations to different handlers. This is basically done by receiving the handler as part of the method signature.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IVisitable</span> </span>&#123;</div><div class="line">    <span class="comment">// contains some properties</span></div><div class="line"></div><div class="line">    <span class="comment">// the new functionality</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(IVisitor visitor)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>As mentioned above, the reason for receiving the handler/visitor of the operation is to separate the logic from ‘Visitable’ and eventually use it as part of fulfilling the functionality ( <small><strong>visitor.visit(this)</strong></small> ).</p>
<p>In other words, each handler might handle a visitable, interpret its properties or use its behaviors in a certain way <small>(extracting implementations)</small>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">VisitableA</span> <span class="keyword">implements</span> <span class="title">IVisitable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(IVisitor visitor)</span> </span>&#123; visitor.visit(<span class="keyword">this</span>); &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">VisitableB</span> <span class="keyword">implements</span> <span class="title">IVisitable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(IVisitor visitor)</span> </span>&#123; visitor.visit(<span class="keyword">this</span>); &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">VisitableC</span> <span class="keyword">implements</span> <span class="title">IVisitable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(IVisitor visitor)</span> </span>&#123; visitor.visit(<span class="keyword">this</span>); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>The ‘Visitor’ which contains the operation-logic on each and every ‘Visitable’.</li>
<li>Notice that although the visitor/visitable return types are ‘void’, they are in fact arbitrary.<ul>
<li>They however must be known prior to implementation or we will face many changes.</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IVisitor</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(VisitableA visitableA)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(VisitableB visitableB)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(VisitableC visitableC)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">VisitorX</span> <span class="keyword">implements</span> <span class="title">IVisitor</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(VisitableA visitable)</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(VisitableB visitable)</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(VisitableC visitable)</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">VisitorY</span> <span class="keyword">implements</span> <span class="title">IVisitor</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(VisitableA visitable)</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(VisitableB visitable)</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(VisitableC visitable)</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Serve"><a href="#Serve" class="headerlink" title="Serve"></a>Serve</h3><p>Having the ‘Visitable’ and the ‘Visitor’ ready, in order to run the operation, it’s now enough to pass the desired visitor to the visitable.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        IVisitor visitorX = <span class="keyword">new</span> VisitorX();</div><div class="line">        IVisitor visitorY = <span class="keyword">new</span> VisitorY();</div><div class="line"></div><div class="line">        IVisitable visitableC = <span class="keyword">new</span> VisitableC();</div><div class="line"></div><div class="line">        visitableC.accept(visitorX);</div><div class="line">        visitableC.accept(visitorY);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Important-Benefits"><a href="#Important-Benefits" class="headerlink" title="Important Benefits"></a>Important Benefits</h3><ul>
<li>Visitor pattern allows defining a new operation in ‘Visitable’ family with minimal changes in them.</li>
<li>It pushes the operation’s logic to visitors and separates it from the visitable objects on which they operate.</li>
</ul>
<p><strong>Note:</strong> Every time a new visitor is added, all existing visitors must provide support for it. In case there exist a lot of visitors/visitable classes, it might seem inconvenient over time as the system expands.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>A graphics software contains a set of definitions for geometrical shapes such as circle, rectangle, triangle and etc; each of which holds its own behaviors/specs. Imagine that you’re requested to provide various measurement information about them. measurements such as calculating surface, perimeter, finding shape’s center or etc.</p>
<p>One way is to define measurements in the ‘IShape’ and implement them in the concrete classes.<br>There is another way though, which is to extract these measurements logic to another family of classes.<br>Let’s proceed with the latter approach and add the measuring functionality to all shapes.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IShape</span> </span>&#123;</div><div class="line">    <span class="comment">// a shape's common behaviors &amp; specs</span></div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">measure</span><span class="params">(IMeasurer visitor)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">IShape</span> </span>&#123;</div><div class="line">    <span class="comment">// circle specs like center &amp; radius</span></div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">measure</span><span class="params">(IMeasurer m)</span> </span>&#123; <span class="keyword">return</span> m.measure(<span class="keyword">this</span>); &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">IShape</span> </span>&#123;</div><div class="line">    <span class="comment">// rect specs like corner, width &amp; height</span></div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">measure</span><span class="params">(IMeasurer m)</span> </span>&#123; <span class="keyword">return</span> m.measure(<span class="keyword">this</span>); &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">implements</span> <span class="title">IShape</span> </span>&#123;</div><div class="line">    <span class="comment">// triangle specs like sides &amp; angles</span></div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">measure</span><span class="params">(IMeasurer m)</span> </span>&#123; <span class="keyword">return</span> m.measure(<span class="keyword">this</span>); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Let’s go ahead and define and implement logic for different types of measurements. Here, our calculation includes finding surface and perimeter amount.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMeasurer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">measure</span><span class="params">(Circle circle)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">measure</span><span class="params">(Rectangle rectangle)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">measure</span><span class="params">(Triangle triangle)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Surface</span> <span class="keyword">implements</span> <span class="title">IMeasurer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">measure</span><span class="params">(Circle circle)</span> </span>&#123;<span class="comment">/*return circle surface*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">measure</span><span class="params">(Rectangle rectangle)</span> </span>&#123;<span class="comment">/*return rect surface*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">measure</span><span class="params">(Triangle triangle)</span> </span>&#123;<span class="comment">/*return triangle surface*/</span>&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Perimeter</span> <span class="keyword">implements</span> <span class="title">IMeasurer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">measure</span><span class="params">(Circle circle)</span> </span>&#123;<span class="comment">/*return circle perimeter*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">measure</span><span class="params">(Rectangle rectangle)</span> </span>&#123;<span class="comment">/*return rect perimeter*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">measure</span><span class="params">(Triangle triangle)</span> </span>&#123;<span class="comment">/*return triangle perimeter*/</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Now, it’s possible to pass a measurer to a shape and ask for its calculation.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        IMeasurer surface = <span class="keyword">new</span> Surface();</div><div class="line">        IMeasurer perimeter = <span class="keyword">new</span> Perimeter();</div><div class="line"></div><div class="line">        IShape triangle = <span class="keyword">new</span> Triangle();</div><div class="line">        IShape circle = <span class="keyword">new</span> Circle();</div><div class="line"></div><div class="line">        <span class="keyword">double</span> triangleSurface = triangle.measure(surface);</div><div class="line">        <span class="keyword">double</span> circlePerimeter = circle.measure(perimeter);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2010/design-patterns&quot;&gt;Design Patterns Overview&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Define an Operation for One Family of Classes, Push Its Various Implementations to Another Family of Classes.&lt;/strong&gt; &lt;em&gt;The Former Is Called ‘Visitable’ or ‘Element’ and the Latter Is Known as ‘Visitor’.&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Software Architecture" scheme="http://truelogician.com/categories/Software-Architecture/"/>
    
      <category term="Design Patterns" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/"/>
    
      <category term="Types" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"/>
    
      <category term="Behavioral" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Behavioral/"/>
    
    
      <category term="Design-Patterns" scheme="http://truelogician.com/tags/Design-Patterns/"/>
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
  </entry>
  
  <entry>
    <title>Memento Pattern</title>
    <link href="http://truelogician.com/2013/memento/"/>
    <id>http://truelogician.com/2013/memento/</id>
    <published>2013-09-28T19:48:03.000Z</published>
    <updated>2016-09-18T14:49:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><strong>Create a Restore Point to Revert Object State.</strong> <em>Store an object’s state at some point in time in order to restore it later.</em></p>
<a id="more"></a>
<h3 id="Recipe"><a href="#Recipe" class="headerlink" title="Recipe"></a>Recipe</h3><ul>
<li><strong>The ‘Memento’:</strong> Memento is an immutable object that holds a state. Think of it as a <small><strong><em>‘Snapshot’</em></strong></small> of the system state at a certain moment.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memento</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Object state;</div><div class="line">    Memento(Object state) &#123; <span class="keyword">this</span>.state = state; &#125;</div><div class="line">    <span class="function">Object <span class="title">getState</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> state; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>The ‘Originator’:</strong> Originator also contains the state, but this is the current mutable state of the system.<ul>
<li><small>void setState(Object state)</small>: Overrides the system’s current state.</li>
<li><small>Memento create()</small>: Provides a snapshot of the system’s current state.</li>
<li><small>Object restore(Memento memento)</small>: Returns the state of a certain snapshot.</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Originator</span> </span>&#123;</div><div class="line">    Object state;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setState</span><span class="params">(Object state)</span> </span>&#123; <span class="keyword">this</span>.state = state; &#125;</div><div class="line">    <span class="function">Memento <span class="title">create</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> Memento(state); &#125;</div><div class="line">    <span class="function">Object <span class="title">restore</span><span class="params">(Memento memento)</span> </span>&#123; <span class="keyword">return</span> memento.getState(); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>The ‘Caretaker’:</strong> Caretaker acts as the memory required for maintaining a history of system’s saved snapshots. It’s possible to fetch or add (or perhapse remove) a snapshot.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Caretaker</span> </span>&#123;</div><div class="line">    List&lt;Memento&gt; mementos = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Memento memento)</span> </span>&#123; mementos.add(memento); &#125;</div><div class="line">    <span class="function">Memento <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123; <span class="keyword">return</span> mementos.get(index); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Serve"><a href="#Serve" class="headerlink" title="Serve"></a>Serve</h3><p>Since none of the above entities goes under major chanes in production code, desinging a separate example seems almost redundant. Accordingly, the following client code is designed in a way to be both self-explanatory and stand for the pattern’s example.</p>
<p>Imagine you’re about to create a simple text editor with undo/redo features. Also suppose that system saves a snapshot of the editor contents every two words.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        Object state;</div><div class="line">        Caretaker caretaker = <span class="keyword">new</span> Caretaker();</div><div class="line">        Originator originator = <span class="keyword">new</span> Originator();</div><div class="line"></div><div class="line">        originator.setState(<span class="string">"This"</span>);</div><div class="line">        originator.setState(<span class="string">"This is"</span>);</div><div class="line">        <span class="comment">// save a snapshot of current state</span></div><div class="line">        Memento memento1 = originator.create();</div><div class="line">        caretaker.add(memento1);</div><div class="line">        System.out.println(<span class="string">"[[STATE]]"</span>);</div><div class="line">        System.out.println(memento1.getState() + <span class="string">"\n"</span>);</div><div class="line"></div><div class="line">        originator.setState(<span class="string">"This is a"</span>);</div><div class="line">        originator.setState(<span class="string">"This is a sentence."</span>);</div><div class="line">        <span class="comment">// save a snapshot of current state</span></div><div class="line">        Memento memento2 = originator.create();</div><div class="line">        caretaker.add(memento2);</div><div class="line">        System.out.println(<span class="string">"[[STATE]]"</span>);</div><div class="line">        System.out.println(memento2.getState() + <span class="string">"\n"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// undo to previous snapshot</span></div><div class="line">        state = originator.restore(caretaker.get(<span class="number">0</span>));</div><div class="line">        System.out.println(<span class="string">"[[UNDO]]"</span>);</div><div class="line">        System.out.println(state + <span class="string">"\n"</span>);</div><div class="line">        <span class="comment">// you might want to change current state</span></div><div class="line">        originator.setState(state);</div><div class="line"></div><div class="line">        <span class="comment">// redo to latest snapshot</span></div><div class="line">        state = originator.restore(caretaker.get(<span class="number">1</span>));</div><div class="line">        System.out.println(<span class="string">"[[REDO]]"</span>);</div><div class="line">        System.out.println(state);</div><div class="line">        <span class="comment">// you might want to change current state</span></div><div class="line">        originator.setState(state);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Important-Benefits"><a href="#Important-Benefits" class="headerlink" title="Important Benefits"></a>Important Benefits</h3><p>Using this pattern allows for restoring an object’s state to one of its previous ones.</p>
<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2010/design-patterns&quot;&gt;Design Patterns Overview&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Create a Restore Point to Revert Object State.&lt;/strong&gt; &lt;em&gt;Store an object’s state at some point in time in order to restore it later.&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Software Architecture" scheme="http://truelogician.com/categories/Software-Architecture/"/>
    
      <category term="Design Patterns" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/"/>
    
      <category term="Types" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"/>
    
      <category term="Behavioral" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Behavioral/"/>
    
    
      <category term="Design-Patterns" scheme="http://truelogician.com/tags/Design-Patterns/"/>
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
  </entry>
  
  <entry>
    <title>Mediator Pattern</title>
    <link href="http://truelogician.com/2013/mediator/"/>
    <id>http://truelogician.com/2013/mediator/</id>
    <published>2013-08-18T05:04:36.000Z</published>
    <updated>2016-09-18T15:18:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><strong>Provide an Interaction-Contract object Called Mediator for a Group of Colleagues/components.</strong> <em>Centralize Communications Among Colleagues/components Without Them Knowing Even About Each Other’s Existence. In Other Words, Centralize Complex Communications and Control Between Related Objects.</em></p>
<a id="more"></a>
<h3 id="Recipe"><a href="#Recipe" class="headerlink" title="Recipe"></a>Recipe</h3><ul>
<li>The ‘Mediator’ definition which is actually a “Contract of Interaction”<ul>
<li>It could keep a collection of components/colleagues to communicate their interactions.</li>
<li>Behaviors could also accept a reference to the requester to enhance the logic.</li>
<li>Behaviors could define as much arguments as required for implementation.</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> </span>&#123;</div><div class="line">    <span class="comment">/*optionally maintaining a collection of colleagues*/</span></div><div class="line">    Collection&lt;Colleague&gt; colleagues;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Colleague colleague)</span> </span>&#123;<span class="comment">/*  add to colleagues   */</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rem</span><span class="params">(Colleague colleague)</span> </span>&#123;<span class="comment">/*remove from colleagues*/</span>&#125;</div><div class="line"></div><div class="line">    <span class="comment">/*defining 'requester' argument is also arbitrary*/</span></div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">(Colleague requester<span class="comment">/*, args */</span>)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">(Colleague requester<span class="comment">/*, args */</span>)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operation3</span><span class="params">(Colleague requester<span class="comment">/*, args */</span>)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operation4</span><span class="params">(Colleague requester<span class="comment">/*, args */</span>)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Concrete implementations of mediator.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MediatorX</span> <span class="keyword">extends</span> <span class="title">Mediator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation1</span><span class="params">(Colleague requester<span class="comment">/*, args */</span>)</span></span></div><div class="line">    &#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation2</span><span class="params">(Colleague requester<span class="comment">/*, args */</span>)</span></span></div><div class="line">    &#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation3</span><span class="params">(Colleague requester<span class="comment">/*, args */</span>)</span></span></div><div class="line">    &#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation4</span><span class="params">(Colleague requester<span class="comment">/*, args */</span>)</span></span></div><div class="line">    &#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MediatorY</span> <span class="keyword">extends</span> <span class="title">Mediator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation1</span><span class="params">(Colleague requester<span class="comment">/*, args */</span>)</span></span></div><div class="line">    &#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation2</span><span class="params">(Colleague requester<span class="comment">/*, args */</span>)</span></span></div><div class="line">    &#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation3</span><span class="params">(Colleague requester<span class="comment">/*, args */</span>)</span></span></div><div class="line">    &#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation4</span><span class="params">(Colleague requester<span class="comment">/*, args */</span>)</span></span></div><div class="line">    &#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>The Colleague/Component concept and concrete implementations.</li>
<li>Note that a colleagues has a reference to the mediator to delegate its activities.<ul>
<li>Can also be designed in a way to set/change their mediators at runtime.</li>
</ul>
</li>
<li>Remember to pull up identical method implementations from concrete classes.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">    Mediator mediator;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setMediator</span><span class="params">(Mediator mediator)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mediator = mediator;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColleagueA</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">    <span class="comment">/*colleague delegates its actions to the mediator*/</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action1</span><span class="params">()</span> </span>&#123; mediator.operation1(<span class="keyword">this</span>); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action2</span><span class="params">()</span> </span>&#123; mediator.operation2(<span class="keyword">this</span>); &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColleagueB</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">    <span class="comment">/*colleague delegates its actions to the mediator*/</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action3</span><span class="params">()</span> </span>&#123; mediator.operation3(<span class="keyword">this</span>); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action4</span><span class="params">()</span> </span>&#123; mediator.operation4(<span class="keyword">this</span>); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Serve"><a href="#Serve" class="headerlink" title="Serve"></a>Serve</h3><p>Now that the mediator and colleagues are defined, it only suffices to:</p>
<ul>
<li>Introduce mediator to colleagues.</li>
<li>Introduce colleagues to mediator.</li>
<li>Ask colleagues for their provided behaviors.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        Mediator mediatorX = <span class="keyword">new</span> MediatorX();</div><div class="line">        ColleagueA a1 = <span class="keyword">new</span> ColleagueA();</div><div class="line">        ColleagueA a2 = <span class="keyword">new</span> ColleagueA();</div><div class="line">        ColleagueB b1 = <span class="keyword">new</span> ColleagueB();</div><div class="line">        ColleagueB b2 = <span class="keyword">new</span> ColleagueB();</div><div class="line"></div><div class="line">        <span class="comment">/*introduce mediator to colleagues*/</span></div><div class="line">        a1.setMediator(mediatorX);</div><div class="line">        a1.setMediator(mediatorX);</div><div class="line">        b1.setMediator(mediatorX);</div><div class="line">        b2.setMediator(mediatorX);</div><div class="line">        <span class="comment">/*introduce colleagues to mediator*/</span></div><div class="line">        mediatorX.add(a1);</div><div class="line">        mediatorX.add(a2);</div><div class="line">        mediatorX.add(b1);</div><div class="line">        mediatorX.add(b2);</div><div class="line"></div><div class="line">        a1.action2();</div><div class="line">        a2.action1();</div><div class="line">        b1.action4();</div><div class="line">        b2.action3();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Important-Benefits"><a href="#Important-Benefits" class="headerlink" title="Important Benefits"></a>Important Benefits</h3><ul>
<li>Mediator promotes loose coupling by:<ul>
<li>Keeping objects from referring to each other explicitly</li>
<li>Encapsulating the interaction and communication.</li>
</ul>
</li>
<li>It allows modifications to colleagues interaction independently.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Based on the logic, the mediator can contain a collection of colleagues used as part of the logic (<a href="http://www.journaldev.com/1730/mediator-design-pattern-java" target="_blank" rel="external">example</a>), however in the following example, for the sake of clarity and stressing more on the role of mediators and colleagues, we will skip maintaining such list.</p>
<p>Suppose you’re about to write a module to provide joystick functionalities for a few games; in a way that a set of different controller devices can be connected to a various games, enabling players to play them.</p>
<p>Accordingly, let’s first define the game base functionalities and their implementations in each specific game.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMediator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fire</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">forward</span><span class="params">(<span class="keyword">double</span> intensity)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">backward</span><span class="params">(<span class="keyword">double</span> intensity)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">(<span class="keyword">double</span> intensity)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">right</span><span class="params">(<span class="keyword">double</span> intensity)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quit</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NeedForSpeed</span> <span class="keyword">implements</span> <span class="title">IMediator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fire</span><span class="params">()</span> </span>&#123;<span class="comment">/*activate nitro mode*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">forward</span><span class="params">(<span class="keyword">double</span> intensity)</span> </span>&#123;<span class="comment">/*speed up*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">backward</span><span class="params">(<span class="keyword">double</span> intensity)</span> </span>&#123;<span class="comment">/*slow down*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">(<span class="keyword">double</span> intensity)</span>  </span>&#123;<span class="comment">/*turn wheel left*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">right</span><span class="params">(<span class="keyword">double</span> intensity)</span> </span>&#123;<span class="comment">/*turn wheel right*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quit</span><span class="params">()</span> </span>&#123;<span class="comment">/*quit game*/</span>&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CallOfDuty</span> <span class="keyword">implements</span> <span class="title">IMediator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fire</span><span class="params">()</span> </span>&#123;<span class="comment">/*fire current weapon*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">forward</span><span class="params">(<span class="keyword">double</span> intensity)</span> </span>&#123;<span class="comment">/*move forward*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">backward</span><span class="params">(<span class="keyword">double</span> intensity)</span> </span>&#123;<span class="comment">/*move backward*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">(<span class="keyword">double</span> intensity)</span>  </span>&#123;<span class="comment">/*move left*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">right</span><span class="params">(<span class="keyword">double</span> intensity)</span> </span>&#123;<span class="comment">/*move right*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quit</span><span class="params">()</span> </span>&#123;<span class="comment">/*quit game*/</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The colleagues are the controller devices to be connected to games later on.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">    IMediator mediator;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setMediator</span><span class="params">(IMediator mediator)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mediator = mediator;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RightTrigger</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">press</span><span class="params">()</span> </span>&#123; mediator.fire(); &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LeftBumper</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">press</span><span class="params">()</span> </span>&#123; mediator.quit(); &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DPad</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">double</span> intensity)</span> </span>&#123; mediator.forward(intensity); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">double</span> intensity)</span> </span>&#123; mediator.backward(intensity); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">right</span><span class="params">(<span class="keyword">double</span> intensity)</span> </span>&#123; mediator.left(intensity); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">(<span class="keyword">double</span> intensity)</span> </span>&#123; mediator.right(intensity); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Now that games and controllers are ready:</p>
<ul>
<li>Instantiate controllers and a game.</li>
<li>Assign controllers to a specific game.</li>
<li>Use controllers to play.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        DPad dPad = <span class="keyword">new</span> DPad();</div><div class="line">        RightTrigger fire = <span class="keyword">new</span> RightTrigger();</div><div class="line">        LeftBumper quit = <span class="keyword">new</span> LeftBumper();</div><div class="line"></div><div class="line">        IMediator callOfDuty = <span class="keyword">new</span> CallOfDuty();</div><div class="line"></div><div class="line">        dPad.setMediator(callOfDuty);</div><div class="line">        fire.setMediator(callOfDuty);</div><div class="line">        quit.setMediator(callOfDuty);</div><div class="line"></div><div class="line">        dPad.up(<span class="number">2.2</span>);</div><div class="line">        dPad.up(<span class="number">2.2</span>);</div><div class="line">        dPad.up(<span class="number">8.9</span>);</div><div class="line">        fire.press();</div><div class="line">        fire.press();</div><div class="line">        dPad.left(<span class="number">3</span>);</div><div class="line">        quit.press();</div><div class="line"></div><div class="line">        <span class="comment">/*let's change the game*/</span></div><div class="line">        IMediator needForSpeed = <span class="keyword">new</span> NeedForSpeed();</div><div class="line"></div><div class="line">        dPad.setMediator(needForSpeed);</div><div class="line">        fire.setMediator(needForSpeed);</div><div class="line">        quit.setMediator(needForSpeed);</div><div class="line"></div><div class="line">        dPad.up(<span class="number">9.3</span>);</div><div class="line">        dPad.up(<span class="number">9.6</span>);</div><div class="line">        dPad.up(<span class="number">9.9</span>);</div><div class="line">        fire.press();</div><div class="line">        dPad.left(<span class="number">4</span>);</div><div class="line">        dPad.right(<span class="number">1</span>);</div><div class="line">        quit.press();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2010/design-patterns&quot;&gt;Design Patterns Overview&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Provide an Interaction-Contract object Called Mediator for a Group of Colleagues/components.&lt;/strong&gt; &lt;em&gt;Centralize Communications Among Colleagues/components Without Them Knowing Even About Each Other’s Existence. In Other Words, Centralize Complex Communications and Control Between Related Objects.&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Software Architecture" scheme="http://truelogician.com/categories/Software-Architecture/"/>
    
      <category term="Design Patterns" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/"/>
    
      <category term="Types" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"/>
    
      <category term="Behavioral" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Behavioral/"/>
    
    
      <category term="Design-Patterns" scheme="http://truelogician.com/tags/Design-Patterns/"/>
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
  </entry>
  
  <entry>
    <title>Interpreter Pattern</title>
    <link href="http://truelogician.com/2013/interpreter/"/>
    <id>http://truelogician.com/2013/interpreter/</id>
    <published>2013-07-03T17:15:28.000Z</published>
    <updated>2016-09-18T15:16:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><strong>Map, Translate or Interpret a Given Data Into Different Formats.</strong> <em>It Converts One Representation of Data to Another; Very Much Like a Language Interpreter.</em></p>
<a id="more"></a>
<p>This piece of data that is interpreted to different representations is called ‘Context’.</p>
<h3 id="Recipe"><a href="#Recipe" class="headerlink" title="Recipe"></a>Recipe</h3><ul>
<li>The definition of ‘Expression’.<ul>
<li>An expression contains methods to interpret a given ‘Context’ to other expressions.</li>
<li>Note that ‘Context’ is of type ‘Object’ but it’s type or definition is arbitrary.</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Expression</span> </span>&#123;</div><div class="line">    <span class="function">Object <span class="title">toExpA</span><span class="params">(Object context)</span></span>;</div><div class="line">    <span class="function">Object <span class="title">toExpB</span><span class="params">(Object context)</span></span>;</div><div class="line">    <span class="function">Object <span class="title">toExpC</span><span class="params">(Object context)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Concrete expressions.<br>Note that methods ‘toExpA’, ‘toExpB’ and ‘toExpC’ do not return an object of type ‘ExpA’, ‘ExpB’ or ‘ExpC’, since expressions are merely converters.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExpA</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</div><div class="line">    <span class="function">Object <span class="title">toExpA</span><span class="params">(Object context)</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function">Object <span class="title">toExpB</span><span class="params">(Object context)</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function">Object <span class="title">toExpC</span><span class="params">(Object context)</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExpB</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</div><div class="line">    <span class="function">Object <span class="title">toExpA</span><span class="params">(Object context)</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function">Object <span class="title">toExpB</span><span class="params">(Object context)</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function">Object <span class="title">toExpC</span><span class="params">(Object context)</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExpC</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</div><div class="line">    <span class="function">Object <span class="title">toExpA</span><span class="params">(Object context)</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function">Object <span class="title">toExpB</span><span class="params">(Object context)</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function">Object <span class="title">toExpC</span><span class="params">(Object context)</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Serve"><a href="#Serve" class="headerlink" title="Serve"></a>Serve</h3><p>Now that it’s possible to convert every expression to one another, the client only needs to create a context that can be interpreted by an expression and pass it along to end up with a different format.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        Object contextA = <span class="keyword">new</span> Object();</div><div class="line">        Object contextB = <span class="keyword">new</span> Object();</div><div class="line">        Object contextC = <span class="keyword">new</span> Object();</div><div class="line">        Object formatA, formatB, formatC;</div><div class="line"></div><div class="line">        formatB = <span class="keyword">new</span> ExpA().toExpB(contextA);</div><div class="line">        formatC = <span class="keyword">new</span> ExpA().toExpC(contextA);</div><div class="line"></div><div class="line">        formatA = <span class="keyword">new</span> ExpB().toExpA(contextB);</div><div class="line">        formatC = <span class="keyword">new</span> ExpB().toExpC(contextB);</div><div class="line"></div><div class="line">        formatA = <span class="keyword">new</span> ExpC().toExpA(contextC);</div><div class="line">        formatB = <span class="keyword">new</span> ExpC().toExpB(contextC);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Important-Benefits"><a href="#Important-Benefits" class="headerlink" title="Important Benefits"></a>Important Benefits</h3><p>This pattern provides a framework for interpretation of the data or complex grammar along with abstraction and loose coupling.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Suppose you are responsible for writing a module which is responsible for translating and forwarding messages sent by these services. For instance, if the module receives a XML SOAP request, it shall translate it to a simple TCP request and send it to the TCP server.<br>These services consist of:</p>
<ul>
<li>A REST service.</li>
<li>A TCP server.</li>
<li>A SOAP service.</li>
</ul>
<p>There is also a logger to log the events in Json format.</p>
<ul>
<li>The ‘Expression’ interface contains all kinds of desired conversions.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Expression</span> </span>&#123;</div><div class="line">    <span class="function">Object <span class="title">toBytes</span><span class="params">(Object context)</span></span>;</div><div class="line">    <span class="function">String <span class="title">toXml</span><span class="params">(Object context)</span></span>;</div><div class="line">    <span class="function">String <span class="title">toUri</span><span class="params">(Object context)</span></span>;</div><div class="line">    <span class="function">String <span class="title">toJson</span><span class="params">(Object context)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Each concrete expression assumes receiving a ‘Context’ of its type and implement conversion to other formats.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">XmlExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</div><div class="line">    <span class="keyword">byte</span>[] toBytes(Object context) &#123; <span class="keyword">return</span> <span class="comment">/*from xml to byte[]*/</span>; &#125;</div><div class="line">    <span class="function">String <span class="title">toXml</span><span class="params">(Object context)</span> </span>&#123; <span class="keyword">return</span> (String) context; &#125;</div><div class="line">    <span class="function">String <span class="title">toUri</span><span class="params">(Object context)</span> </span>&#123; <span class="keyword">return</span> <span class="comment">/*from xml to uri*/</span>; &#125;</div><div class="line">    <span class="function">String <span class="title">toJson</span><span class="params">(Object context)</span> </span>&#123; <span class="keyword">return</span> <span class="comment">/*from xml to json*/</span>; &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UriExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</div><div class="line">    <span class="keyword">byte</span>[] toBytes(Object context) &#123; <span class="keyword">return</span> <span class="comment">/*from uri to byte[]*/</span>; &#125;</div><div class="line">    <span class="function">String <span class="title">toXml</span><span class="params">(Object context)</span> </span>&#123; <span class="keyword">return</span> <span class="comment">/*from uri to xml*/</span>; &#125;</div><div class="line">    <span class="function">String <span class="title">toUri</span><span class="params">(Object context)</span> </span>&#123; <span class="keyword">return</span> (String) context; &#125;</div><div class="line">    <span class="function">String <span class="title">toJson</span><span class="params">(Object context)</span> </span>&#123; <span class="keyword">return</span> <span class="comment">/*from uri to json*/</span>; &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</div><div class="line">    <span class="keyword">byte</span>[] toBytes(Object context) &#123; <span class="keyword">return</span> <span class="comment">/*from json to byte[]*/</span>; &#125;</div><div class="line">    <span class="function">String <span class="title">toXml</span><span class="params">(Object context)</span> </span>&#123; <span class="keyword">return</span> <span class="comment">/*from json to xml*/</span>; &#125;</div><div class="line">    <span class="function">String <span class="title">toUri</span><span class="params">(Object context)</span> </span>&#123; <span class="keyword">return</span> <span class="comment">/*from json to uri*/</span>; &#125;</div><div class="line">    <span class="function">String <span class="title">toJson</span><span class="params">(Object context)</span> </span>&#123; <span class="keyword">return</span> (String) context; &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BytesExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</div><div class="line">    <span class="keyword">byte</span>[] toBytes(Object context) &#123; <span class="keyword">return</span> (<span class="keyword">byte</span>[]) context; &#125;</div><div class="line">    <span class="function">String <span class="title">toXml</span><span class="params">(Object context)</span> </span>&#123; <span class="keyword">return</span> <span class="comment">/*from byte[] to xml*/</span>; &#125;</div><div class="line">    <span class="function">String <span class="title">toUri</span><span class="params">(Object context)</span> </span>&#123; <span class="keyword">return</span> <span class="comment">/*from byte[] to uri*/</span>; &#125;</div><div class="line">    <span class="function">String <span class="title">toJson</span><span class="params">(Object context)</span> </span>&#123; <span class="keyword">return</span> <span class="comment">/*from byte[] to json*/</span>; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Lines 3-8 is when a byte stream needs to be logged and then translated to a REST resource URI.</li>
<li>Lines 10-13 is when a SOAP XML request is received and shall be logged and forwarded to the TCP server.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        <span class="keyword">byte</span>[] stream = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">        <span class="comment">// log json presentation of the stream content</span></div><div class="line">        Logger.log(<span class="keyword">new</span> BytesExpression().toJson(stream));</div><div class="line">        <span class="comment">// get REST resource by uri</span></div><div class="line">        String uri = <span class="keyword">new</span> BytesExpression().toUri(stream);</div><div class="line">        WebResource resource = client.resource(uri);</div><div class="line"></div><div class="line">        String xml = <span class="string">"&lt;order&gt;&lt;item name=\"Hamlet\" /&gt;&lt;/order&gt;"</span>;</div><div class="line">        Logger.log(<span class="keyword">new</span> XmlExpression().toJson(xml));</div><div class="line">        <span class="comment">// send xml data to a TCP sever as byte[]</span></div><div class="line">        tcpClient.send(<span class="keyword">new</span> XmlExpression().toBytes(xml));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2010/design-patterns&quot;&gt;Design Patterns Overview&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Map, Translate or Interpret a Given Data Into Different Formats.&lt;/strong&gt; &lt;em&gt;It Converts One Representation of Data to Another; Very Much Like a Language Interpreter.&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Software Architecture" scheme="http://truelogician.com/categories/Software-Architecture/"/>
    
      <category term="Design Patterns" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/"/>
    
      <category term="Types" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"/>
    
      <category term="Behavioral" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Behavioral/"/>
    
    
      <category term="Design-Patterns" scheme="http://truelogician.com/tags/Design-Patterns/"/>
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
  </entry>
  
  <entry>
    <title>Chain of Responsibility Pattern</title>
    <link href="http://truelogician.com/2013/chain/"/>
    <id>http://truelogician.com/2013/chain/</id>
    <published>2013-05-03T17:15:28.000Z</published>
    <updated>2017-01-09T08:44:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><strong>Pass a Product to a Chain of Processors and Each Will Do Its Job.</strong></p>
<a id="more"></a>
<h3 id="Recipe"><a href="#Recipe" class="headerlink" title="Recipe"></a>Recipe</h3><ul>
<li>Define your ‘Product’ how ever you want.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div></pre></td></tr></table></figure>
<ul>
<li>A chain is created out of links which satisfy at least 2 basic behaviors.<ul>
<li>They can process a given ‘Product’ object.</li>
<li>They know about the next link in the chain.</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ILink</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(Product product)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setNextLink</span><span class="params">(ILink link)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Now let’s define a few links for our chain; each of which might or might not process the passed product.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkA</span> <span class="keyword">implements</span> <span class="title">ILink</span> </span>&#123;</div><div class="line">    ILink nextLink;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextLink</span><span class="params">(ILink link)</span> </span>&#123; nextLink = link; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Product product)</span> </span>&#123;</div><div class="line">        <span class="comment">/* perform process 'A' on the product. or not! */</span></div><div class="line">        <span class="keyword">if</span> (nextLink != <span class="keyword">null</span>) nextLink.process(product);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkB</span> <span class="keyword">implements</span> <span class="title">ILink</span> </span>&#123;</div><div class="line">    ILink nextLink;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextLink</span><span class="params">(ILink link)</span> </span>&#123; nextLink = link; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Product product)</span> </span>&#123;</div><div class="line">        <span class="comment">/* perform process 'B' on the product. or not! */</span></div><div class="line">        <span class="keyword">if</span> (nextLink != <span class="keyword">null</span>) nextLink.process(product);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkC</span> <span class="keyword">implements</span> <span class="title">ILink</span> </span>&#123;</div><div class="line">    ILink nextLink;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextLink</span><span class="params">(ILink link)</span> </span>&#123; nextLink = link; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Product product)</span> </span>&#123;</div><div class="line">        <span class="comment">/* perform process 'C' on the product. or not! */</span></div><div class="line">        <span class="keyword">if</span> (nextLink != <span class="keyword">null</span>) nextLink.process(product);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Serve"><a href="#Serve" class="headerlink" title="Serve"></a>Serve</h3><p>Now that the product and the chain links exist, the client needs only to weave the links together to make a chain and pass a product to its first link.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        ILink linkA = <span class="keyword">new</span> LinkA();</div><div class="line">        ILink linkB = <span class="keyword">new</span> LinkB();</div><div class="line">        ILink linkC = <span class="keyword">new</span> LinkC();</div><div class="line"></div><div class="line">        <span class="comment">/* creating a chain by introducing</span></div><div class="line">         * the next link of each link.</div><div class="line">         */</div><div class="line">        linkA.setNextLink(linkB);</div><div class="line">        linkB.setNextLink(linkC);</div><div class="line"></div><div class="line">        linkA.process(<span class="keyword">new</span> Product());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Important-Benefits"><a href="#Important-Benefits" class="headerlink" title="Important Benefits"></a>Important Benefits</h3><p>This pattern decouples commands/handlers (e.g ‘Link’) and allows them to have their own independent logic.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Suppose that you’re developing a module for the local post office to send out notifications to recipients when they receive a package. This notification message shall be sent by mail, sms and email. Accordingly our Message object could be designed as follows.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</div><div class="line">    String notificationContent;</div><div class="line">    String recipientPhone;</div><div class="line">    String recipientMail;</div><div class="line">    String recipientAddress;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The chain’s ‘Link’ interface is called ‘INotification’ and each implementation contains logic to send a message in a specific way.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">INotification</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setNext</span><span class="params">(INotification n)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">(Message message)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sms</span> <span class="keyword">implements</span> <span class="title">INotification</span> </span>&#123;</div><div class="line">    INotification next;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(INotification n)</span> </span>&#123; next = n; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(Message message)</span> </span>&#123;</div><div class="line">        <span class="comment">/* send a SMS message to the given number */</span></div><div class="line">        <span class="keyword">if</span> (next != <span class="keyword">null</span>) next.send(message);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span> <span class="keyword">implements</span> <span class="title">INotification</span> </span>&#123;</div><div class="line">    INotification next;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(INotification n)</span> </span>&#123; next = n; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(Message message)</span> </span>&#123;</div><div class="line">        <span class="comment">/* send an email to the given mail address */</span></div><div class="line">        <span class="keyword">if</span> (next != <span class="keyword">null</span>) next.send(message);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span> <span class="keyword">implements</span> <span class="title">INotification</span> </span>&#123;</div><div class="line">    INotification next;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(INotification n)</span> </span>&#123; next = n; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(Message message)</span> </span>&#123;</div><div class="line">        <span class="comment">/* print &amp; mail to the given postal address */</span></div><div class="line">        <span class="keyword">if</span> (next != <span class="keyword">null</span>) next.send(message);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The client instantiates and links the notifiers to create a chain and finally passes the message to the first link of the chain.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        INotification sms = <span class="keyword">new</span> Sms();</div><div class="line">        INotification mail = <span class="keyword">new</span> Email();</div><div class="line">        INotification post = <span class="keyword">new</span> Post();</div><div class="line"></div><div class="line">        sms.setNext(mail);</div><div class="line">        mail.setNext(post);</div><div class="line"></div><div class="line">        Message message = <span class="keyword">new</span> Message();</div><div class="line">        <span class="comment">/* set message properties to math recipient */</span></div><div class="line">        sms.send(message);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2010/design-patterns&quot;&gt;Design Patterns Overview&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Pass a Product to a Chain of Processors and Each Will Do Its Job.&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Software Architecture" scheme="http://truelogician.com/categories/Software-Architecture/"/>
    
      <category term="Design Patterns" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/"/>
    
      <category term="Types" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"/>
    
      <category term="Behavioral" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Behavioral/"/>
    
    
      <category term="Design-Patterns" scheme="http://truelogician.com/tags/Design-Patterns/"/>
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
  </entry>
  
  <entry>
    <title>State Pattern</title>
    <link href="http://truelogician.com/2013/state/"/>
    <id>http://truelogician.com/2013/state/</id>
    <published>2013-03-29T16:51:03.000Z</published>
    <updated>2016-09-18T14:47:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><strong>Change the Behavior According to the State.</strong> <em>Encapsulate State-Based Behaviors and Use Delegation to Switch Between Behaviors.</em></p>
<a id="more"></a>
<p>Using this pattern you can create a static state machine.</p>
<p><strong><em>What is a State Machine?</em></strong></p>
<p>One of the most concise definitions can be found in  <a href="http://www.oxforddictionaries.com/definition/english/state-machine" target="_blank" rel="external">Oxford Dictionaries</a> web page.</p>
<blockquote>
<p>A state machine is a device which can be in one of a set number of stable conditions depending on its previous condition and on the present values of its inputs.</p>
</blockquote>
<h3 id="Recipe"><a href="#Recipe" class="headerlink" title="Recipe"></a>Recipe</h3><ul>
<li>The definition of ‘State’. A state can be asked to make transitions to other states. The following state definition; for instance, can make up to 3 transitions.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IState</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeTransition1</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeTransition2</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeTransition3</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>The definition of a ‘StateMachine’ (aka Context). In our case it can only be in stateA or stateB.</li>
<li>Note that in order to improve code clarity I’ve grouped methods into two sets:<ul>
<li><strong>Those intended to be used by states:</strong> These methods only change the machine’s current state.</li>
<li><strong>Those intended to be used by clients:</strong> These methods ask current state for a certain transition.</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateMachine</span> </span>&#123;</div><div class="line">    IState stateA;</div><div class="line">    IState stateB;</div><div class="line"></div><div class="line">    IState currentState;</div><div class="line"></div><div class="line">    <span class="comment">/* used by client */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action1</span><span class="params">()</span> </span>&#123; currentState.makeTransition1(); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action2</span><span class="params">()</span> </span>&#123; currentState.makeTransition2(); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action3</span><span class="params">()</span> </span>&#123; currentState.makeTransition3(); &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* used by states */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">gotoStateA</span><span class="params">()</span> </span>&#123; currentState = stateA; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">gotoStateB</span><span class="params">()</span> </span>&#123; currentState = stateB; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Concrete implementations of the ‘State’.<ul>
<li>Notice that they can access the state machine on which they operate.</li>
<li>For each of their transitions, they define next state of the machine.</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateA</span> <span class="keyword">implements</span> <span class="title">IState</span> </span>&#123;</div><div class="line">    StateMachine machine;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeTransition1</span><span class="params">()</span> </span>&#123; machine.gotoStateA(); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeTransition2</span><span class="params">()</span> </span>&#123; machine.gotoStateB(); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeTransition3</span><span class="params">()</span> </span>&#123; machine.gotoStateB(); &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateB</span> <span class="keyword">implements</span> <span class="title">IState</span> </span>&#123;</div><div class="line">    StateMachine machine;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeTransition1</span><span class="params">()</span> </span>&#123; machine.gotoStateA(); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeTransition2</span><span class="params">()</span> </span>&#123; machine.gotoStateB(); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeTransition3</span><span class="params">()</span> </span>&#123; machine.gotoStateA(); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Serve"><a href="#Serve" class="headerlink" title="Serve"></a>Serve</h3><p>The state pattern client can only access the state machine’s actions. Accordingly, the machine will take over corresponding states.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        StateMachine machine = <span class="keyword">new</span> StateMachine();</div><div class="line">        machine.action3();</div><div class="line">        machine.action1();</div><div class="line">        machine.action2();</div><div class="line">        machine.action1();</div><div class="line">        machine.action2();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Important-Benefits"><a href="#Important-Benefits" class="headerlink" title="Important Benefits"></a>Important Benefits</h3><p>Creating a clean implementation of a state machine together with states and transitions.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Let’s implement the <a href="https://en.wikipedia.org/wiki/Finite-state_machine#Example:_coin-operated_turnstile" target="_blank" rel="external">Wikipedia’s example</a> of a state machine. Before going through the code take look at <a href="https://en.wikipedia.org/wiki/Finite-state_machine#/media/File:Turnstile_state_machine_colored.svg" target="_blank" rel="external">its state diagram</a> to understand the involved states and transitions.</p>
<p>According to the diagram, there are two possible transitions: inserting a coin or pushing the handle. As a result, our definition of a state will look like this:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IState</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">coin</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">State</span> <span class="keyword">implements</span> <span class="title">IState</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Turnstile machine;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">State</span><span class="params">(Turnstile machine)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.machine = machine;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Our turnstile state machine contains two states and provides appropriate methods for clients and also the states.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Turnstile</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> IState locked = <span class="keyword">new</span> Locked(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">private</span> IState unlocked = <span class="keyword">new</span> Unlocked(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> IState currentState = locked;</div><div class="line"></div><div class="line">    <span class="comment">/* used by client */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertCoin</span><span class="params">()</span> </span>&#123; currentState.coin(); &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pushHandle</span><span class="params">()</span> </span>&#123; currentState.push(); &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* used by states */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">gotoUnlocked</span><span class="params">()</span> </span>&#123; currentState = unlocked; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">gotoLocked</span><span class="params">()</span>   </span>&#123; currentState = locked;   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The locked and unlocked states both determine turnstile’s next state based on the transition.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Locked</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Locked</span><span class="params">(Turnstile machine)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(machine);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">coin</span><span class="params">()</span> </span>&#123; machine.gotoUnlocked(); &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Unlocked</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Unlocked</span><span class="params">(Turnstile machine)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(machine);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">coin</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">()</span> </span>&#123; machine.gotoLocked();  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Finally, a client can create a turnstile, invoke any of the two available behaviors and watch the state changes accordingly.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        Turnstile turnstile = <span class="keyword">new</span> Turnstile();</div><div class="line">        turnstile.pushHandle();</div><div class="line">        turnstile.insertCoin();</div><div class="line">        turnstile.pushHandle();</div><div class="line">        turnstile.pushHandle();</div><div class="line">        turnstile.insertCoin();</div><div class="line">        turnstile.pushHandle();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2010/design-patterns&quot;&gt;Design Patterns Overview&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Change the Behavior According to the State.&lt;/strong&gt; &lt;em&gt;Encapsulate State-Based Behaviors and Use Delegation to Switch Between Behaviors.&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Software Architecture" scheme="http://truelogician.com/categories/Software-Architecture/"/>
    
      <category term="Design Patterns" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/"/>
    
      <category term="Types" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"/>
    
      <category term="Behavioral" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Behavioral/"/>
    
    
      <category term="Design-Patterns" scheme="http://truelogician.com/tags/Design-Patterns/"/>
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
  </entry>
  
  <entry>
    <title>Proxy Pattern (Protection Proxy)</title>
    <link href="http://truelogician.com/2012/proxy/"/>
    <id>http://truelogician.com/2012/proxy/</id>
    <published>2012-11-09T17:11:26.000Z</published>
    <updated>2016-09-18T15:06:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><strong>Limit Access to a Sensitive Class’s Properties and Behaviors.</strong> <em>Wraps an Object In Order to Control Access to It.</em></p>
<a id="more"></a>
<p>Proxy pattern come in three variations; Remote, Virtual and Protection. Although they are the same in essence, the following introduction discusses the Protection proxy pattern. You can read more about Remote and Virtual Proxies on <a href="https://en.wikipedia.org/wiki/Proxy_pattern" target="_blank" rel="external">Wikipedia</a>.</p>
<h3 id="Recipe"><a href="#Recipe" class="headerlink" title="Recipe"></a>Recipe</h3><ul>
<li>As usual let’s start with the definition of a Product and its concrete class (<em>real object</em>).</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IProduct</span> </span>&#123;</div><div class="line">    <span class="function">Object <span class="title">getSensitiveData</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sensitiveActionA</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">normalOperationB</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> <span class="keyword">implements</span> <span class="title">IProduct</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getSensitiveData</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="comment">/*data*/</span>;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sensitiveActionA</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">normalOperationB</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Since ‘Product’ contains sensitive information, we need to define the ‘Proxy’.<ul>
<li>Only the ‘Proxy’ is exposed to the outside world.</li>
<li>It might only provide insensitive information.</li>
<li>It can restrict the use of sensitive operations.</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IProxy</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operationB</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operationC</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyProduct</span> <span class="keyword">implements</span> <span class="title">IProxy</span> </span>&#123;</div><div class="line">    Product product = <span class="keyword">new</span> Product();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationB</span><span class="params">()</span> </span>&#123;</div><div class="line">        product.normalOperationB();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationC</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">/*security conditions &amp; restrictions*/</span></div><div class="line">        product.sensitiveActionA();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Serve"><a href="#Serve" class="headerlink" title="Serve"></a>Serve</h3><p>Since the client code has only access to the ‘ProxyProduct’, it can only use the insensitive or restricted operations.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        IProxy proxy = <span class="keyword">new</span> ProxyProduct();</div><div class="line">        proxy.operationB();</div><div class="line">        proxy.operationC();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Important-Benefits"><a href="#Important-Benefits" class="headerlink" title="Important Benefits"></a>Important Benefits</h3><p>Using this pattern the sensitive class’s properties and behaviors are secured.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Suppose a software module implements a way to interact with the underlying OS. However, out of this module scope (aka package or namespace), the clients of this module shall not be able to run certain group of commands.</p>
<ul>
<li>The following is the core interaction part to which the clients have no access.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shell</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ICommand command)</span> </span>&#123;</div><div class="line">        <span class="comment">/*implementation*/</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>The Command are categorized into 2 groups of:<ul>
<li>SYS Commands: The sensitive commands that are run by clients within the scope.</li>
<li>NET Commands: The regular simple commands which can be run by all clients.</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ICommand</span> </span>&#123; <span class="function">String <span class="title">get</span><span class="params">()</span></span>; &#125;</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ISysCommand</span> <span class="keyword">extends</span> <span class="title">ICommand</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">INetCommand</span> <span class="keyword">extends</span> <span class="title">ICommand</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reboot</span> <span class="keyword">implements</span> <span class="title">ISysCommand</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">"sudo reboot"</span>; &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shutdown</span> <span class="keyword">implements</span> <span class="title">ISysCommand</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">"sudo shutdown -h now"</span>; &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ping</span> <span class="keyword">implements</span> <span class="title">INetCommand</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">"ping -c 3"</span>; &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ip</span> <span class="keyword">implements</span> <span class="title">INetCommand</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">"ifconfig eth0"</span>; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>The proxy and its concrete implementation are the only means for outside-scope clients to interact with OS.</li>
<li>The proxy, in this case, filters out all system commands.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IProxy</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(ICommand command)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShellProxy</span> <span class="keyword">implements</span> <span class="title">IProxy</span> </span>&#123;</div><div class="line">    Shell shell = <span class="keyword">new</span> Shell();</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ICommand command)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">if</span> (command <span class="keyword">instanceof</span> ISysCommand)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"cannot run system commands"</span>);</div><div class="line">        shell.run(command);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>and finally, the client code that is only allowed to execute simple networking commands.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        ShellProxy shellProxy = <span class="keyword">new</span> ShellProxy();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            shellProxy.run(<span class="keyword">new</span> Ping());</div><div class="line">            shellProxy.run(<span class="keyword">new</span> Reboot());</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            System.out.println(<span class="string">"Error: "</span> + e.getMessage());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2010/design-patterns&quot;&gt;Design Patterns Overview&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Limit Access to a Sensitive Class’s Properties and Behaviors.&lt;/strong&gt; &lt;em&gt;Wraps an Object In Order to Control Access to It.&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Software Architecture" scheme="http://truelogician.com/categories/Software-Architecture/"/>
    
      <category term="Design Patterns" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/"/>
    
      <category term="Types" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"/>
    
      <category term="Structural" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Structural/"/>
    
    
      <category term="Design-Patterns" scheme="http://truelogician.com/tags/Design-Patterns/"/>
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
  </entry>
  
  <entry>
    <title>Replacing Conditionals with Patterns</title>
    <link href="http://truelogician.com/2012/conditionals/"/>
    <id>http://truelogician.com/2012/conditionals/</id>
    <published>2012-10-18T15:14:36.000Z</published>
    <updated>2016-10-03T21:27:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>Since switches and if-statements are the most common control flow statements in many languages and are widely used throughout the code, removing the unnecessarily used ones will have a huge impact on the general readability of the code.</p>
<a id="more"></a>
<h3 id="Use-Null-Object-Pattern"><a href="#Use-Null-Object-Pattern" class="headerlink" title="Use Null-Object Pattern"></a>Use Null-Object Pattern</h3><p>Always try not to return null references, instead practice the <a href="/2011/null">Null-Object Pattern</a> and return Null-Objects that are neutral to operations and processes.</p>
<p>Suppose a module is responsible for specific calculations for a person’s properties on which taxes are paid.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PropertyTaxCalculator</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">calculate</span><span class="params">(String personId)</span> </span>&#123;</div><div class="line">    Person person = getPerson(personId);</div><div class="line">    <span class="keyword">if</span> (person != <span class="keyword">null</span>) &#123;</div><div class="line">      TaxPayments taxPayments = person.getTaxPayments(<span class="number">2012</span>);</div><div class="line">      <span class="keyword">if</span> (taxPayments != <span class="keyword">null</span>) &#123;</div><div class="line">        PropertyTax propertyTax = taxPayments.get(PROPERTY_TAX);</div><div class="line">        <span class="keyword">if</span> (propertyTax != <span class="keyword">null</span>) &#123;</div><div class="line">          List&lt;Property&gt; properties = propertyTax.getProperties();</div><div class="line">          <span class="keyword">if</span> (properties != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span>(Property property : properties) &#123;</div><div class="line">              <span class="keyword">if</span> (property != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// do the main calculations here</span></div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The snippet below does the same using <a href="/2011/null">Null-Object Pattern</a>. Notice how applying this pattern removes the necessity for excessive null checks in the second revision of the ‘PropertyTaxCalculator’.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PropertyTaxCalculator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">calculate</span><span class="params">(String personId)</span> </span>&#123;</div><div class="line"></div><div class="line">      List&lt;Property&gt; properties =</div><div class="line">         getPerson(personId)</div><div class="line">        .getTaxPayments(<span class="number">2012</span>)</div><div class="line">        .get(PROPERTY_TAX)</div><div class="line">        .getProperties();</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(Property property : properties) &#123;</div><div class="line">            <span class="comment">// do the main calculations here</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Use-Strategy-Pattern"><a href="#Use-Strategy-Pattern" class="headerlink" title="Use Strategy Pattern"></a>Use Strategy Pattern</h3><p><a href="/2010/strategy">Strategy Pattern</a> is another tool in the belt to get rid of conditional statements. The following pseudo-code demonstrates an example where an operation happens on an object based on a specific condition (the client ‘type’ in our example).</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Type type;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(Object object)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (type == TypeA) &#123;</div><div class="line">            operationA(object);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == TypeB) &#123;</div><div class="line">            operationB(object);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == TypeC) &#123;</div><div class="line">            operationC(object);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Since the client has a certain type at each moment, we can move the logic in each leg of the conditionals to a different strategy implementation.  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    IStrategy strategy;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(Object object)</span> </span>&#123;</div><div class="line">        strategy.process(object);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IStrategy</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(Object object)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrategyA</span> <span class="keyword">implements</span> <span class="title">IStrategy</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Object object)</span> </span>&#123;</div><div class="line">        operationA(object);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrategyB</span> <span class="keyword">implements</span> <span class="title">IStrategy</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Object object)</span> </span>&#123;</div><div class="line">        operationB(object);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrategyC</span> <span class="keyword">implements</span> <span class="title">IStrategy</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Object object)</span> </span>&#123;</div><div class="line">        operationC(object);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// a newly added condition</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrategyD</span> <span class="keyword">implements</span> <span class="title">IStrategy</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Object object)</span> </span>&#123;</div><div class="line">        operationD(object);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>It might look like using the strategy we ended up with twice as much code, however, the separation of concerns into different classes, encourages single responsibility and at the same time it makes them more readable and more testable. Besides, note that new conditions can be added without the need for modifying the client code.</p>
<h3 id="Use-Factory-Method-Pattern"><a href="#Use-Factory-Method-Pattern" class="headerlink" title="Use Factory-Method Pattern"></a>Use Factory-Method Pattern</h3><p>In case of encountering repeated conditionals that are used for object instantiation, the <a href="/2010/factory">Factory-Method Pattern</a> might be useful.</p>
<p>The pseudo-code below might look a bit long but it basically defines two behaviors each of which needs a ‘Product’ which is instantiated conditionally.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">  Type type;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">action1</span><span class="params">()</span> </span>&#123;</div><div class="line">      IProduct product = <span class="keyword">null</span>;</div><div class="line">      <span class="keyword">if</span> (type == TypeA) &#123;</div><div class="line">          product = <span class="keyword">new</span> ProductA();</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == TypeB) &#123;</div><div class="line">          product = <span class="keyword">new</span> ProductB();</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == TypeC) &#123;</div><div class="line">          product = <span class="keyword">new</span> ProductC();</div><div class="line">      &#125;</div><div class="line">      operation1(product);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">action2</span><span class="params">()</span> </span>&#123;</div><div class="line">      IProduct product = <span class="keyword">null</span>;</div><div class="line">      <span class="keyword">if</span> (type == TypeA) &#123;</div><div class="line">          product = <span class="keyword">new</span> ProductA();</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == TypeB) &#123;</div><div class="line">          product = <span class="keyword">new</span> ProductB();</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == TypeC) &#123;</div><div class="line">          product = <span class="keyword">new</span> ProductC();</div><div class="line">      &#125;</div><div class="line">      operation2(product);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Such repeating conditional object instantiation is a sign of need for refactoring into <a href="/2010/factory">Factory-Method Pattern</a> as suggested below.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Type type;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action1</span><span class="params">()</span> </span>&#123;</div><div class="line">        operation1(ProductFactory.create(type));</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action2</span><span class="params">()</span> </span>&#123;</div><div class="line">        operation2(ProductFactory.create(type));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductFactory</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">static</span> IProduct <span class="title">create</span><span class="params">(Type type)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (type) &#123;</div><div class="line">            <span class="keyword">case</span> TypeA: <span class="keyword">return</span> <span class="keyword">new</span> ProductA();</div><div class="line">            <span class="keyword">case</span> TypeB: <span class="keyword">return</span> <span class="keyword">new</span> ProductB();</div><div class="line">            <span class="keyword">case</span> TypeC: <span class="keyword">return</span> <span class="keyword">new</span> ProductC();</div><div class="line">            <span class="keyword">default</span>: <span class="keyword">return</span> <span class="keyword">new</span> NullProduct();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>Although it might not be necessary nor feasible to get rid of many of the conditionals (such as when comparing primitive objects or enums), most unnecessary ones can be replaced by polymorphism and patterns which will improve code readability, testability and advocates separation of concerns.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Since switches and if-statements are the most common control flow statements in many languages and are widely used throughout the code, removing the unnecessarily used ones will have a huge impact on the general readability of the code.&lt;/p&gt;
    
    </summary>
    
      <category term="Object-Oriented Design" scheme="http://truelogician.com/categories/Object-Oriented-Design/"/>
    
      <category term="Software Craftsmanship" scheme="http://truelogician.com/categories/Object-Oriented-Design/Software-Craftsmanship/"/>
    
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
      <category term="Object-Oriented Design" scheme="http://truelogician.com/tags/Object-Oriented-Design/"/>
    
      <category term="Clean Code" scheme="http://truelogician.com/tags/Clean-Code/"/>
    
      <category term="Refactoring" scheme="http://truelogician.com/tags/Refactoring/"/>
    
      <category term="Design for Testability" scheme="http://truelogician.com/tags/Design-for-Testability/"/>
    
      <category term="Single Responsibility" scheme="http://truelogician.com/tags/Single-Responsibility/"/>
    
      <category term="Separation of Concerns" scheme="http://truelogician.com/tags/Separation-of-Concerns/"/>
    
      <category term="Replacing Conditionals" scheme="http://truelogician.com/tags/Replacing-Conditionals/"/>
    
  </entry>
  
  <entry>
    <title>Flyweight Pattern</title>
    <link href="http://truelogician.com/2012/flyweight/"/>
    <id>http://truelogician.com/2012/flyweight/</id>
    <published>2012-09-23T21:21:17.000Z</published>
    <updated>2016-09-18T15:02:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><strong>Improve Performance by Sharing Objects Instead of Creating Them.</strong></p>
<a id="more"></a>
<h3 id="Recipe"><a href="#Recipe" class="headerlink" title="Recipe"></a>Recipe</h3><p>Before identifying the elements for flyweight pattern, consider the following definitions:</p>
<ul>
<li><strong>Intrinsic State:</strong> A state in the object upon which we will keep a reference of that object (share the object).</li>
<li><strong>Extrinsic State:</strong> Other states of the object that are not important to your activity at all.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IProduct</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> <span class="keyword">implements</span> <span class="title">IProduct</span> </span>&#123;</div><div class="line">    Object intrinsicState;</div><div class="line">    <span class="comment">/*  extrinsic states... */</span></div><div class="line"></div><div class="line">    Product(Object intrinsicState) &#123;</div><div class="line">        <span class="keyword">this</span>.intrinsicState = intrinsicState;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>The factory where limited objects are kept and can be fetched by their intrinsic state.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductFactory</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> HashMap&lt;Object, IProduct&gt; products = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> IProduct <span class="title">create</span><span class="params">(Object intrinsicState)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!products.containsKey(intrinsicState))</div><div class="line">            products.put(intrinsicState, <span class="keyword">new</span> Product(intrinsicState));</div><div class="line">        <span class="keyword">return</span> products.get(intrinsicState);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Serve"><a href="#Serve" class="headerlink" title="Serve"></a>Serve</h3><p>The client uses the factory to either create or fetch previously created product. The client can change any extrinsic states of the <strong><em>same instance</em></strong> of the fetched product and use it as suited.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    List&lt;IProduct&gt; products = <span class="keyword">new</span> Vector&lt;&gt;();</div><div class="line"></div><div class="line">    Client() &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</div><div class="line">            Object intrinsicState = getFromLimitedIntrinsicStates();</div><div class="line">            products.add(ProductFactory.create(intrinsicState));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Important-Benefits"><a href="#Important-Benefits" class="headerlink" title="Important Benefits"></a>Important Benefits</h3><p>This pattern reduces the amount of memory consumption by sharing the objects that are similar in some way rather than creating new ones.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>A governmental application shall be put to smoke test for it’s limitations while processing massive amount of data. Your task is to create an in-memory database (Collections) with many records to make the test closer to reality. This collection does not need to contain unique items as long as it contains many of them.</p>
<p>Imagine this in-memory database table called ‘JobsTable’ that needs to be populated with at least around 100,000 ‘Job’ object.</p>
<ul>
<li>Let’s first define the notion of ‘Job’ and ‘MockJob’. Notice that job title is the Job’s intrinsic state of the ‘Job’.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IJob</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MockJob</span> <span class="keyword">implements</span> <span class="title">IJob</span> </span>&#123;</div><div class="line">    String title;</div><div class="line">    <span class="keyword">double</span> salary;</div><div class="line">    String risk;</div><div class="line"></div><div class="line">    MockJob(String title) &#123;</div><div class="line">        <span class="keyword">this</span>.title = title;</div><div class="line">        salary = <span class="number">1000</span>d;</div><div class="line">        risk = <span class="string">"LOW"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>The ‘JobFactory’ stores jobs based on their title. We will end up with limited amount of instances in memory.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JobFactory</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> HashMap&lt;String, IJob&gt; jobs;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> IJob <span class="title">create</span><span class="params">(String title)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (jobs.containsKey(title))</div><div class="line">            <span class="keyword">return</span> jobs.get(title);</div><div class="line">        IJob job = <span class="keyword">new</span> MockJob(title);</div><div class="line">        jobs.put(title, job);</div><div class="line">        <span class="keyword">return</span> job;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>The database table implementation, in our example, which keeps references to those limited instances in a ‘Vector’.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JobsTable</span> </span>&#123;</div><div class="line">    List&lt;IJob&gt; jobs = <span class="keyword">new</span> Vector&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addJob</span><span class="params">(String title)</span> </span>&#123;</div><div class="line">        jobs.add(JobFactory.create(title));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Finally, our unit test will look something like this.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClass</span> </span>&#123;</div><div class="line"></div><div class="line">    SystemUnderTest sut;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">smokeTest</span><span class="params">()</span> </span>&#123;</div><div class="line">        JobsTable table = <span class="keyword">new</span> JobsTable();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</div><div class="line">            String title = getRandomTitle();</div><div class="line">            table.addJob(title);</div><div class="line">        &#125;</div><div class="line">        sut.process(table);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    String[] titles = <span class="keyword">new</span> String[] &#123;</div><div class="line">        <span class="string">"Engineer"</span>, <span class="string">"Doctor"</span>, <span class="string">"Worker"</span>, <span class="string">"Teacher"</span></div><div class="line">    &#125;;</div><div class="line">    <span class="function">String <span class="title">getRandomTitle</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="comment">// a random title from the titles array;</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2010/design-patterns&quot;&gt;Design Patterns Overview&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Improve Performance by Sharing Objects Instead of Creating Them.&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Software Architecture" scheme="http://truelogician.com/categories/Software-Architecture/"/>
    
      <category term="Design Patterns" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/"/>
    
      <category term="Types" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"/>
    
      <category term="Structural" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Structural/"/>
    
    
      <category term="Design-Patterns" scheme="http://truelogician.com/tags/Design-Patterns/"/>
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
  </entry>
  
  <entry>
    <title>Composite Pattern</title>
    <link href="http://truelogician.com/2012/composite/"/>
    <id>http://truelogician.com/2012/composite/</id>
    <published>2012-06-14T19:19:03.000Z</published>
    <updated>2016-09-18T14:59:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><strong>Add the Capability of Never Ending Grouping.</strong> <em>Client Treats Collection of Objects and Individual Objects Uniformly.</em></p>
<a id="more"></a>
<h3 id="Recipe"><a href="#Recipe" class="headerlink" title="Recipe"></a>Recipe</h3><ul>
<li>Imagine the famous example of ‘Leaf’ and ‘Branch’<ul>
<li>A ‘Branch’ can contain other more branches or leaves.</li>
<li>A ‘Leaf’ cannot contain any other leaf or branch.</li>
</ul>
</li>
<li>Now let’s define a single ‘Leaf’ (‘IProduct’ in this case).</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IProduct</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operationA</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operationB</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>The implementation of the atomic ‘Leaf’ entity (Product).</li>
<li>The implementation of the non-atomic ‘Branch’ (ProductGroup).<ul>
<li>Notice that ProductGroup implements the same interface and contains a collection of products at the same time.</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> <span class="keyword">implements</span> <span class="title">IProduct</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationA</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationB</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductGroup</span> <span class="keyword">implements</span> <span class="title">IProduct</span> </span>&#123;</div><div class="line"></div><div class="line">    List&lt;IProduct&gt; products;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(IProduct... product)</span> </span>&#123;<span class="comment">/*add to products*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(IProduct product)</span> </span>&#123;<span class="comment">/*remove form products*/</span>&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationA</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationB</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Serve"><a href="#Serve" class="headerlink" title="Serve"></a>Serve</h3><p>After having the ‘Leaf’ and ‘Branch’ implementations in place, the client can now compose the tree and treat branches or leaves uniformly.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        ProductGroup groupA = <span class="keyword">new</span> ProductGroup();</div><div class="line">        ProductGroup groupA1 = <span class="keyword">new</span> ProductGroup();</div><div class="line">        ProductGroup groupA2 = <span class="keyword">new</span> ProductGroup();</div><div class="line"></div><div class="line">        ProductGroup groupB = <span class="keyword">new</span> ProductGroup();</div><div class="line">        ProductGroup groupB1 = <span class="keyword">new</span> ProductGroup();</div><div class="line"></div><div class="line">        IProduct product1 = <span class="keyword">new</span> Product();</div><div class="line">        IProduct product2 = <span class="keyword">new</span> Product();</div><div class="line"></div><div class="line">        groupA.add(groupA1, groupA2);</div><div class="line">        groupB.add(groupB1);</div><div class="line"></div><div class="line">        ProductGroup allGroups = <span class="keyword">new</span> ProductGroup();</div><div class="line">        allGroups.add(groupA, groupB, product1, product2);</div><div class="line"></div><div class="line">        allGroups.operationA();</div><div class="line">        product1.operationA();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Important-Benefits"><a href="#Important-Benefits" class="headerlink" title="Important Benefits"></a>Important Benefits</h3><ul>
<li>Allows treating individual objects and compositions uniformly.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Imagine your company asked you to create utility classes for the organizational chart.<br>The ‘WestCoast’ organization contains multiple divisions and departments. Each division might consist of other divisions or departments that groups them together. It is required to provide ceratin functionalities for handling employees and staff within divisions and departments.</p>
<ul>
<li>The notion of ‘Department’ is the atomic entity or a ‘Leaf’</li>
<li>The notion of ‘Division’ is the composite entity or a ‘Branch’</li>
<li>Don’t mind the ‘Employee’ as it’s only a utility class.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IDepartment</span> </span>&#123;</div><div class="line">    <span class="function">List&lt;Employee&gt; <span class="title">staff</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Employee e)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printStaff</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</div><div class="line">    String name; <span class="keyword">int</span> rank;</div><div class="line">    Employee(String name, <span class="keyword">int</span> rank) &#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.rank = rank;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Now that we have our core ‘Leaf’ interface, let’s create the concerete implementation as well as its composite implementation.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Department</span> <span class="keyword">implements</span> <span class="title">IDepartment</span> </span>&#123;</div><div class="line">    List&lt;Employee&gt; employees;</div><div class="line">    Department(Employee... employees) &#123;<span class="keyword">this</span>.employees = Arrays.asList(employees);&#125;</div><div class="line">    <span class="function">List&lt;Employee&gt; <span class="title">staff</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> employees; &#125;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Employee e)</span> </span>&#123; <span class="keyword">return</span> employees.contains(e); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printStaff</span><span class="params">()</span> </span>&#123;</div><div class="line">        employees.sort((e1, e2) -&gt; e1.rank - e2.rank);</div><div class="line">        <span class="keyword">for</span>(Employee e : employees)</div><div class="line">            System.out.println(e.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Division</span> <span class="keyword">implements</span> <span class="title">IDepartment</span> </span>&#123;</div><div class="line"></div><div class="line">    List&lt;IDepartment&gt; departments;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addDepartment</span><span class="params">(IDepartment d)</span>    </span>&#123; departments.add(d);    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeDepartment</span><span class="params">(IDepartment d)</span> </span>&#123; departments.remove(d); &#125;</div><div class="line"></div><div class="line">    <span class="function">List&lt;Employee&gt; <span class="title">staff</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;Employee&gt; staff = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (IDepartment d : departments)</div><div class="line">            staff.addAll(d.staff());</div><div class="line">        <span class="keyword">return</span> staff;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Employee e)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(IDepartment d : departments)</div><div class="line">            <span class="keyword">if</span> (d.contains(e)) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printStaff</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(IDepartment d : departments)</div><div class="line">            d.printStaff();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Employees are extracted into a database class to increase the focus on ‘Client’</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DB</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> Employee james = <span class="keyword">new</span> Employee(<span class="string">"james"</span>, <span class="number">1</span>);</div><div class="line">    <span class="keyword">static</span> Employee jack = <span class="keyword">new</span> Employee(<span class="string">"jack"</span>, <span class="number">2</span>);</div><div class="line">    <span class="keyword">static</span> Employee john = <span class="keyword">new</span> Employee(<span class="string">"john"</span>, <span class="number">3</span>);</div><div class="line"></div><div class="line">    <span class="keyword">static</span> Employee abraham = <span class="keyword">new</span> Employee(<span class="string">"abraham"</span>, <span class="number">5</span>);</div><div class="line">    <span class="keyword">static</span> Employee abigale = <span class="keyword">new</span> Employee(<span class="string">"abigale"</span>, <span class="number">6</span>);</div><div class="line">    <span class="keyword">static</span> Employee anna = <span class="keyword">new</span> Employee(<span class="string">"anna"</span>, <span class="number">5</span>);</div><div class="line"></div><div class="line">    <span class="keyword">static</span> Employee brian = <span class="keyword">new</span> Employee(<span class="string">"brian"</span>, <span class="number">5</span>);</div><div class="line">    <span class="keyword">static</span> Employee bernard = <span class="keyword">new</span> Employee(<span class="string">"bernard"</span>, <span class="number">6</span>);</div><div class="line">    <span class="keyword">static</span> Employee bianca = <span class="keyword">new</span> Employee(<span class="string">"bianca"</span>, <span class="number">7</span>);</div><div class="line"></div><div class="line">    <span class="keyword">static</span> Employee unknown = <span class="keyword">new</span> Employee(<span class="string">"Unknown"</span>, <span class="number">10</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        IDepartment marketing = <span class="keyword">new</span> Department(DB.abigale, DB.abraham, DB.anna);</div><div class="line">        IDepartment accounting = <span class="keyword">new</span> Department(DB.bernard, DB.bianca, DB.brian);</div><div class="line">        IDepartment management = <span class="keyword">new</span> Department(DB.jack, DB.james, DB.john);</div><div class="line"></div><div class="line">        Division finance = <span class="keyword">new</span> Division();</div><div class="line">        finance.addDepartment(marketing);</div><div class="line">        finance.addDepartment(accounting);</div><div class="line"></div><div class="line">        Division westCoast = <span class="keyword">new</span> Division();</div><div class="line">        westCoast.addDepartment(management);</div><div class="line">        westCoast.addDepartment(finance);</div><div class="line"></div><div class="line">        <span class="keyword">boolean</span> exists = marketing.contains(DB.abigale);</div><div class="line">        exists = westCoast.contains(DB.unknown);</div><div class="line">        management.printStaff();</div><div class="line">        westCoast.printStaff();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2010/design-patterns&quot;&gt;Design Patterns Overview&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Add the Capability of Never Ending Grouping.&lt;/strong&gt; &lt;em&gt;Client Treats Collection of Objects and Individual Objects Uniformly.&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Software Architecture" scheme="http://truelogician.com/categories/Software-Architecture/"/>
    
      <category term="Design Patterns" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/"/>
    
      <category term="Types" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"/>
    
      <category term="Structural" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Structural/"/>
    
    
      <category term="Design-Patterns" scheme="http://truelogician.com/tags/Design-Patterns/"/>
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
  </entry>
  
  <entry>
    <title>Iterator Pattern</title>
    <link href="http://truelogician.com/2012/iterator/"/>
    <id>http://truelogician.com/2012/iterator/</id>
    <published>2012-03-02T17:10:56.000Z</published>
    <updated>2016-09-18T15:04:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><strong>Get the Iterator for Any Type of Collections in Subclasses.</strong> <em>Provides a Way to Traverse a Collection of Objects Without Exposing Its Implementation.</em></p>
<a id="more"></a>
<h3 id="Recipe"><a href="#Recipe" class="headerlink" title="Recipe"></a>Recipe</h3><ul>
<li>The interface that defines the getIterator() method</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IIterable</span> </span>&#123;</div><div class="line">    <span class="function">Iterator <span class="title">getIterator</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Concrete implementations provide the iterator of a collection they might own.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductA</span> <span class="keyword">implements</span> <span class="title">IIterable</span> </span>&#123;</div><div class="line">    <span class="function">Iterator <span class="title">getIterator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// return the iterator of a desired collection;</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductB</span> <span class="keyword">implements</span> <span class="title">IIterable</span> </span>&#123;</div><div class="line">    <span class="function">Iterator <span class="title">getIterator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// return the iterator of a desired collection;</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Serve"><a href="#Serve" class="headerlink" title="Serve"></a>Serve</h3><p>Having implemented the IIterable, it is now possible to iterate over the collections in each implementation.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        ProductA product = <span class="keyword">new</span> ProductA();</div><div class="line">        Iterator&lt;Integer&gt; iterator = product.getIterator();</div><div class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">            Integer next = iterator.next();</div><div class="line">            <span class="comment">/*implementations*/</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Important-Benefits"><a href="#Important-Benefits" class="headerlink" title="Important Benefits"></a>Important Benefits</h3><ul>
<li>It provides a uniform way to cycle through different types of collections.</li>
<li>You can refer to each collection of objects in the same way.</li>
<li>It avoids code duplication which might occur during the iteration over each of them.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IIterable</span> </span>&#123;</div><div class="line">    <span class="function">Iterator <span class="title">getIterator</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Suppose there are some implementations which somehow hold a form of a collection (i.e arrays, lists, hash-tables, etc). this pattern provides a way to get an iterator over those collections.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inventory</span> <span class="keyword">implements</span> <span class="title">IIterable</span> </span>&#123;</div><div class="line"></div><div class="line">    Collection&lt;String&gt; items = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">    <span class="function">Iterator <span class="title">getIterator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> items.iterator();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IUser</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ISession</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnlineUsers</span> <span class="keyword">implements</span> <span class="title">IIterable</span> </span>&#123;</div><div class="line">    AbstractMap&lt;IUser, ISession&gt; users = <span class="keyword">new</span> HashMap&lt;IUser, ISession&gt;();</div><div class="line">    <span class="function">Iterator <span class="title">getIterator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> users.keySet().iterator();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IPoint</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Diagram</span> <span class="keyword">implements</span> <span class="title">IIterable</span> </span>&#123;</div><div class="line">    IPoint[] points = <span class="keyword">new</span> IPoint[<span class="number">10</span>];</div><div class="line">    <span class="function">Iterator <span class="title">getIterator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Arrays.asList(points).iterator();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2010/design-patterns&quot;&gt;Design Patterns Overview&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Get the Iterator for Any Type of Collections in Subclasses.&lt;/strong&gt; &lt;em&gt;Provides a Way to Traverse a Collection of Objects Without Exposing Its Implementation.&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Software Architecture" scheme="http://truelogician.com/categories/Software-Architecture/"/>
    
      <category term="Design Patterns" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/"/>
    
      <category term="Types" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"/>
    
      <category term="Behavioral" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Behavioral/"/>
    
    
      <category term="Design-Patterns" scheme="http://truelogician.com/tags/Design-Patterns/"/>
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
  </entry>
  
  <entry>
    <title>Template Method Pattern</title>
    <link href="http://truelogician.com/2012/template/"/>
    <id>http://truelogician.com/2012/template/</id>
    <published>2012-02-16T20:47:19.000Z</published>
    <updated>2016-09-18T15:14:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><strong>Create a Fixed Procedure and Vary its details for the Subclasses.</strong> <em>Subclasses Decide How to implement Steps in an Algorithm.</em></p>
<a id="more"></a>
<h3 id="Recipe"><a href="#Recipe" class="headerlink" title="Recipe"></a>Recipe</h3><ul>
<li>The abstract product with basic behavior implementation as well as abstract methods (also called hooks).</li>
<li>The hooks are to be implemented later on by the flavors of the product.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operationA</span><span class="params">()</span> </span>&#123;</div><div class="line">        action1();</div><div class="line">        action3();</div><div class="line">        <span class="keyword">if</span> (condition())</div><div class="line">            action4();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operationB</span><span class="params">()</span> </span>&#123;</div><div class="line">        action2();</div><div class="line">        action3();</div><div class="line">        action5();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">action1</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action2</span><span class="params">()</span> </span>&#123;<span class="comment">/* implementation */</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">action3</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action4</span><span class="params">()</span> </span>&#123;<span class="comment">/* implementation */</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">action5</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">condition</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>The product flavors with custom implementations.</li>
<li>Note that how they can also override non-abstract methods (‘Product2’).</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product1</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action1</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action3</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action5</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">condition</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">/* return evaluation*/</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product2</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operationA</span><span class="params">()</span> </span>&#123;</div><div class="line">        action1();</div><div class="line">        action4();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action1</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action3</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action5</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">condition</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">/* return evaluation*/</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Serve"><a href="#Serve" class="headerlink" title="Serve"></a>Serve</h3><p>The required product can then be created and asked for its specific behavior.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        Product product = <span class="keyword">new</span> Product1();</div><div class="line">        product.operationB();</div><div class="line">        product = <span class="keyword">new</span> Product2();</div><div class="line">        product.operationA();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Important-Benefits"><a href="#Important-Benefits" class="headerlink" title="Important Benefits"></a>Important Benefits</h3><p>Creates a group of subclasses that have to execute a similar group of methods but every step of these executions can be customized.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Suppose that you’re assigned to create simple framework for parsing the messages used in the system. These messages have the common parts of header and payload. So, in order to parse a message, we should parse the header and in case of valid header, we can move on to parsing the payload.</p>
<p>Accordingly, we know about the procedure of parsing a message, but the details are different based on each message. So let’s define the procedure first.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</div><div class="line">    String content;</div><div class="line">    String header;</div><div class="line">    String payload;</div><div class="line">    Message(String content) &#123; <span class="keyword">this</span>.content = content; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">parse</span><span class="params">()</span> </span>&#123;</div><div class="line">        header = parseHeader();</div><div class="line">        <span class="keyword">if</span> (isValidHeader())</div><div class="line">            payload = parsePayload();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">abstract</span> String <span class="title">parseHeader</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isValidHeader</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> String <span class="title">parsePayload</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Now for each existing message we can fine-tune the implementation details.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpMessage</span> <span class="keyword">extends</span> <span class="title">Message</span> </span>&#123;</div><div class="line">    HttpMessage(String content) &#123; <span class="keyword">super</span>(content); &#125;</div><div class="line">    <span class="function">String <span class="title">parseHeader</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"parse header according to HTTP standards"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isValidHeader</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"check validity based on valid HTTP headers"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function">String <span class="title">parsePayload</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"parse message payload based on HTTP body"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomMessage</span> <span class="keyword">extends</span> <span class="title">Message</span> </span>&#123;</div><div class="line">    CustomMessage(String content) &#123; <span class="keyword">super</span>(content); &#125;</div><div class="line">    <span class="function">String <span class="title">parseHeader</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"the header has 4 parts, each is 2 bytes"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isValidHeader</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"valid if header ID equal to 300 or 400"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function">String <span class="title">parsePayload</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"from byte 10 and onward"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The client invokes the base abstract method and the implementations are executed accordingly.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        Message message = <span class="keyword">new</span> HttpMessage(<span class="string">"&lt;valid HTTP message&gt;"</span>);</div><div class="line">        message.parse();</div><div class="line">        message = <span class="keyword">new</span> CustomMessage(<span class="string">"&lt;valid Custom message&gt;"</span>);</div><div class="line">        message.parse();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2010/design-patterns&quot;&gt;Design Patterns Overview&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Create a Fixed Procedure and Vary its details for the Subclasses.&lt;/strong&gt; &lt;em&gt;Subclasses Decide How to implement Steps in an Algorithm.&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Software Architecture" scheme="http://truelogician.com/categories/Software-Architecture/"/>
    
      <category term="Design Patterns" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/"/>
    
      <category term="Types" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"/>
    
      <category term="Behavioral" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Behavioral/"/>
    
    
      <category term="Design-Patterns" scheme="http://truelogician.com/tags/Design-Patterns/"/>
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
  </entry>
  
</feed>
