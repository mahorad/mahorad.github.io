<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mahan&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://truelogician.com/"/>
  <updated>2016-09-07T13:19:48.000Z</updated>
  <id>http://truelogician.com/</id>
  
  <author>
    <name>Mahan Rad</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Enhance Your Hexo Blog</title>
    <link href="http://truelogician.com/2016/hexo-install-plugins/"/>
    <id>http://truelogician.com/2016/hexo-install-plugins/</id>
    <published>2016-08-23T20:22:01.000Z</published>
    <updated>2016-09-07T13:19:48.000Z</updated>
    
    <content type="html"><![CDATA[<div align="justify"><br>This tutorial covers how you can enhance your Hexo blog. If you have not yet create it, you might want to check out the <a href="/2016/08/hexo-quick-start/">quick start</a> with Hexo, otherwise let’s go through a few essential plug-ins that might leverage your blog’s usability very briefly. You can find the detailed list of plug-ins <a href="https://hexo.io/plug-ins/" target="_blank" rel="external">here</a>.<br></div> 

<a id="more"></a>
<h3 id="Comments-amp-Discussions"><a href="#Comments-amp-Discussions" class="headerlink" title="Comments &amp; Discussions"></a>Comments &amp; Discussions</h3><p>One of the most important features of a blog is perhaps the possibility to interact with your readers and that will keep them coming back. <a href="https://disqus.com/" target="_blank" rel="external">disqus</a> is a popular commenting service that works through the Javascript snippet within your page.</p>
<p>What you need to do to modify your blog with a full fledged commenting service is to <a href="https://disqus.com/profile/signup/" target="_blank" rel="external">sign up</a> for a disqus account, <a href="http://disqus.com/admin/create" target="_blank" rel="external">register your site</a> and pick a unique short-name for your blog and paste it in your _config.yaml file, right below your theme name as shown here.</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">disqus_shortname:</span> &lt;your-disqus-shortname<span class="string">&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Blog-Search"><a href="#Blog-Search" class="headerlink" title="Blog Search"></a><a href="https://github.com/alexbruno/hexo-generator-json-content" target="_blank" rel="external">Blog Search</a></h3><p>Using this plug-in, you can empower your blog reader with the ability of searching through your posts. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-json-content --save</div></pre></td></tr></table></figure>
<p>Right after installation, the plug-in should work properly out of the box (after running <em>hexo generate</em> or <em>hexo server</em>). however, in order to through details of configuration you might want to check its Github page or your theme’s “_config.yaml” file.</p>
<h3 id="RSS-Feed"><a href="#RSS-Feed" class="headerlink" title="RSS Feed"></a><a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="external">RSS Feed</a></h3><p>You can enable your blog with an RSS feed out of your posts in hexo by installing this plug-in. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-feed --save</div></pre></td></tr></table></figure>
<p>The plug-in can be configured in the _config.yaml with the following configuration section.</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">feed:</span></div><div class="line"><span class="attr">  type:</span> atom</div><div class="line"><span class="attr">  path:</span> atom.xml</div><div class="line"><span class="attr">  limit:</span> <span class="number">20</span></div></pre></td></tr></table></figure>
<h3 id="Markdown-Support"><a href="#Markdown-Support" class="headerlink" title="Markdown Support"></a><a href="https://github.com/hexojs/hexo-renderer-marked" target="_blank" rel="external">Markdown Support</a></h3><p>This plug-in provides more support on the markdown such as GFM (Github Flavored Markdown) tables and line breaks.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-renderer-marked --save</div></pre></td></tr></table></figure>
<p>You can customize the plug-in by pasting the following in your _config.yaml and changing the values.</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attr">marked:</span></div><div class="line"><span class="attr">  gfm:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  pedantic:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  sanitize:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  tables:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  breaks:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  smartLists:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  smartypants:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<h3 id="Category-Generator"><a href="#Category-Generator" class="headerlink" title="Category Generator"></a><a href="https://github.com/hexojs/hexo-generator-category" target="_blank" rel="external">Category Generator</a></h3><p>This plug-in allows you to assign one or more tags to your post. It will group your posts and enables your readers to later on find out about all of posts that are tagged with the same category.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-category --save</div></pre></td></tr></table></figure>
<p>and the related options are as follows:</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">category_generator:</span></div><div class="line"><span class="attr">  per_page:</span> <span class="number">10</span></div></pre></td></tr></table></figure>
<h3 id="CNAME-Generator"><a href="#CNAME-Generator" class="headerlink" title="CNAME Generator"></a><a href="https://github.com/leecrossley/hexo-generator-cname" target="_blank" rel="external">CNAME Generator</a></h3><p>This plug-in will automatically generate a Github pages CNAME file.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-cname --save</div></pre></td></tr></table></figure>
<p>This plug-in does not require any specific configuration. Only make sure to change your blog’s url to the real one in the _config.yaml</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># URL</span></div><div class="line"><span class="comment">## If your site is put in a subdirectory, set URL as 'http://yoursite.com/child' and root as '/child/'</span></div><div class="line"><span class="attr">url:</span> &lt;real-blog-url<span class="string">&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Git-Deployer"><a href="#Git-Deployer" class="headerlink" title="Git Deployer"></a><a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="external">Git Deployer</a></h3><p>This plug-in will help you deploy your blog using git.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>You can configure the deploy plug-in like this:</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> git</div><div class="line"><span class="attr">  repo:</span> https://github.com/&lt;username&gt;/&lt;repository<span class="string">&gt;</span></div><div class="line"><span class="attr">  branch:</span> master</div></pre></td></tr></table></figure>
<h2 id="Deploy-to-Github"><a href="#Deploy-to-Github" class="headerlink" title="Deploy to Github"></a>Deploy to Github</h2><p>When you are ready to deploy your blog to the Github, run the following commands to generate your blog and deploy it to the specified branch in your Github repository as you setup before.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>Now that you have your generated blog on Github, you can configure and connect your custom domain to load your blog from Github.</p>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;justify&quot;&gt;&lt;br&gt;This tutorial covers how you can enhance your Hexo blog. If you have not yet create it, you might want to check out the &lt;a href=&quot;/2016/08/hexo-quick-start/&quot;&gt;quick start&lt;/a&gt; with Hexo, otherwise let’s go through a few essential plug-ins that might leverage your blog’s usability very briefly. You can find the detailed list of plug-ins &lt;a href=&quot;https://hexo.io/plug-ins/&quot;&gt;here&lt;/a&gt;.&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://truelogician.com/categories/Hexo/"/>
    
      <category term="Plugins" scheme="http://truelogician.com/categories/Hexo/Plugins/"/>
    
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
      <category term="Hexo" scheme="http://truelogician.com/tags/Hexo/"/>
    
      <category term="Blogging" scheme="http://truelogician.com/tags/Blogging/"/>
    
      <category term="StaticWebsite" scheme="http://truelogician.com/tags/StaticWebsite/"/>
    
  </entry>
  
  <entry>
    <title>Creating a Blog by Hexo</title>
    <link href="http://truelogician.com/2016/hexo-quick-start/"/>
    <id>http://truelogician.com/2016/hexo-quick-start/</id>
    <published>2016-07-14T19:55:50.000Z</published>
    <updated>2016-09-07T13:20:57.000Z</updated>
    
    <content type="html"><![CDATA[<div align="justify"><br>Have you ever wished you could create your own blog in no time? Did you get frustrated as you thought you might not have enough time to design and set it up? Do you also wish to have more control over your blog comparing to other blogs such as those in WordPress?<br></div>

<a id="more"></a>
<p>Well, that was exactly the case for me and if it’s the same for you, then give “static site generators” a go. </p>
<h3 id="What-is-a-“Static-Site-Generator”"><a href="#What-is-a-“Static-Site-Generator”" class="headerlink" title="What is a “Static Site Generator”?"></a>What is a “Static Site Generator”?</h3><p>In short, a static site generator is basically a HTML file generator. It crates and formats HTML files by using its template engine as well as your text which is usually in a format such as markdown.</p>
<p>Static site generators are very much easy to setup and use while providing users with more control over it. You can choose and heavily customize themes, choose among plenty of plug-ins and finally host your website on Github pages for free. </p>
<h3 id="What-is-Hexo"><a href="#What-is-Hexo" class="headerlink" title="What is Hexo?"></a><a href="https://hexo.io/docs/" target="_blank" rel="external">What is Hexo?</a></h3><p>According to Hexo’s documentation, <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> is a fast, simple and powerful blog framework. You write posts in Markdown (or other languages) and Hexo generates static files with a beautiful theme in seconds.</p>
<p>-Alright, now let’s dive in.</p>
<h2 id="Installing-Hexo"><a href="#Installing-Hexo" class="headerlink" title="Installing Hexo"></a>Installing Hexo</h2><p>Before installing hexo, use your OS package manager to update and cleanup system packages.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew update --all &amp;&amp; brew upgrade --all &amp;&amp; brew cleanup &amp;&amp; brew doctor &amp;&amp; brew prune</div></pre></td></tr></table></figure>
<h2 id="Install-Node-js"><a href="#Install-Node-js" class="headerlink" title="Install Node.js"></a>Install Node.js</h2><p>Hexo is a node.js package. As a result, we first need to install the node.js in case it’s not.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install node</div></pre></td></tr></table></figure>
<p>On Linux machines, the procedure is similar with the distro’s package manager. On Windows machines, please refer to this <a href="https://nodejs.org/en/download/" target="_blank" rel="external">page</a> for download. </p>
<p>npm is the default package manager of the node.js. In case you have had the node installed for some time, make an update and clean the previously installed packages. We will later on use npm to install all the required packages in our blog.  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm update &amp;&amp; npm upgrade &amp;&amp; npm cache clean</div></pre></td></tr></table></figure>
<p>Now, we can actually install the Hexo package.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cli -g</div></pre></td></tr></table></figure>
<h2 id="Creating-Your-First-Blog"><a href="#Creating-Your-First-Blog" class="headerlink" title="Creating Your First Blog"></a>Creating Your First Blog</h2><p>Now, in order to create a blog, goto a directory in which you want to create a blog.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init blog</div></pre></td></tr></table></figure>
<p>After the blog directory is created, change directory (cd) to the created folder and download all the node modules we need to run and manage our blog.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> blog</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<h2 id="Running-Your-Blog-server"><a href="#Running-Your-Blog-server" class="headerlink" title="Running Your Blog server"></a>Running Your Blog server</h2><p>Now let’s clean (<em>not needed for the first time but it’s a good practice</em>), generate and run the blog on a node server on the default port 4000. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server</div></pre></td></tr></table></figure>
<p>You can now <a href="http://localhost:4000" target="_blank" rel="external">view your blog</a> locally on your browser.</p>
<h2 id="Creating-Post-Page-or-Draft"><a href="#Creating-Post-Page-or-Draft" class="headerlink" title="Creating Post, Page or Draft"></a>Creating Post, Page or Draft</h2><p>In order to create more posts, you simply need to create .md files within your _posts folder. Additionally, Hexo also provides the following sugar coated commands to create a post, page or draft.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My Post"</span></div><div class="line">$ hexo new post <span class="string">"My Post"</span></div><div class="line">$ hexo new page <span class="string">"About Me"</span></div><div class="line">$ hexo new draft <span class="string">"My Post"</span></div></pre></td></tr></table></figure>
<p>Now that you have a post, open it in your favorite editor and write your content in <a href="https://en.wikipedia.org/wiki/Markdown" target="_blank" rel="external">markdown</a> language. Having a <a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet" target="_blank" rel="external">cheat sheet</a> at your disposal is also a good idea while you are writing in Markdown. </p>
<p>At this point you have a working blog (<em>with the default theme</em>). You might want to apply and customize a different theme. Hexo provides a handful of <a href="https://hexo.io/themes/" target="_blank" rel="external">themes</a> on their website that you can choose from. In addition to themes, plenty of plug-ins are also available for hexo that can totally enhance your blog and your reader’s experience form it. </p>
<p>So, if you still eager about improving your blog and connect a couple of useful plug-ins, read further on the <a href="/2016/hexo-install-plugins/">next section</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;justify&quot;&gt;&lt;br&gt;Have you ever wished you could create your own blog in no time? Did you get frustrated as you thought you might not have enough time to design and set it up? Do you also wish to have more control over your blog comparing to other blogs such as those in WordPress?&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://truelogician.com/categories/Hexo/"/>
    
      <category term="Startup" scheme="http://truelogician.com/categories/Hexo/Startup/"/>
    
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
      <category term="Hexo" scheme="http://truelogician.com/tags/Hexo/"/>
    
      <category term="Blogging" scheme="http://truelogician.com/tags/Blogging/"/>
    
      <category term="StaticWebsite" scheme="http://truelogician.com/tags/StaticWebsite/"/>
    
  </entry>
  
  <entry>
    <title>Introduction to Akka</title>
    <link href="http://truelogician.com/2014/introduction-to-akka/"/>
    <id>http://truelogician.com/2014/introduction-to-akka/</id>
    <published>2014-06-12T19:21:34.000Z</published>
    <updated>2016-08-31T11:07:35.000Z</updated>
    
    <content type="html"><![CDATA[<div align="justify"><br>The following intends to provide a brief introduction to Akka which is framework based on the actor model and designed to increase the abstraction, scalability and fault-tolerance of systems. It provides a platform enabling developers to easily create concurrent and loosely coupled applications with the ability of self-healing in the face of failures.<br></div>

<a id="more"></a>
<h3 id="Typical-Problems-of-Complex-Systems"><a href="#Typical-Problems-of-Complex-Systems" class="headerlink" title="Typical Problems of Complex Systems"></a>Typical Problems of Complex Systems</h3><p>Below is mentioned a few of the more important problems and issues that need to be addressed when dealing with more complex systems:</p>
<ul>
<li>Threads tend to need a lot of coordination logic, locks and synchronizations.</li>
<li>The amount of threads to be used within an application is limited.</li>
<li>It is usually hard to scale up, scale out, deploy and run the complex applications.</li>
<li>Creating fault tolerant applications that can recover form errors is tedious.</li>
<li>It is cumbersome to modify applications and systems with load balancing.</li>
</ul>
<h3 id="How-Akka-Addresses-the-Issues"><a href="#How-Akka-Addresses-the-Issues" class="headerlink" title="How Akka Addresses the Issues?"></a>How Akka Addresses the Issues?</h3><p>Alright, now that we know some of the top issues, let’s also mention a few key notes about what Akka has to offer in general and what it brings to the table to address them. </p>
<ul>
<li>Akka pushes the burden of low-level thread management and thread-safe code to the actor model.</li>
<li>The use of actor model also makes Akka to be aligned with reactive manifesto which improves applications in the following terms:<ul>
<li><strong>Message-Driven:</strong><br>Asynchronous message passing decreases coupling and provides location transparency for system components.</li>
<li><strong>Resilience:</strong><br>Akka enforces single responsibility through component isolation (<em>actors</em>).</li>
<li><strong>Elasticity:</strong><br>As systems scale, they will still be able to handle various workloads. In addition, actors can be increased in amount where they are exactly needed and they also can divide the workload among themselves.</li>
<li><strong>Responsiveness:</strong><br>Loose coupling, Resilience and Elasticity will make the system responsive.</li>
</ul>
</li>
<li>The increases in abstraction and loose coupling will also result into:<ul>
<li>Reduction in use of shared states among components.</li>
<li>Increase in CPU utilization.</li>
<li>Increase in capability to scale up and out.</li>
<li>Increasing system fault-tolerance.</li>
</ul>
</li>
</ul>
<h3 id="So-What-is-an-Actor"><a href="#So-What-is-an-Actor" class="headerlink" title="So, What is an Actor?"></a>So, What is an Actor?</h3><p><strong>Definition:</strong> <em>an actor is a fundamental primitive unit of computation or work which basically means that they are designed to perform small, simple and well-defined tasks.</em></p>
<p>In order to better imagine and understand what an actor is, let’s start getting to know about their behavior and attributes.</p>
<ul>
<li>Each actor has a unique address and hence location transparent.</li>
<li>Each actor has a mailbox (queue of messages), state and behavior.</li>
<li>Actors are very lightweight (2.7 Million per 1GB of RAM).</li>
<li>They are formed in hierarchies/trees (parent child relationship).</li>
<li>They can live and communicate on different machines.</li>
<li>They can create child actors.</li>
<li>They can heal their children.</li>
<li>They can supervise their children.</li>
<li>They can change their behavior.</li>
<li>They only communicate with one or more actors via message passing.</li>
<li>They can only handle one message at a time.</li>
<li>They can decide what to do with the message.</li>
<li>Their states are only known by querying them (sending messages).</li>
</ul>
<p><strong>Note:</strong> <em>The fact that actors come in hierarchies and that they can heal their children can really help developers push the risky and error-prone logic to child actors (or leaves); Therefore, as soon as a child dies, its parent is notified and supervises it accordingly.</em></p>
<h3 id="What-is-an-Actor-System-node"><a href="#What-is-an-Actor-System-node" class="headerlink" title="What is an Actor-System (node)?"></a>What is an Actor-System (node)?</h3><p>A node or an actor-system groups several actors and thus, an instance of it can contain one or more actors. According to this definition, we can now have local or remote actors. </p>
<p>Let’s say actor “a” lives on actor-system “X”; in this case:</p>
<p><strong>Local Actor:</strong> An actor “b” is local to actor “a”, if “b” lives on the same actor-system as “a” (meaning actor-system “X”). </p>
<p><strong>Remote Actor:</strong> An actor “b” is remote to actor “a”, if “b” lives on a different actor-system (let’s say actor-system “Y”). Also note that actor-system “Y” might be located on the same or a separate machine.</p>
<p>Using addresses, an actor in one actor-system can send messages to local actor or remote actors. </p>
<p>The address of an actor follows the format below and consists of these parts.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[protocol]://[actor-system]@[hostname]:[port]</div></pre></td></tr></table></figure>
<h3 id="Details-of-Actors-Actions"><a href="#Details-of-Actors-Actions" class="headerlink" title="Details of Actors Actions"></a>Details of Actors Actions</h3><ul>
<li><strong>Creating Actor:</strong><ul>
<li>With a name and certain properties (called props), actors can create other child actors.</li>
</ul>
</li>
<li><strong>Sending Messages:</strong><ul>
<li>An actor can send message to a local or remote actor.</li>
<li>Passing messages among actors are async and non-blocking (Fire &amp; Forget).</li>
<li>Actors are totally inactive/passive until they receive a message.</li>
<li>Actors can handle throughput of 50 million messages per second per machine.</li>
<li>The order of messages are maintained the same for sender and receiver.</li>
</ul>
</li>
<li><strong>Changing Behavior:</strong><ul>
<li>An actor can change its behavior at runtime.</li>
<li>This change in behavior is triggered after receiving a message.</li>
</ul>
</li>
<li><strong>Supervising Children:</strong><ul>
<li>Actors can supervise their child actors.</li>
<li>Child actors send failure signal and the parent instruct them what to do.<ul>
<li>The child does not need to know how to handle the error.</li>
</ul>
</li>
<li>Actors can supervise their children even over separate physical nodes.</li>
<li>There are several error supervising strategies they can pick from.<ul>
<li>these strategies basically indicate what to do if a child fails in general or of a certain event.</li>
<li>The strategy options are: resume / restart / escalate</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>Note:</strong> <em>In Akka, the message transport and the message delivery are completely separated processes. Akka uses concurrent-linked-queue as the mailbox, however one can define what message queue to use either per actor or per actor-system (node). Its also possible to use broker and let broker handle messaging.</em></p>
<h3 id="Properties-of-an-Akka-Message"><a href="#Properties-of-an-Akka-Message" class="headerlink" title="Properties of an Akka Message"></a>Properties of an Akka Message</h3><p>An Akka message is a simple <em>immutable</em> data container defined by user and is created and passed asynchronously among actors. Akka messages also aligned with the definition of a message in reactive manifesto.</p>
<blockquote>
<p>A message is an item of data that is sent to a specific destination. In a message driven system, addressable recipients await the arrival of messages and react to them, otherwise lying dormant (<a href="http://www.reactivemanifesto.org/glossary\#Message-Driven" target="_blank" rel="external">Reactive Manifesto</a>).</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;justify&quot;&gt;&lt;br&gt;The following intends to provide a brief introduction to Akka which is framework based on the actor model and designed to increase the abstraction, scalability and fault-tolerance of systems. It provides a platform enabling developers to easily create concurrent and loosely coupled applications with the ability of self-healing in the face of failures.&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Software Architecture" scheme="http://truelogician.com/categories/Software-Architecture/"/>
    
      <category term="Akka" scheme="http://truelogician.com/categories/Software-Architecture/Akka/"/>
    
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
      <category term="Akka" scheme="http://truelogician.com/tags/Akka/"/>
    
      <category term="Distributed-Systems" scheme="http://truelogician.com/tags/Distributed-Systems/"/>
    
      <category term="Actor Model" scheme="http://truelogician.com/tags/Actor-Model/"/>
    
  </entry>
  
  <entry>
    <title>Mediator Pattern</title>
    <link href="http://truelogician.com/2013/mediator/"/>
    <id>http://truelogician.com/2013/mediator/</id>
    <published>2013-08-18T05:04:36.000Z</published>
    <updated>2016-09-15T03:47:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><strong>Provide an Interaction-Contract object Called Mediator for a Group of Colleagues/components.</strong> <em>Centralize Communications Among Colleagues/components Without Them Knowing Even About Each Other’s Existence. In Other Words, Centralize Complex Communications and Control Between Related Objects.</em></p>
<a id="more"></a>
<h3 id="Recipe"><a href="#Recipe" class="headerlink" title="Recipe"></a>Recipe</h3><ul>
<li>The ‘Mediator’ definition which is actually a “Contract of Interaction”<ul>
<li>It could keep a collection of components/colleagues to communicate their interactions.</li>
<li>Behaviors could also accept a reference to the requester to enhance the logic.</li>
<li>Behaviors could define as much arguments as required for implementation.</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> </span>&#123;</div><div class="line">    <span class="comment">/*optionally maintaining a collection of colleagues*/</span></div><div class="line">    Collection&lt;Colleague&gt; colleagues;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Colleague colleague)</span> </span>&#123;<span class="comment">/*  add to colleagues   */</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rem</span><span class="params">(Colleague colleague)</span> </span>&#123;<span class="comment">/*remove from colleagues*/</span>&#125;</div><div class="line"></div><div class="line">    <span class="comment">/*defining 'requester' argument is also arbitrary*/</span></div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">(Colleague requester<span class="comment">/*, args */</span>)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">(Colleague requester<span class="comment">/*, args */</span>)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operation3</span><span class="params">(Colleague requester<span class="comment">/*, args */</span>)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operation4</span><span class="params">(Colleague requester<span class="comment">/*, args */</span>)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Concrete implementations of mediator.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MediatorX</span> <span class="keyword">extends</span> <span class="title">Mediator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation1</span><span class="params">(Colleague requester<span class="comment">/*, args */</span>)</span></span></div><div class="line">    &#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation2</span><span class="params">(Colleague requester<span class="comment">/*, args */</span>)</span></span></div><div class="line">    &#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation3</span><span class="params">(Colleague requester<span class="comment">/*, args */</span>)</span></span></div><div class="line">    &#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation4</span><span class="params">(Colleague requester<span class="comment">/*, args */</span>)</span></span></div><div class="line">    &#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MediatorY</span> <span class="keyword">extends</span> <span class="title">Mediator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation1</span><span class="params">(Colleague requester<span class="comment">/*, args */</span>)</span></span></div><div class="line">    &#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation2</span><span class="params">(Colleague requester<span class="comment">/*, args */</span>)</span></span></div><div class="line">    &#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation3</span><span class="params">(Colleague requester<span class="comment">/*, args */</span>)</span></span></div><div class="line">    &#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation4</span><span class="params">(Colleague requester<span class="comment">/*, args */</span>)</span></span></div><div class="line">    &#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>The Colleague/Component concept and concrete implementations.</li>
<li>Note that a colleagues has a reference to the mediator to delegate its activities.<ul>
<li>Can also be designed in a way to set/change their mediators at runtime.</li>
</ul>
</li>
<li>Remember to pull up identical method implementations from concrete classes.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">    Mediator mediator;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setMediator</span><span class="params">(Mediator mediator)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mediator = mediator;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColleagueA</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">    <span class="comment">/*colleague delegates its actions to the mediator*/</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action1</span><span class="params">()</span> </span>&#123; mediator.operation1(<span class="keyword">this</span>); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action2</span><span class="params">()</span> </span>&#123; mediator.operation2(<span class="keyword">this</span>); &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColleagueB</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">    <span class="comment">/*colleague delegates its actions to the mediator*/</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action3</span><span class="params">()</span> </span>&#123; mediator.operation3(<span class="keyword">this</span>); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action4</span><span class="params">()</span> </span>&#123; mediator.operation4(<span class="keyword">this</span>); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Serve"><a href="#Serve" class="headerlink" title="Serve"></a>Serve</h3><p>Now that the mediator and colleagues are defined, it only suffices to:</p>
<ul>
<li>Introduce mediator to colleagues.</li>
<li>Introduce colleagues to mediator.</li>
<li>Ask colleagues for their provided behaviors.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        Mediator mediatorX = <span class="keyword">new</span> MediatorX();</div><div class="line">        ColleagueA a1 = <span class="keyword">new</span> ColleagueA();</div><div class="line">        ColleagueA a2 = <span class="keyword">new</span> ColleagueA();</div><div class="line">        ColleagueB b1 = <span class="keyword">new</span> ColleagueB();</div><div class="line">        ColleagueB b2 = <span class="keyword">new</span> ColleagueB();</div><div class="line"></div><div class="line">        <span class="comment">/*introduce mediator to colleagues*/</span></div><div class="line">        a1.setMediator(mediatorX);</div><div class="line">        a1.setMediator(mediatorX);</div><div class="line">        b1.setMediator(mediatorX);</div><div class="line">        b2.setMediator(mediatorX);</div><div class="line">        <span class="comment">/*introduce colleagues to mediator*/</span></div><div class="line">        mediatorX.add(a1);</div><div class="line">        mediatorX.add(a2);</div><div class="line">        mediatorX.add(b1);</div><div class="line">        mediatorX.add(b2);</div><div class="line"></div><div class="line">        a1.action2();</div><div class="line">        a2.action1();</div><div class="line">        b1.action4();</div><div class="line">        b2.action3();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Important-Benefits"><a href="#Important-Benefits" class="headerlink" title="Important Benefits"></a>Important Benefits</h3><ul>
<li>Mediator promotes loose coupling by:<ul>
<li>Keeping objects from referring to each other explicitly</li>
<li>Encapsulating the interaction and communication.</li>
</ul>
</li>
<li>It allows modifications to colleagues interaction independently.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Based on the logic, the mediator can contain a collection of colleagues used as part of the logic (<a href="http://www.journaldev.com/1730/mediator-design-pattern-java" target="_blank" rel="external">example</a>), however in the following example, for the sake of clarity and stressing more on the role of mediators and colleagues, we will skip maintaining such list.</p>
<p>Suppose you’re about to write a module to provide joystick functionalities for a few games; in a way that a set of different controller devices can be connected to a various games, enabling players to play them.</p>
<p>Accordingly, let’s first define the game base functionalities and their implementations in each specific game.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMediator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fire</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">forward</span><span class="params">(<span class="keyword">double</span> intensity)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">backward</span><span class="params">(<span class="keyword">double</span> intensity)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">(<span class="keyword">double</span> intensity)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">right</span><span class="params">(<span class="keyword">double</span> intensity)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quit</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NeedForSpeed</span> <span class="keyword">implements</span> <span class="title">IMediator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fire</span><span class="params">()</span> </span>&#123;<span class="comment">/*activate nitro mode*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">forward</span><span class="params">(<span class="keyword">double</span> intensity)</span> </span>&#123;<span class="comment">/*speed up*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">backward</span><span class="params">(<span class="keyword">double</span> intensity)</span> </span>&#123;<span class="comment">/*slow down*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">(<span class="keyword">double</span> intensity)</span>  </span>&#123;<span class="comment">/*turn wheel left*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">right</span><span class="params">(<span class="keyword">double</span> intensity)</span> </span>&#123;<span class="comment">/*turn wheel right*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quit</span><span class="params">()</span> </span>&#123;<span class="comment">/*quit game*/</span>&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CallOfDuty</span> <span class="keyword">implements</span> <span class="title">IMediator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fire</span><span class="params">()</span> </span>&#123;<span class="comment">/*fire current weapon*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">forward</span><span class="params">(<span class="keyword">double</span> intensity)</span> </span>&#123;<span class="comment">/*move forward*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">backward</span><span class="params">(<span class="keyword">double</span> intensity)</span> </span>&#123;<span class="comment">/*move backward*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">(<span class="keyword">double</span> intensity)</span>  </span>&#123;<span class="comment">/*move left*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">right</span><span class="params">(<span class="keyword">double</span> intensity)</span> </span>&#123;<span class="comment">/*move right*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quit</span><span class="params">()</span> </span>&#123;<span class="comment">/*quit game*/</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The colleagues are the controller devices to be connected to games later on.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">    IMediator mediator;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setMediator</span><span class="params">(IMediator mediator)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mediator = mediator;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RightTrigger</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">press</span><span class="params">()</span> </span>&#123; mediator.fire(); &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LeftBumper</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">press</span><span class="params">()</span> </span>&#123; mediator.quit(); &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DPad</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">double</span> intensity)</span> </span>&#123; mediator.forward(intensity); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">double</span> intensity)</span> </span>&#123; mediator.backward(intensity); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">right</span><span class="params">(<span class="keyword">double</span> intensity)</span> </span>&#123; mediator.left(intensity); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">(<span class="keyword">double</span> intensity)</span> </span>&#123; mediator.right(intensity); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Now that games and controllers are ready:</p>
<ul>
<li>Instantiate controllers and a game.</li>
<li>Assign controllers to a specific game.</li>
<li>Use controllers to play.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        DPad dPad = <span class="keyword">new</span> DPad();</div><div class="line">        RightTrigger fire = <span class="keyword">new</span> RightTrigger();</div><div class="line">        LeftBumper quit = <span class="keyword">new</span> LeftBumper();</div><div class="line"></div><div class="line">        IMediator callOfDuty = <span class="keyword">new</span> CallOfDuty();</div><div class="line"></div><div class="line">        dPad.setMediator(callOfDuty);</div><div class="line">        fire.setMediator(callOfDuty);</div><div class="line">        quit.setMediator(callOfDuty);</div><div class="line"></div><div class="line">        dPad.up(<span class="number">2.2</span>);</div><div class="line">        dPad.up(<span class="number">2.2</span>);</div><div class="line">        dPad.up(<span class="number">8.9</span>);</div><div class="line">        fire.press();</div><div class="line">        fire.press();</div><div class="line">        dPad.left(<span class="number">3</span>);</div><div class="line">        quit.press();</div><div class="line"></div><div class="line">        <span class="comment">/*let's change the game*/</span></div><div class="line">        IMediator needForSpeed = <span class="keyword">new</span> NeedForSpeed();</div><div class="line"></div><div class="line">        dPad.setMediator(needForSpeed);</div><div class="line">        fire.setMediator(needForSpeed);</div><div class="line">        quit.setMediator(needForSpeed);</div><div class="line"></div><div class="line">        dPad.up(<span class="number">9.3</span>);</div><div class="line">        dPad.up(<span class="number">9.6</span>);</div><div class="line">        dPad.up(<span class="number">9.9</span>);</div><div class="line">        fire.press();</div><div class="line">        dPad.left(<span class="number">4</span>);</div><div class="line">        dPad.right(<span class="number">1</span>);</div><div class="line">        quit.press();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2010/design-patterns&quot;&gt;Design Patterns Overview&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Provide an Interaction-Contract object Called Mediator for a Group of Colleagues/components.&lt;/strong&gt; &lt;em&gt;Centralize Communications Among Colleagues/components Without Them Knowing Even About Each Other’s Existence. In Other Words, Centralize Complex Communications and Control Between Related Objects.&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Software Architecture" scheme="http://truelogician.com/categories/Software-Architecture/"/>
    
      <category term="Design Patterns" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/"/>
    
      <category term="Types" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"/>
    
      <category term="Behavioral" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Behavioral/"/>
    
    
      <category term="Design-Patterns" scheme="http://truelogician.com/tags/Design-Patterns/"/>
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
  </entry>
  
  <entry>
    <title>Interpreter Pattern</title>
    <link href="http://truelogician.com/2013/interpreter/"/>
    <id>http://truelogician.com/2013/interpreter/</id>
    <published>2013-07-03T17:15:28.000Z</published>
    <updated>2016-09-13T20:18:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><strong>Map, Translate or Interpret a Given Data Into Different Formats.</strong> <em>It Converts One Representation of Data to Another; Very Much Like a Language Interpreter.</em></p>
<a id="more"></a>
<p>This piece of data that is interpreted to different representations is called ‘Context’.</p>
<h3 id="Recipe"><a href="#Recipe" class="headerlink" title="Recipe"></a>Recipe</h3><ul>
<li>The definition of ‘Expression’.<ul>
<li>An expression contains methods to interpret a given ‘Context’ to other expressions.</li>
<li>Note that ‘Context’ is of type ‘Object’ but it’s type or definition is arbitrary.</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Expression</span> </span>&#123;</div><div class="line">    <span class="function">Object <span class="title">toExpA</span><span class="params">(Object context)</span></span>;</div><div class="line">    <span class="function">Object <span class="title">toExpB</span><span class="params">(Object context)</span></span>;</div><div class="line">    <span class="function">Object <span class="title">toExpC</span><span class="params">(Object context)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Concrete expressions.<br>Note that methods ‘toExpA’, ‘toExpB’ and ‘toExpC’ do not return an object of type ‘ExpA’, ‘ExpB’ or ‘ExpC’, since expressions are merely converters.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExpA</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</div><div class="line">    <span class="function">Object <span class="title">toExpA</span><span class="params">(Object context)</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function">Object <span class="title">toExpB</span><span class="params">(Object context)</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function">Object <span class="title">toExpC</span><span class="params">(Object context)</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExpB</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</div><div class="line">    <span class="function">Object <span class="title">toExpA</span><span class="params">(Object context)</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function">Object <span class="title">toExpB</span><span class="params">(Object context)</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function">Object <span class="title">toExpC</span><span class="params">(Object context)</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExpC</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</div><div class="line">    <span class="function">Object <span class="title">toExpA</span><span class="params">(Object context)</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function">Object <span class="title">toExpB</span><span class="params">(Object context)</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function">Object <span class="title">toExpC</span><span class="params">(Object context)</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Serve"><a href="#Serve" class="headerlink" title="Serve"></a>Serve</h3><p>Now that it’s possible to convert every expression to one another, the client only needs to create a context that can be interpreted by an expression and pass it along to end up with a different format.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        Object contextA = <span class="keyword">new</span> Object();</div><div class="line">        Object contextB = <span class="keyword">new</span> Object();</div><div class="line">        Object contextC = <span class="keyword">new</span> Object();</div><div class="line">        Object formatA, formatB, formatC;</div><div class="line"></div><div class="line">        formatB = <span class="keyword">new</span> ExpA().toExpB(contextA);</div><div class="line">        formatC = <span class="keyword">new</span> ExpA().toExpC(contextA);</div><div class="line"></div><div class="line">        formatA = <span class="keyword">new</span> ExpB().toExpA(contextB);</div><div class="line">        formatC = <span class="keyword">new</span> ExpB().toExpC(contextB);</div><div class="line"></div><div class="line">        formatA = <span class="keyword">new</span> ExpC().toExpA(contextC);</div><div class="line">        formatB = <span class="keyword">new</span> ExpC().toExpB(contextC);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Important-Benefits"><a href="#Important-Benefits" class="headerlink" title="Important Benefits"></a>Important Benefits</h3><p>This pattern provides a framework for interpretation of the data or complex grammar along with abstraction and loose coupling.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Suppose you are responsible for writing a module which is responsible for translating and forwarding messages sent by these services. For instance, if the module receives a XML SOAP request, it shall translate it to a simple TCP request and send it to the TCP server.<br>These services consist of:</p>
<ul>
<li>A REST service.</li>
<li>A TCP server.</li>
<li>A SOAP service.</li>
</ul>
<p>There is also a logger to log the events in Json format.</p>
<ul>
<li>The ‘Expression’ interface contains all kinds of desired conversions.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Expression</span> </span>&#123;</div><div class="line">    <span class="function">Object <span class="title">toBytes</span><span class="params">(Object context)</span></span>;</div><div class="line">    <span class="function">String <span class="title">toXml</span><span class="params">(Object context)</span></span>;</div><div class="line">    <span class="function">String <span class="title">toUri</span><span class="params">(Object context)</span></span>;</div><div class="line">    <span class="function">String <span class="title">toJson</span><span class="params">(Object context)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Each concrete expression assumes receiving a ‘Context’ of its type and implement conversion to other formats.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">XmlExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</div><div class="line">    <span class="keyword">byte</span>[] toBytes(Object context) &#123; <span class="keyword">return</span> <span class="comment">/*from xml to byte[]*/</span>; &#125;</div><div class="line">    <span class="function">String <span class="title">toXml</span><span class="params">(Object context)</span> </span>&#123; <span class="keyword">return</span> (String) context; &#125;</div><div class="line">    <span class="function">String <span class="title">toUri</span><span class="params">(Object context)</span> </span>&#123; <span class="keyword">return</span> <span class="comment">/*from xml to uri*/</span>; &#125;</div><div class="line">    <span class="function">String <span class="title">toJson</span><span class="params">(Object context)</span> </span>&#123; <span class="keyword">return</span> <span class="comment">/*from xml to json*/</span>; &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UriExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</div><div class="line">    <span class="keyword">byte</span>[] toBytes(Object context) &#123; <span class="keyword">return</span> <span class="comment">/*from uri to byte[]*/</span>; &#125;</div><div class="line">    <span class="function">String <span class="title">toXml</span><span class="params">(Object context)</span> </span>&#123; <span class="keyword">return</span> <span class="comment">/*from uri to xml*/</span>; &#125;</div><div class="line">    <span class="function">String <span class="title">toUri</span><span class="params">(Object context)</span> </span>&#123; <span class="keyword">return</span> (String) context; &#125;</div><div class="line">    <span class="function">String <span class="title">toJson</span><span class="params">(Object context)</span> </span>&#123; <span class="keyword">return</span> <span class="comment">/*from uri to json*/</span>; &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</div><div class="line">    <span class="keyword">byte</span>[] toBytes(Object context) &#123; <span class="keyword">return</span> <span class="comment">/*from json to byte[]*/</span>; &#125;</div><div class="line">    <span class="function">String <span class="title">toXml</span><span class="params">(Object context)</span> </span>&#123; <span class="keyword">return</span> <span class="comment">/*from json to xml*/</span>; &#125;</div><div class="line">    <span class="function">String <span class="title">toUri</span><span class="params">(Object context)</span> </span>&#123; <span class="keyword">return</span> <span class="comment">/*from json to uri*/</span>; &#125;</div><div class="line">    <span class="function">String <span class="title">toJson</span><span class="params">(Object context)</span> </span>&#123; <span class="keyword">return</span> (String) context; &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BytesExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</div><div class="line">    <span class="keyword">byte</span>[] toBytes(Object context) &#123; <span class="keyword">return</span> (<span class="keyword">byte</span>[]) context; &#125;</div><div class="line">    <span class="function">String <span class="title">toXml</span><span class="params">(Object context)</span> </span>&#123; <span class="keyword">return</span> <span class="comment">/*from byte[] to xml*/</span>; &#125;</div><div class="line">    <span class="function">String <span class="title">toUri</span><span class="params">(Object context)</span> </span>&#123; <span class="keyword">return</span> <span class="comment">/*from byte[] to uri*/</span>; &#125;</div><div class="line">    <span class="function">String <span class="title">toJson</span><span class="params">(Object context)</span> </span>&#123; <span class="keyword">return</span> <span class="comment">/*from byte[] to json*/</span>; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Lines 3-8 is when a byte stream needs to be logged and then translated to a REST resource URI.</li>
<li>Lines 10-13 is when a SOAP XML request is received and shall be logged and forwarded to the TCP server.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        <span class="keyword">byte</span>[] stream = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">        <span class="comment">// log json presentation of the stream content</span></div><div class="line">        Logger.log(<span class="keyword">new</span> BytesExpression().toJson(stream));</div><div class="line">        <span class="comment">// get REST resource by uri</span></div><div class="line">        String uri = <span class="keyword">new</span> BytesExpression().toUri(stream);</div><div class="line">        WebResource resource = client.resource(uri);</div><div class="line"></div><div class="line">        String xml = <span class="string">"&lt;order&gt;&lt;item name=\"Hamlet\" /&gt;&lt;/order&gt;"</span>;</div><div class="line">        Logger.log(<span class="keyword">new</span> XmlExpression().toJson(xml));</div><div class="line">        <span class="comment">// send xml data to a TCP sever as byte[]</span></div><div class="line">        tcpClient.send(<span class="keyword">new</span> XmlExpression().toBytes(xml));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2010/design-patterns&quot;&gt;Design Patterns Overview&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Map, Translate or Interpret a Given Data Into Different Formats.&lt;/strong&gt; &lt;em&gt;It Converts One Representation of Data to Another; Very Much Like a Language Interpreter.&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Software Architecture" scheme="http://truelogician.com/categories/Software-Architecture/"/>
    
      <category term="Design Patterns" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/"/>
    
      <category term="Types" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"/>
    
      <category term="Behavioral" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Behavioral/"/>
    
    
      <category term="Design-Patterns" scheme="http://truelogician.com/tags/Design-Patterns/"/>
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
  </entry>
  
  <entry>
    <title>Chain of Responsibility Pattern</title>
    <link href="http://truelogician.com/2013/chain/"/>
    <id>http://truelogician.com/2013/chain/</id>
    <published>2013-05-03T17:15:28.000Z</published>
    <updated>2016-09-11T22:08:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><strong>Pass a Product to a Chain of Processors and Each Will Do Its Job.</strong></p>
<a id="more"></a>
<h3 id="Recipe"><a href="#Recipe" class="headerlink" title="Recipe"></a>Recipe</h3><ul>
<li>Define your ‘Product’ how ever you want.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div></pre></td></tr></table></figure>
<ul>
<li>A chain is created out of links which satisfy at least 2 basic behaviors.<ul>
<li>They can process a given ‘Product’ object.</li>
<li>They know about the next link in the chain.</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ILink</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(Product product)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setNextLink</span><span class="params">(ILink link)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Now let’s define a few links for our chain; each of which might or might not process the passed product.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkA</span> <span class="keyword">implements</span> <span class="title">ILink</span> </span>&#123;</div><div class="line">    ILink nextLink;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextLink</span><span class="params">(ILink link)</span> </span>&#123; nextLink = link; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Product product)</span> </span>&#123;</div><div class="line">        <span class="comment">/* perform process 'A' on the product. or not! */</span></div><div class="line">        <span class="keyword">if</span> (nextLink != <span class="keyword">null</span>) nextLink.process(product);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkB</span> <span class="keyword">implements</span> <span class="title">ILink</span> </span>&#123;</div><div class="line">    ILink nextLink;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextLink</span><span class="params">(ILink link)</span> </span>&#123; nextLink = link; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Product product)</span> </span>&#123;</div><div class="line">        <span class="comment">/* perform process 'B' on the product. or not! */</span></div><div class="line">        <span class="keyword">if</span> (nextLink != <span class="keyword">null</span>) nextLink.process(product);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkC</span> <span class="keyword">implements</span> <span class="title">ILink</span> </span>&#123;</div><div class="line">    ILink nextLink;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextLink</span><span class="params">(ILink link)</span> </span>&#123; nextLink = link; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Product product)</span> </span>&#123;</div><div class="line">        <span class="comment">/* perform process 'C' on the product. or not! */</span></div><div class="line">        <span class="keyword">if</span> (nextLink != <span class="keyword">null</span>) nextLink.process(product);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Serve"><a href="#Serve" class="headerlink" title="Serve"></a>Serve</h3><p>Now that the product and the chain links exist, the client needs only to weave the links together to make a chain and pass a product to its first link.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        ILink linkA = <span class="keyword">new</span> LinkA();</div><div class="line">        ILink linkB = <span class="keyword">new</span> LinkB();</div><div class="line">        ILink linkC = <span class="keyword">new</span> LinkC();</div><div class="line"></div><div class="line">        <span class="comment">/* creating a chain by introducing</span></div><div class="line">           the next link of each link.</div><div class="line">         */</div><div class="line">        linkA.setNextLink(linkB);</div><div class="line">        linkB.setNextLink(linkC);</div><div class="line"></div><div class="line">        linkA.process(<span class="keyword">new</span> Product());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Important-Benefits"><a href="#Important-Benefits" class="headerlink" title="Important Benefits"></a>Important Benefits</h3><p>This pattern decouples commands/handlers (e.g ‘Link’) and allows them to have their own independent logic.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Suppose that you’re developing a module for the local post office to send out notifications to recipients when they receive a package. This notification message shall be sent by mail, sms and email. Accordingly our Message object could be designed as follows.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</div><div class="line">    String notificationContent;</div><div class="line">    String recipientPhone;</div><div class="line">    String recipientMail;</div><div class="line">    String recipientAddress;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The chain’s ‘Link’ interface is called ‘INotification’ and each implementation contains logic to send a message in a specific way.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">INotification</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setNext</span><span class="params">(INotification n)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">(Message message)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sms</span> <span class="keyword">implements</span> <span class="title">INotification</span> </span>&#123;</div><div class="line">    INotification next;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(INotification n)</span> </span>&#123; next = n; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(Message message)</span> </span>&#123;</div><div class="line">        <span class="comment">/* send a SMS message to the given number */</span></div><div class="line">        <span class="keyword">if</span> (next != <span class="keyword">null</span>) next.send(message);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span> <span class="keyword">implements</span> <span class="title">INotification</span> </span>&#123;</div><div class="line">    INotification next;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(INotification n)</span> </span>&#123; next = n; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(Message message)</span> </span>&#123;</div><div class="line">        <span class="comment">/* send an email to the given mail address */</span></div><div class="line">        <span class="keyword">if</span> (next != <span class="keyword">null</span>) next.send(message);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span> <span class="keyword">implements</span> <span class="title">INotification</span> </span>&#123;</div><div class="line">    INotification next;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(INotification n)</span> </span>&#123; next = n; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(Message message)</span> </span>&#123;</div><div class="line">        <span class="comment">/* print &amp; mail to the given postal address */</span></div><div class="line">        <span class="keyword">if</span> (next != <span class="keyword">null</span>) next.send(message);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The client instantiates and links the notifiers to create a chain and finally passes the message to the first link of the chain. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        INotification sms = <span class="keyword">new</span> Sms();</div><div class="line">        INotification mail = <span class="keyword">new</span> Email();</div><div class="line">        INotification post = <span class="keyword">new</span> Post();</div><div class="line"></div><div class="line">        sms.setNext(mail);</div><div class="line">        mail.setNext(post);</div><div class="line"></div><div class="line">        Message message = <span class="keyword">new</span> Message();</div><div class="line">        <span class="comment">/* set message properties to math recipient */</span></div><div class="line">        sms.send(message);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2010/design-patterns&quot;&gt;Design Patterns Overview&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Pass a Product to a Chain of Processors and Each Will Do Its Job.&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Software Architecture" scheme="http://truelogician.com/categories/Software-Architecture/"/>
    
      <category term="Design Patterns" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/"/>
    
      <category term="Types" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"/>
    
      <category term="Behavioral" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Behavioral/"/>
    
    
      <category term="Design-Patterns" scheme="http://truelogician.com/tags/Design-Patterns/"/>
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
  </entry>
  
  <entry>
    <title>State Pattern</title>
    <link href="http://truelogician.com/2013/state/"/>
    <id>http://truelogician.com/2013/state/</id>
    <published>2013-03-29T16:51:03.000Z</published>
    <updated>2016-09-09T07:59:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><strong>Change the Behavior According to the State.</strong> <em>Encapsulate State-Based Behaviors and Use Delegation to Switch Between Behaviors.</em></p>
<a id="more"></a>
<p>Using this pattern you can create a static state machine.</p>
<p><strong><em>What is a State Machine?</em></strong></p>
<p>One of the most concise definitions can be found in  <a href="http://www.oxforddictionaries.com/definition/english/state-machine" target="_blank" rel="external">Oxford Dictionaries</a> web page.</p>
<blockquote>
<p>A state machine is a device which can be in one of a set number of stable conditions depending on its previous condition and on the present values of its inputs.</p>
</blockquote>
<h3 id="Recipe"><a href="#Recipe" class="headerlink" title="Recipe"></a>Recipe</h3><ul>
<li>The definition of ‘State’. A state can be asked to make transitions to other states. The following state definition; for instance, can make up to 3 transitions.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IState</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeTransition1</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeTransition2</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeTransition3</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>The definition of a ‘StateMachine’ (aka Context). In our case it can only be in stateA or stateB.</li>
<li>Note that in order to improve code clarity I’ve grouped methods into two sets:<ul>
<li><strong>Those intended to be used by states:</strong> These methods only change the machine’s current state.</li>
<li><strong>Those intended to be used by clients:</strong> These methods ask current state for a certain transition.</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateMachine</span> </span>&#123;</div><div class="line">    IState stateA;</div><div class="line">    IState stateB;</div><div class="line"></div><div class="line">    IState currentState;</div><div class="line"></div><div class="line">    <span class="comment">/* used by client */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action1</span><span class="params">()</span> </span>&#123; currentState.makeTransition1(); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action2</span><span class="params">()</span> </span>&#123; currentState.makeTransition2(); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action3</span><span class="params">()</span> </span>&#123; currentState.makeTransition3(); &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* used by states */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">gotoStateA</span><span class="params">()</span> </span>&#123; currentState = stateA; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">gotoStateB</span><span class="params">()</span> </span>&#123; currentState = stateB; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Concrete implementations of the ‘State’.<ul>
<li>Notice that they can access the state machine on which they operate.</li>
<li>For each of their transitions, they define next state of the machine.</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateA</span> <span class="keyword">implements</span> <span class="title">IState</span> </span>&#123;</div><div class="line">    StateMachine machine;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeTransition1</span><span class="params">()</span> </span>&#123; machine.gotoStateA(); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeTransition2</span><span class="params">()</span> </span>&#123; machine.gotoStateB(); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeTransition3</span><span class="params">()</span> </span>&#123; machine.gotoStateB(); &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateB</span> <span class="keyword">implements</span> <span class="title">IState</span> </span>&#123;</div><div class="line">    StateMachine machine;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeTransition1</span><span class="params">()</span> </span>&#123; machine.gotoStateA(); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeTransition2</span><span class="params">()</span> </span>&#123; machine.gotoStateB(); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeTransition3</span><span class="params">()</span> </span>&#123; machine.gotoStateA(); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Serve"><a href="#Serve" class="headerlink" title="Serve"></a>Serve</h3><p>The state pattern client can only access the state machine’s actions. Accordingly, the machine will take over corresponding states.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        StateMachine machine = <span class="keyword">new</span> StateMachine();</div><div class="line">        machine.action3();</div><div class="line">        machine.action1();</div><div class="line">        machine.action2();</div><div class="line">        machine.action1();</div><div class="line">        machine.action2();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Important-Benefits"><a href="#Important-Benefits" class="headerlink" title="Important Benefits"></a>Important Benefits</h3><p>Creating a clean implementation of a state machine together with states and transitions.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Let’s implement the <a href="https://en.wikipedia.org/wiki/Finite-state_machine#Example:_coin-operated_turnstile" target="_blank" rel="external">Wikipedia’s example</a> of a state machine. Before going through the code take look at <a href="https://en.wikipedia.org/wiki/Finite-state_machine#/media/File:Turnstile_state_machine_colored.svg" target="_blank" rel="external">its state diagram</a> to understand the involved states and transitions.</p>
<p>According to the diagram, there are two possible transitions: inserting a coin or pushing the handle. As a result, our definition of a state will look like this:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IState</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">coin</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">State</span> <span class="keyword">implements</span> <span class="title">IState</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Turnstile machine;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">State</span><span class="params">(Turnstile machine)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.machine = machine;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Our turnstile state machine contains two states and provides appropriate methods for clients and also the states.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Turnstile</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> IState locked = <span class="keyword">new</span> Locked(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">private</span> IState unlocked = <span class="keyword">new</span> Unlocked(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> IState currentState = locked;</div><div class="line"></div><div class="line">    <span class="comment">/* used by client */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertCoin</span><span class="params">()</span> </span>&#123; currentState.coin(); &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pushHandle</span><span class="params">()</span> </span>&#123; currentState.push(); &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* used by states */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">gotoUnlocked</span><span class="params">()</span> </span>&#123; currentState = unlocked; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">gotoLocked</span><span class="params">()</span>   </span>&#123; currentState = locked;   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The locked and unlocked states both determine turnstile’s next state based on the transition.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Locked</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Locked</span><span class="params">(Turnstile machine)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(machine);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">coin</span><span class="params">()</span> </span>&#123; machine.gotoUnlocked(); &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Unlocked</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Unlocked</span><span class="params">(Turnstile machine)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(machine);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">coin</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">()</span> </span>&#123; machine.gotoLocked();  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Finally, a client can create a turnstile, invoke any of the two available behaviors and watch the state changes accordingly.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        Turnstile turnstile = <span class="keyword">new</span> Turnstile();</div><div class="line">        turnstile.pushHandle();</div><div class="line">        turnstile.insertCoin();</div><div class="line">        turnstile.pushHandle();</div><div class="line">        turnstile.pushHandle();</div><div class="line">        turnstile.insertCoin();</div><div class="line">        turnstile.pushHandle();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2010/design-patterns&quot;&gt;Design Patterns Overview&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Change the Behavior According to the State.&lt;/strong&gt; &lt;em&gt;Encapsulate State-Based Behaviors and Use Delegation to Switch Between Behaviors.&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Software Architecture" scheme="http://truelogician.com/categories/Software-Architecture/"/>
    
      <category term="Design Patterns" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/"/>
    
      <category term="Types" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"/>
    
      <category term="Behavioral" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Behavioral/"/>
    
    
      <category term="Design-Patterns" scheme="http://truelogician.com/tags/Design-Patterns/"/>
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
  </entry>
  
  <entry>
    <title>Proxy Pattern (Protection Proxy)</title>
    <link href="http://truelogician.com/2012/proxy/"/>
    <id>http://truelogician.com/2012/proxy/</id>
    <published>2012-11-09T17:11:26.000Z</published>
    <updated>2016-09-07T22:23:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><strong>Limit Access to a Sensitive Class’s Properties and Behaviors.</strong> <em>Wraps an Object In Order to Control Access to It.</em></p>
<a id="more"></a>
<p>Proxy pattern come in three variations; Remote, Virtual and Protection. Although they are the same in essence, the following introduction discusses the Protection proxy pattern. You can read more about Remote and Virtual Proxies on <a href="https://en.wikipedia.org/wiki/Proxy_pattern" target="_blank" rel="external">Wikipedia</a>.</p>
<h3 id="Recipe"><a href="#Recipe" class="headerlink" title="Recipe"></a>Recipe</h3><ul>
<li>As usual let’s start with the definition of a Product and its concrete class (<em>real object</em>).</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IProduct</span> </span>&#123;</div><div class="line">    <span class="function">Object <span class="title">getSensitiveData</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sensitiveActionA</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">normalOperationB</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> <span class="keyword">implements</span> <span class="title">IProduct</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getSensitiveData</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="comment">/*data*/</span>;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sensitiveActionA</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">normalOperationB</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Since ‘Product’ contains sensitive information, we need to define the ‘Proxy’.<ul>
<li>Only the ‘Proxy’ is exposed to the outside world.</li>
<li>It might only provide insensitive information.</li>
<li>It can restrict the use of sensitive operations.</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IProxy</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operationB</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operationC</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyProduct</span> <span class="keyword">implements</span> <span class="title">IProxy</span> </span>&#123;</div><div class="line">    Product product = <span class="keyword">new</span> Product();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationB</span><span class="params">()</span> </span>&#123;</div><div class="line">        product.normalOperationB();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationC</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">/*security conditions &amp; restrictions*/</span></div><div class="line">        product.sensitiveActionA();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Serve"><a href="#Serve" class="headerlink" title="Serve"></a>Serve</h3><p>Since the client code has only access to the ‘ProxyProduct’, it can only use the insensitive or restricted operations.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        IProxy proxy = <span class="keyword">new</span> ProxyProduct();</div><div class="line">        proxy.operationB();</div><div class="line">        proxy.operationC();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Important-Benefits"><a href="#Important-Benefits" class="headerlink" title="Important Benefits"></a>Important Benefits</h3><p>Using this pattern the sensitive class’s properties and behaviors are secured.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Suppose a software module implements a way to interact with the underlying OS. However, out of this module scope (aka package or namespace), the clients of this module shall not be able to run certain group of commands.</p>
<ul>
<li>The following is the core interaction part to which the clients have no access.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shell</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ICommand command)</span> </span>&#123;</div><div class="line">        <span class="comment">/*implementation*/</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>The Command are categorized into 2 groups of:<ul>
<li>SYS Commands: The sensitive commands that are run by clients within the scope.</li>
<li>NET Commands: The regular simple commands which can be run by all clients.</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ICommand</span> </span>&#123; <span class="function">String <span class="title">get</span><span class="params">()</span></span>; &#125;</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ISysCommand</span> <span class="keyword">extends</span> <span class="title">ICommand</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">INetCommand</span> <span class="keyword">extends</span> <span class="title">ICommand</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reboot</span> <span class="keyword">implements</span> <span class="title">ISysCommand</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">"sudo reboot"</span>; &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shutdown</span> <span class="keyword">implements</span> <span class="title">ISysCommand</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">"sudo shutdown -h now"</span>; &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ping</span> <span class="keyword">implements</span> <span class="title">INetCommand</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">"ping -c 3"</span>; &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ip</span> <span class="keyword">implements</span> <span class="title">INetCommand</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">"ifconfig eth0"</span>; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>The proxy and its concrete implementation are the only means for outside-scope clients to interact with OS.</li>
<li>The proxy, in this case, filters out all system commands.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IProxy</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(ICommand command)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShellProxy</span> <span class="keyword">implements</span> <span class="title">IProxy</span> </span>&#123;</div><div class="line">    Shell shell = <span class="keyword">new</span> Shell();</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ICommand command)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">if</span> (command <span class="keyword">instanceof</span> ISysCommand)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"cannot run system commands"</span>);</div><div class="line">        shell.run(command);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>and finally, the client code that is only allowed to execute simple networking commands.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        ShellProxy shellProxy = <span class="keyword">new</span> ShellProxy();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            shellProxy.run(<span class="keyword">new</span> Ping());</div><div class="line">            shellProxy.run(<span class="keyword">new</span> Reboot());</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            System.out.println(<span class="string">"Error: "</span> + e.getMessage());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2010/design-patterns&quot;&gt;Design Patterns Overview&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Limit Access to a Sensitive Class’s Properties and Behaviors.&lt;/strong&gt; &lt;em&gt;Wraps an Object In Order to Control Access to It.&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Software Architecture" scheme="http://truelogician.com/categories/Software-Architecture/"/>
    
      <category term="Design Patterns" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/"/>
    
      <category term="Types" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"/>
    
      <category term="Structural" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Structural/"/>
    
    
      <category term="Design-Patterns" scheme="http://truelogician.com/tags/Design-Patterns/"/>
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
  </entry>
  
  <entry>
    <title>Flyweight Pattern</title>
    <link href="http://truelogician.com/2012/flyweight/"/>
    <id>http://truelogician.com/2012/flyweight/</id>
    <published>2012-09-23T21:21:17.000Z</published>
    <updated>2016-09-06T13:55:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><strong>Improve Performance by Sharing Objects Instead of Creating Them.</strong></p>
<a id="more"></a>
<h3 id="Recipe"><a href="#Recipe" class="headerlink" title="Recipe"></a>Recipe</h3><p>Before identifying the elements for flyweight pattern, consider the following definitions:</p>
<ul>
<li><strong>Intrinsic State:</strong> A state in the object upon which we will keep a reference of that object (share the object).</li>
<li><strong>Extrinsic State:</strong> Other states of the object that are not important to your activity at all.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IProduct</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> <span class="keyword">implements</span> <span class="title">IProduct</span> </span>&#123;</div><div class="line">    Object intrinsicState;</div><div class="line">    <span class="comment">/*  extrinsic states... */</span></div><div class="line"></div><div class="line">    Product(Object intrinsicState) &#123;</div><div class="line">        <span class="keyword">this</span>.intrinsicState = intrinsicState;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>The factory where limited objects are kept and can be fetched by their intrinsic state.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductFactory</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> HashMap&lt;Object, IProduct&gt; products = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> IProduct <span class="title">create</span><span class="params">(Object intrinsicState)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!products.containsKey(intrinsicState))</div><div class="line">            products.put(intrinsicState, <span class="keyword">new</span> Product(intrinsicState));</div><div class="line">        <span class="keyword">return</span> products.get(intrinsicState);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Serve"><a href="#Serve" class="headerlink" title="Serve"></a>Serve</h3><p>The client uses the factory to either create or fetch previously created product. The client can change any extrinsic states of the <strong><em>same instance</em></strong> of the fetched product and use it as suited.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    List&lt;IProduct&gt; products = <span class="keyword">new</span> Vector&lt;&gt;();</div><div class="line"></div><div class="line">    Client() &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</div><div class="line">            Object intrinsicState = getFromLimitedIntrinsicStates();</div><div class="line">            products.add(ProductFactory.create(intrinsicState));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Important-Benefits"><a href="#Important-Benefits" class="headerlink" title="Important Benefits"></a>Important Benefits</h3><p>This pattern reduces the amount of memory consumption by sharing the objects that are similar in some way rather than creating new ones.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>A governmental application shall be put to smoke test for it’s limitations while processing massive amount of data. Your task is to create an in-memory database (Collections) with many records to make the test closer to reality. This collection does not need to contain unique items as long as it contains many of them.</p>
<p>Imagine this in-memory database table called ‘JobsTable’ that needs to be populated with at least around 100,000 ‘Job’ object.</p>
<ul>
<li>Let’s first define the notion of ‘Job’ and ‘MockJob’. Notice that job title is the Job’s intrinsic state of the ‘Job’.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IJob</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MockJob</span> <span class="keyword">implements</span> <span class="title">IJob</span> </span>&#123;</div><div class="line">    String title;</div><div class="line">    <span class="keyword">double</span> salary;</div><div class="line">    String risk;</div><div class="line"></div><div class="line">    MockJob(String title) &#123;</div><div class="line">        <span class="keyword">this</span>.title = title;</div><div class="line">        salary = <span class="number">1000</span>d;</div><div class="line">        risk = <span class="string">"LOW"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>The ‘JobFactory’ stores jobs based on their title. We will end up with limited amount of instances in memory.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JobFactory</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> HashMap&lt;String, IJob&gt; jobs;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> IJob <span class="title">create</span><span class="params">(String title)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (jobs.containsKey(title))</div><div class="line">            <span class="keyword">return</span> jobs.get(title);</div><div class="line">        IJob job = <span class="keyword">new</span> MockJob(title);</div><div class="line">        jobs.put(title, job);</div><div class="line">        <span class="keyword">return</span> job;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>The database table implementation, in our example, which keeps references to those limited instances in a ‘Vector’.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JobsTable</span> </span>&#123;</div><div class="line">    List&lt;IJob&gt; jobs = <span class="keyword">new</span> Vector&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addJob</span><span class="params">(String title)</span> </span>&#123;</div><div class="line">        jobs.add(JobFactory.create(title));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Finally, our unit test will look something like this.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClass</span> </span>&#123;</div><div class="line"></div><div class="line">    SystemUnderTest sut;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">smokeTest</span><span class="params">()</span> </span>&#123;</div><div class="line">        JobsTable table = <span class="keyword">new</span> JobsTable();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</div><div class="line">            String title = getRandomTitle();</div><div class="line">            table.addJob(title);</div><div class="line">        &#125;</div><div class="line">        sut.process(table);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    String[] titles = <span class="keyword">new</span> String[] &#123;</div><div class="line">        <span class="string">"Engineer"</span>, <span class="string">"Doctor"</span>, <span class="string">"Worker"</span>, <span class="string">"Teacher"</span></div><div class="line">    &#125;;</div><div class="line">    <span class="function">String <span class="title">getRandomTitle</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="comment">// a random title from the titles array;</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2010/design-patterns&quot;&gt;Design Patterns Overview&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Improve Performance by Sharing Objects Instead of Creating Them.&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Software Architecture" scheme="http://truelogician.com/categories/Software-Architecture/"/>
    
      <category term="Design Patterns" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/"/>
    
      <category term="Types" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"/>
    
      <category term="Structural" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Structural/"/>
    
    
      <category term="Design-Patterns" scheme="http://truelogician.com/tags/Design-Patterns/"/>
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
  </entry>
  
  <entry>
    <title>Composite Pattern</title>
    <link href="http://truelogician.com/2012/composite/"/>
    <id>http://truelogician.com/2012/composite/</id>
    <published>2012-06-14T19:19:03.000Z</published>
    <updated>2016-09-06T13:56:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><strong>Add the Capability of Never Ending Grouping.</strong> <em>Client Treats Collection of Objects and Individual Objects Uniformly.</em></p>
<a id="more"></a>
<h3 id="Recipe"><a href="#Recipe" class="headerlink" title="Recipe"></a>Recipe</h3><ul>
<li>Imagine the famous example of ‘Leaf’ and ‘Branch’<ul>
<li>A ‘Branch’ can contain other more branches or leaves.</li>
<li>A ‘Leaf’ cannot contain any other leaf or branch.</li>
</ul>
</li>
<li>Now let’s define a single ‘Leaf’ (‘IProduct’ in this case).</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IProduct</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operationA</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operationB</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>The implementation of the atomic ‘Leaf’ entity (Product).</li>
<li>The implementation of the non-atomic ‘Branch’ (ProductGroup).<ul>
<li>Notice that ProductGroup implements the same interface and contains a collection of products at the same time.</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> <span class="keyword">implements</span> <span class="title">IProduct</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationA</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationB</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductGroup</span> <span class="keyword">implements</span> <span class="title">IProduct</span> </span>&#123;</div><div class="line"></div><div class="line">    List&lt;IProduct&gt; products;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(IProduct... product)</span> </span>&#123;<span class="comment">/*add to products*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(IProduct product)</span> </span>&#123;<span class="comment">/*remove form products*/</span>&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationA</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationB</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Serve"><a href="#Serve" class="headerlink" title="Serve"></a>Serve</h3><p>After having the ‘Leaf’ and ‘Branch’ implementations in place, the client can now compose the tree and treat branches or leaves uniformly.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        ProductGroup groupA = <span class="keyword">new</span> ProductGroup();</div><div class="line">        ProductGroup groupA1 = <span class="keyword">new</span> ProductGroup();</div><div class="line">        ProductGroup groupA2 = <span class="keyword">new</span> ProductGroup();</div><div class="line"></div><div class="line">        ProductGroup groupB = <span class="keyword">new</span> ProductGroup();</div><div class="line">        ProductGroup groupB1 = <span class="keyword">new</span> ProductGroup();</div><div class="line"></div><div class="line">        IProduct product1 = <span class="keyword">new</span> Product();</div><div class="line">        IProduct product2 = <span class="keyword">new</span> Product();</div><div class="line"></div><div class="line">        groupA.add(groupA1, groupA2);</div><div class="line">        groupB.add(groupB1);</div><div class="line"></div><div class="line">        ProductGroup allGroups = <span class="keyword">new</span> ProductGroup();</div><div class="line">        allGroups.add(groupA, groupB, product1, product2);</div><div class="line"></div><div class="line">        allGroups.operationA();</div><div class="line">        product1.operationA();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Important-Benefits"><a href="#Important-Benefits" class="headerlink" title="Important Benefits"></a>Important Benefits</h3><ul>
<li>Allows treating individual objects and compositions uniformly.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Imagine your company asked you to create utility classes for the organizational chart.<br>The ‘WestCoast’ organization contains multiple divisions and departments. Each division might consist of other divisions or departments that groups them together. It is required to provide ceratin functionalities for handling employees and staff within divisions and departments.</p>
<ul>
<li>The notion of ‘Department’ is the atomic entity or a ‘Leaf’</li>
<li>The notion of ‘Division’ is the composite entity or a ‘Branch’</li>
<li>Don’t mind the ‘Employee’ as it’s only a utility class.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IDepartment</span> </span>&#123;</div><div class="line">    <span class="function">List&lt;Employee&gt; <span class="title">staff</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Employee e)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printStaff</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</div><div class="line">    String name; <span class="keyword">int</span> rank;</div><div class="line">    Employee(String name, <span class="keyword">int</span> rank) &#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.rank = rank;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Now that we have our core ‘Leaf’ interface, let’s create the concerete implementation as well as its composite implementation.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Department</span> <span class="keyword">implements</span> <span class="title">IDepartment</span> </span>&#123;</div><div class="line">    List&lt;Employee&gt; employees;</div><div class="line">    Department(Employee... employees) &#123;<span class="keyword">this</span>.employees = Arrays.asList(employees);&#125;</div><div class="line">    <span class="function">List&lt;Employee&gt; <span class="title">staff</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> employees; &#125;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Employee e)</span> </span>&#123; <span class="keyword">return</span> employees.contains(e); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printStaff</span><span class="params">()</span> </span>&#123;</div><div class="line">        employees.sort((e1, e2) -&gt; e1.rank - e2.rank);</div><div class="line">        <span class="keyword">for</span>(Employee e : employees)</div><div class="line">            System.out.println(e.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Division</span> <span class="keyword">implements</span> <span class="title">IDepartment</span> </span>&#123;</div><div class="line"></div><div class="line">    List&lt;IDepartment&gt; departments;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addDepartment</span><span class="params">(IDepartment d)</span>    </span>&#123; departments.add(d);    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeDepartment</span><span class="params">(IDepartment d)</span> </span>&#123; departments.remove(d); &#125;</div><div class="line"></div><div class="line">    <span class="function">List&lt;Employee&gt; <span class="title">staff</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;Employee&gt; staff = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (IDepartment d : departments)</div><div class="line">            staff.addAll(d.staff());</div><div class="line">        <span class="keyword">return</span> staff;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Employee e)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(IDepartment d : departments)</div><div class="line">            <span class="keyword">if</span> (d.contains(e)) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printStaff</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(IDepartment d : departments)</div><div class="line">            d.printStaff();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Employees are extracted into a database class to increase the focus on ‘Client’</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DB</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> Employee james = <span class="keyword">new</span> Employee(<span class="string">"james"</span>, <span class="number">1</span>);</div><div class="line">    <span class="keyword">static</span> Employee jack = <span class="keyword">new</span> Employee(<span class="string">"jack"</span>, <span class="number">2</span>);</div><div class="line">    <span class="keyword">static</span> Employee john = <span class="keyword">new</span> Employee(<span class="string">"john"</span>, <span class="number">3</span>);</div><div class="line"></div><div class="line">    <span class="keyword">static</span> Employee abraham = <span class="keyword">new</span> Employee(<span class="string">"abraham"</span>, <span class="number">5</span>);</div><div class="line">    <span class="keyword">static</span> Employee abigale = <span class="keyword">new</span> Employee(<span class="string">"abigale"</span>, <span class="number">6</span>);</div><div class="line">    <span class="keyword">static</span> Employee anna = <span class="keyword">new</span> Employee(<span class="string">"anna"</span>, <span class="number">5</span>);</div><div class="line"></div><div class="line">    <span class="keyword">static</span> Employee brian = <span class="keyword">new</span> Employee(<span class="string">"brian"</span>, <span class="number">5</span>);</div><div class="line">    <span class="keyword">static</span> Employee bernard = <span class="keyword">new</span> Employee(<span class="string">"bernard"</span>, <span class="number">6</span>);</div><div class="line">    <span class="keyword">static</span> Employee bianca = <span class="keyword">new</span> Employee(<span class="string">"bianca"</span>, <span class="number">7</span>);</div><div class="line"></div><div class="line">    <span class="keyword">static</span> Employee unknown = <span class="keyword">new</span> Employee(<span class="string">"Unknown"</span>, <span class="number">10</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        IDepartment marketing = <span class="keyword">new</span> Department(DB.abigale, DB.abraham, DB.anna);</div><div class="line">        IDepartment accounting = <span class="keyword">new</span> Department(DB.bernard, DB.bianca, DB.brian);</div><div class="line">        IDepartment management = <span class="keyword">new</span> Department(DB.jack, DB.james, DB.john);</div><div class="line"></div><div class="line">        Division finance = <span class="keyword">new</span> Division();</div><div class="line">        finance.addDepartment(marketing);</div><div class="line">        finance.addDepartment(accounting);</div><div class="line"></div><div class="line">        Division westCoast = <span class="keyword">new</span> Division();</div><div class="line">        westCoast.addDepartment(management);</div><div class="line">        westCoast.addDepartment(finance);</div><div class="line"></div><div class="line">        <span class="keyword">boolean</span> exists = marketing.contains(DB.abigale);</div><div class="line">        exists = westCoast.contains(DB.unknown);</div><div class="line">        management.printStaff();</div><div class="line">        westCoast.printStaff();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2010/design-patterns&quot;&gt;Design Patterns Overview&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Add the Capability of Never Ending Grouping.&lt;/strong&gt; &lt;em&gt;Client Treats Collection of Objects and Individual Objects Uniformly.&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Software Architecture" scheme="http://truelogician.com/categories/Software-Architecture/"/>
    
      <category term="Design Patterns" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/"/>
    
      <category term="Types" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"/>
    
      <category term="Structural" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Structural/"/>
    
    
      <category term="Design-Patterns" scheme="http://truelogician.com/tags/Design-Patterns/"/>
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
  </entry>
  
  <entry>
    <title>Iterator Pattern</title>
    <link href="http://truelogician.com/2012/iterator/"/>
    <id>http://truelogician.com/2012/iterator/</id>
    <published>2012-03-02T17:10:56.000Z</published>
    <updated>2016-09-06T13:35:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><strong>Get the Iterator for Any Type of Collections in Subclasses.</strong> <em>Provides a Way to Traverse a Collection of Objects Without Exposing Its Implementation.</em></p>
<a id="more"></a>
<h3 id="Recipe"><a href="#Recipe" class="headerlink" title="Recipe"></a>Recipe</h3><ul>
<li>The interface that defines the getIterator() method</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IIterable</span> </span>&#123;</div><div class="line">    <span class="function">Iterator <span class="title">getIterator</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Concrete implementations provide the iterator of a collection they might own.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductA</span> <span class="keyword">implements</span> <span class="title">IIterable</span> </span>&#123;</div><div class="line">    <span class="function">Iterator <span class="title">getIterator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// return the iterator of a desired collection;</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductB</span> <span class="keyword">implements</span> <span class="title">IIterable</span> </span>&#123;</div><div class="line">    <span class="function">Iterator <span class="title">getIterator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// return the iterator of a desired collection;</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Serve"><a href="#Serve" class="headerlink" title="Serve"></a>Serve</h3><p>Having implemented the IIterable, it is now possible to iterate over the collections in each implementation.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        ProductA product = <span class="keyword">new</span> ProductA();</div><div class="line">        Iterator&lt;Integer&gt; iterator = product.getIterator();</div><div class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">            Integer next = iterator.next();</div><div class="line">            <span class="comment">/*implementations*/</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Important-Benefits"><a href="#Important-Benefits" class="headerlink" title="Important Benefits"></a>Important Benefits</h3><ul>
<li>It provides a uniform way to cycle through different types of collections.</li>
<li>You can refer to each collection of objects in the same way.</li>
<li>It avoids code duplication which might occur during the iteration over each of them.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IIterable</span> </span>&#123;</div><div class="line">    <span class="function">Iterator <span class="title">getIterator</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Suppose there are some implementations which somehow hold a form of a collection (i.e arrays, lists, hash-tables, etc). this pattern provides a way to get an iterator over those collections.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inventory</span> <span class="keyword">implements</span> <span class="title">IIterable</span> </span>&#123;</div><div class="line"></div><div class="line">    Collection&lt;String&gt; items = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">    <span class="function">Iterator <span class="title">getIterator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> items.iterator();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IUser</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ISession</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnlineUsers</span> <span class="keyword">implements</span> <span class="title">IIterable</span> </span>&#123;</div><div class="line">    AbstractMap&lt;IUser, ISession&gt; users = <span class="keyword">new</span> HashMap&lt;IUser, ISession&gt;();</div><div class="line">    <span class="function">Iterator <span class="title">getIterator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> users.keySet().iterator();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IPoint</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Diagram</span> <span class="keyword">implements</span> <span class="title">IIterable</span> </span>&#123;</div><div class="line">    IPoint[] points = <span class="keyword">new</span> IPoint[<span class="number">10</span>];</div><div class="line">    <span class="function">Iterator <span class="title">getIterator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Arrays.asList(points).iterator();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2010/design-patterns&quot;&gt;Design Patterns Overview&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Get the Iterator for Any Type of Collections in Subclasses.&lt;/strong&gt; &lt;em&gt;Provides a Way to Traverse a Collection of Objects Without Exposing Its Implementation.&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Software Architecture" scheme="http://truelogician.com/categories/Software-Architecture/"/>
    
      <category term="Design Patterns" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/"/>
    
      <category term="Types" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"/>
    
      <category term="Behavioral" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Behavioral/"/>
    
    
      <category term="Design-Patterns" scheme="http://truelogician.com/tags/Design-Patterns/"/>
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
  </entry>
  
  <entry>
    <title>Template Method Pattern</title>
    <link href="http://truelogician.com/2012/template/"/>
    <id>http://truelogician.com/2012/template/</id>
    <published>2012-02-16T20:47:19.000Z</published>
    <updated>2016-09-06T13:36:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><strong>Create a Fixed Procedure and Vary its details for the Subclasses.</strong> <em>Subclasses Decide How to implement Steps in an Algorithm.</em></p>
<a id="more"></a>
<h3 id="Recipe"><a href="#Recipe" class="headerlink" title="Recipe"></a>Recipe</h3><ul>
<li>The abstract product with basic behavior implementation as well as abstract methods (also called hooks).</li>
<li>The hooks are to be implemented later on by the flavors of the product.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operationA</span><span class="params">()</span> </span>&#123;</div><div class="line">        action1();</div><div class="line">        action3();</div><div class="line">        <span class="keyword">if</span> (condition())</div><div class="line">            action4();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operationB</span><span class="params">()</span> </span>&#123;</div><div class="line">        action2();</div><div class="line">        action3();</div><div class="line">        action5();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">action1</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action2</span><span class="params">()</span> </span>&#123;<span class="comment">/* implementation */</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">action3</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action4</span><span class="params">()</span> </span>&#123;<span class="comment">/* implementation */</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">action5</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">condition</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>The product flavors with custom implementations.</li>
<li>Note that how they can also override non-abstract methods (‘Product2’).</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product1</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action1</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action3</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action5</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">condition</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">/* return evaluation*/</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product2</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operationA</span><span class="params">()</span> </span>&#123;</div><div class="line">        action1();</div><div class="line">        action4();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action1</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action3</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action5</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">condition</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">/* return evaluation*/</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Serve"><a href="#Serve" class="headerlink" title="Serve"></a>Serve</h3><p>The required product can then be created and asked for its specific behavior.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        Product product = <span class="keyword">new</span> Product1();</div><div class="line">        product.operationB();</div><div class="line">        product = <span class="keyword">new</span> Product2();</div><div class="line">        product.operationA();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Important-Benefits"><a href="#Important-Benefits" class="headerlink" title="Important Benefits"></a>Important Benefits</h3><p>Creates a group of subclasses that have to execute a similar group of methods but every step of these executions can be customized.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Suppose that you’re assigned to create simple framework for parsing the messages used in the system. These messages have the common parts of header and payload. So, in order to parse a message, we should parse the header and in case of valid header, we can move on to parsing the payload.</p>
<p>Accordingly, we know about the procedure of parsing a message, but the details are different based on each message. So let’s define the procedure first.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</div><div class="line">    String content;</div><div class="line">    String header;</div><div class="line">    String payload;</div><div class="line">    Message(String content) &#123; <span class="keyword">this</span>.content = content; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">parse</span><span class="params">()</span> </span>&#123;</div><div class="line">        header = parseHeader();</div><div class="line">        <span class="keyword">if</span> (isValidHeader())</div><div class="line">            payload = parsePayload();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">abstract</span> String <span class="title">parseHeader</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isValidHeader</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> String <span class="title">parsePayload</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Now for each existing message we can fine-tune the implementation details.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpMessage</span> <span class="keyword">extends</span> <span class="title">Message</span> </span>&#123;</div><div class="line">    HttpMessage(String content) &#123; <span class="keyword">super</span>(content); &#125;</div><div class="line">    <span class="function">String <span class="title">parseHeader</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"parse header according to HTTP standards"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isValidHeader</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"check validity based on valid HTTP headers"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function">String <span class="title">parsePayload</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"parse message payload based on HTTP body"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomMessage</span> <span class="keyword">extends</span> <span class="title">Message</span> </span>&#123;</div><div class="line">    CustomMessage(String content) &#123; <span class="keyword">super</span>(content); &#125;</div><div class="line">    <span class="function">String <span class="title">parseHeader</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"the header has 4 parts, each is 2 bytes"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isValidHeader</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"valid if header ID equal to 300 or 400"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function">String <span class="title">parsePayload</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"from byte 10 and onward"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The client invokes the base abstract method and the implementations are executed accordingly.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        Message message = <span class="keyword">new</span> HttpMessage(<span class="string">"&lt;valid HTTP message&gt;"</span>);</div><div class="line">        message.parse();</div><div class="line">        message = <span class="keyword">new</span> CustomMessage(<span class="string">"&lt;valid Custom message&gt;"</span>);</div><div class="line">        message.parse();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2010/design-patterns&quot;&gt;Design Patterns Overview&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Create a Fixed Procedure and Vary its details for the Subclasses.&lt;/strong&gt; &lt;em&gt;Subclasses Decide How to implement Steps in an Algorithm.&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Software Architecture" scheme="http://truelogician.com/categories/Software-Architecture/"/>
    
      <category term="Design Patterns" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/"/>
    
      <category term="Types" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"/>
    
      <category term="Behavioral" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Behavioral/"/>
    
    
      <category term="Design-Patterns" scheme="http://truelogician.com/tags/Design-Patterns/"/>
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
  </entry>
  
  <entry>
    <title>Bridge Pattern</title>
    <link href="http://truelogician.com/2012/bridge/"/>
    <id>http://truelogician.com/2012/bridge/</id>
    <published>2012-01-29T22:20:38.000Z</published>
    <updated>2016-09-06T13:35:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><strong>Decouple Products from Their Usage So That They can Change Independently.</strong> <em>Make It Easier to Add More Capabilities to a Set of Subclasses Through Abstraction Layer.</em></p>
<a id="more"></a>
<h3 id="Recipe"><a href="#Recipe" class="headerlink" title="Recipe"></a>Recipe</h3><ul>
<li>The family of products that is also very likely that in the future they will change and grow.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IProduct</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductA</span> <span class="keyword">implements</span> <span class="title">IProduct</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductB</span> <span class="keyword">implements</span> <span class="title">IProduct</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span> </span>&#123; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>The bridge interface/abstract class. Consider how a product instance is received through constructor.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractBridge</span> </span>&#123;</div><div class="line">    IProduct product;</div><div class="line">    AbstractBridge(IProduct product) &#123;</div><div class="line">        <span class="keyword">this</span>.product = product;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">function1</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">function2</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bridge</span> <span class="keyword">extends</span> <span class="title">AbstractBridge</span> </span>&#123;</div><div class="line">    IProduct product;</div><div class="line">    Bridge(IProduct product) &#123;</div><div class="line">        <span class="keyword">super</span>(product);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">function1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.product.operation1();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">function2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.product.operation2();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Serve"><a href="#Serve" class="headerlink" title="Serve"></a>Serve</h3><p>Now that products family and the bridge exist, create bridges of desired products and use behaviors provided in a bridge.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        Bridge bridge1 = <span class="keyword">new</span> Bridge(<span class="keyword">new</span> ProductA());</div><div class="line">        bridge1.function2();</div><div class="line">        Bridge bridge2 = <span class="keyword">new</span> Bridge(<span class="keyword">new</span> ProductB());</div><div class="line">        bridge2.function1();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Discussion"><a href="#Discussion" class="headerlink" title="Discussion"></a>Discussion</h3><p>You might have already noticed the similarity between bridge and the <a href="/2011/adapter/">adapter pattern</a>.</p>
<p><strong><em>So What’s the Difference?</em></strong> The difference lies in <em>when</em> the pattern is about to be applied.</p>
<ul>
<li>The adapter create adaptability between an already existing ‘Product’ and ‘Adaptee’ over which one might not have any control (say a third-party library, or legacy code).</li>
<li>The bridge pattern however, creates such adaptability up front; prior to classes being created or designed.<ul>
<li>In above implementation, developers might come up with more ‘IProduct’ implementations or more subclasses of ‘ProductA’ and ‘ProductB’ while rest assured that eventually methods will hook properly.</li>
</ul>
</li>
</ul>
<h3 id="Important-Benefits"><a href="#Important-Benefits" class="headerlink" title="Important Benefits"></a>Important Benefits</h3><ul>
<li>Progressively adding functionality while separating out major differences using abstract classes.</li>
<li>Helps when both abstractions and concrete classes are to be changed frequently and independently.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Imagine we’re designing graphics API to render form-components (Buttons, TextBoxes, Comboboxes and etc) on graphics containers such as web pages or application canvas.</p>
<p>For now, let’s say that:</p>
<ul>
<li>We need to present Buttons, TextBoxes and ComboBoxes to render on webpage or canvas.</li>
<li>They come in either light or dark themes.</li>
<li>It’s not known how many components or themes are to be added in future.</li>
</ul>
<p>As a result, normally we might end up with classes below; while each has its own ‘render()’ implementation:</p>
<ul>
<li>Button<ul>
<li>ButtonDark</li>
<li>ButtonLight</li>
</ul>
</li>
<li>TextBox<ul>
<li>TextBoxLight</li>
<li>TextBoxDark</li>
</ul>
</li>
<li>ComboBox<ul>
<li>ComboBoxDark</li>
<li>ComboBoxLight</li>
</ul>
</li>
</ul>
<p>This approach, however has a drawback.</p>
<ul>
<li><strong><em>What if we need to add a Checkbox?</em></strong> then we need to define the checkbox top class with two additional dark and light flavor.</li>
<li><strong><em>What if we need to add one more theme?</em></strong> then we need to add three more classes for each component.</li>
</ul>
<p><strong><em>Not Very Optimal… Right?</em></strong><br>Applying the bridge pattern, let’s decouple the concept of ‘Theme’ from ‘GUI-Container’.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ITheme</span> </span>&#123;</div><div class="line">    Object[] elements();</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DarkTheme</span> <span class="keyword">implements</span> <span class="title">ITheme</span> </span>&#123;</div><div class="line">    Object[] elements() &#123;</div><div class="line">        <span class="comment">// return dark graphics</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LightTheme</span> <span class="keyword">implements</span> <span class="title">ITheme</span> </span>&#123;</div><div class="line">    Object[] elements() &#123;</div><div class="line">        <span class="comment">// return light graphics</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Accordingly, the graphics containers will look like this:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GuiContainer</span> </span>&#123;</div><div class="line">    ITheme theme;</div><div class="line">    GuiContainer(ITheme theme) &#123; <span class="keyword">this</span>.theme = theme; &#125;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">drawComboBox</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">drawButton</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">drawTextBox</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Website</span> <span class="keyword">extends</span> <span class="title">GuiContainer</span> </span>&#123;</div><div class="line">    ITheme theme;</div><div class="line">    Website(ITheme theme) &#123; <span class="keyword">super</span>(theme); &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drawComboBox</span><span class="params">()</span> </span>&#123;</div><div class="line">        Object[] elements = theme.elements();</div><div class="line">        <span class="comment">// get combobox graphics &amp; render on a webpage</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drawButton</span><span class="params">()</span> </span>&#123;</div><div class="line">        Object[] elements = theme.elements();</div><div class="line">        <span class="comment">// get button graphics &amp; render on a webpage</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drawTextBox</span><span class="params">()</span> </span>&#123;</div><div class="line">        Object[] elements = theme.elements();</div><div class="line">        <span class="comment">// get textbox graphics &amp; render on a webpage</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">extends</span> <span class="title">GuiContainer</span> </span>&#123;</div><div class="line">    ITheme theme;</div><div class="line">    Application(ITheme theme) &#123; <span class="keyword">super</span>(theme); &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drawComboBox</span><span class="params">()</span> </span>&#123;</div><div class="line">        Object[] elements = theme.elements();</div><div class="line">        <span class="comment">// get combobox graphics &amp; render on a canvas</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drawButton</span><span class="params">()</span> </span>&#123;</div><div class="line">        Object[] elements = theme.elements();</div><div class="line">        <span class="comment">// get button graphics &amp; render on a canvas</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drawTextBox</span><span class="params">()</span> </span>&#123;</div><div class="line">        Object[] elements = theme.elements();</div><div class="line">        <span class="comment">// get textbox graphics &amp; render on a canvas</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Notice</strong>: ‘Theme’ and ‘GuiContainer’ are completely independent entities. Also, each GUI container only needs one theme at the same time and not more.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        ITheme darkTheme = <span class="keyword">new</span> DarkTheme();</div><div class="line">        Website website = <span class="keyword">new</span> Website(darkTheme);</div><div class="line">        website.drawButton();</div><div class="line">        website.drawComboBox();</div><div class="line">        website.drawTextBox();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Alright, let’s answer the same questions now.</p>
<ul>
<li><strong><em>What if we need to add a Checkbox?</em></strong> then we need to implement the logic for how to render it on both webpage and canvas.</li>
<li><strong><em>What if we need to add one more theme?</em></strong> then we need to return elements of that theme.</li>
</ul>
<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2010/design-patterns&quot;&gt;Design Patterns Overview&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Decouple Products from Their Usage So That They can Change Independently.&lt;/strong&gt; &lt;em&gt;Make It Easier to Add More Capabilities to a Set of Subclasses Through Abstraction Layer.&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Software Architecture" scheme="http://truelogician.com/categories/Software-Architecture/"/>
    
      <category term="Design Patterns" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/"/>
    
      <category term="Types" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"/>
    
      <category term="Structural" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Structural/"/>
    
    
      <category term="Design-Patterns" scheme="http://truelogician.com/tags/Design-Patterns/"/>
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
  </entry>
  
  <entry>
    <title>Facade Pattern</title>
    <link href="http://truelogician.com/2011/facade/"/>
    <id>http://truelogician.com/2011/facade/</id>
    <published>2011-12-14T19:43:13.000Z</published>
    <updated>2016-09-06T13:31:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><strong>Create a Simplified Interface to a Set of Classes.</strong> <em>Create a Cohesive Class Is Easier to Read, Test, Understand and Use by Grouping Methods with Common Tasks from a Set of Other Classes.</em></p>
<a id="more"></a>
<h3 id="Recipe"><a href="#Recipe" class="headerlink" title="Recipe"></a>Recipe</h3><ul>
<li>A set of products with different behaviors.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IProductA</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operationA1</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operationA2</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operationA3</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IProductB</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operationB1</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operationB2</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operationB3</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IProductC</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operationC1</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operationC2</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operationC3</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>The facade class that groups methods with common tasks for a certain purpose.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</div><div class="line">    IProductA productA;</div><div class="line">    IProductB productB;</div><div class="line">    IProductC productC;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operationA1</span><span class="params">()</span> </span>&#123; productA.operationA1(); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operationB2</span><span class="params">()</span> </span>&#123; productB.operationB2(); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operationC3</span><span class="params">()</span> </span>&#123; productC.operationC3(); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Serve"><a href="#Serve" class="headerlink" title="Serve"></a>Serve</h3><p>Since only the facade is exposed, the client cannot access any extra unnecessary methods from products.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        Facade facade = <span class="keyword">new</span> Facade();</div><div class="line">        facade.operationA1();</div><div class="line">        facade.operationC3();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Important-Benefits"><a href="#Important-Benefits" class="headerlink" title="Important Benefits"></a>Important Benefits</h3><ul>
<li>Hides the complexity and the unnecessary code from the client.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Suppose an internet shopping company is trying to create a web service for their products. They already have an accounting and posting department as well as an inventory.<br>The web service does not need to know any details of each department’s code or expose them to the end user.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IInventory</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transportToDispatch</span><span class="params">(String itemId)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addItem</span><span class="params">(String itemId, <span class="keyword">int</span> amount)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeItem</span><span class="params">(String itemId, <span class="keyword">int</span> amount)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IAccounting</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteReceipt</span><span class="params">(String receiptId)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerOrder</span><span class="params">(String itemId)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">GetAnnualSale</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IPostalService</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dispatch</span><span class="params">(String itemId, String userId)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">track</span><span class="params">(String dispatchId)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cancel</span><span class="params">(String dispatchId)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>The facade will expose an useful method for the end user and consumes the related methods.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderFacade</span> </span>&#123;</div><div class="line">    IAccounting accounting;</div><div class="line">    IInventory inventory;</div><div class="line">    IPostalService postalService;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">order</span><span class="params">(String order)</span> </span>&#123;</div><div class="line">        String itemId = <span class="string">"/*extract item id from order*/"</span>;</div><div class="line">        accounting.registerOrder(itemId);</div><div class="line">        inventory.transportToDispatch(itemId);</div><div class="line">        String userId = <span class="string">"/*extract user id from order*/"</span>;</div><div class="line">        postalService.dispatch(itemId, userId);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>As a result, the end user can now only access the required methods. </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebService</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createOrder</span><span class="params">(String orderProperties)</span> </span>&#123;</div><div class="line">        OrderFacade facade = <span class="keyword">new</span> OrderFacade();</div><div class="line">        facade.order(orderProperties);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addToWishlist</span><span class="params">(String itemId)</span> </span>&#123;</div><div class="line">      <span class="comment">/*implementation*/</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2010/design-patterns&quot;&gt;Design Patterns Overview&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Create a Simplified Interface to a Set of Classes.&lt;/strong&gt; &lt;em&gt;Create a Cohesive Class Is Easier to Read, Test, Understand and Use by Grouping Methods with Common Tasks from a Set of Other Classes.&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Software Architecture" scheme="http://truelogician.com/categories/Software-Architecture/"/>
    
      <category term="Design Patterns" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/"/>
    
      <category term="Types" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"/>
    
      <category term="Structural" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Structural/"/>
    
    
      <category term="Design-Patterns" scheme="http://truelogician.com/tags/Design-Patterns/"/>
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
  </entry>
  
  <entry>
    <title>Adapter Pattern</title>
    <link href="http://truelogician.com/2011/adapter/"/>
    <id>http://truelogician.com/2011/adapter/</id>
    <published>2011-11-28T21:12:55.000Z</published>
    <updated>2016-09-06T13:30:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><strong>Create Adaptability Among Different Interfaces.</strong> <em>Adapt an Existing Class to Work With Others Without Modifying It.</em></p>
<a id="more"></a>
<h3 id="Recipe"><a href="#Recipe" class="headerlink" title="Recipe"></a>Recipe</h3><ul>
<li>The product definition.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IProduct</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>A different class that needs to be used like an IProduct.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">procedureA</span><span class="params">()</span> </span>&#123;<span class="comment">/* implementation */</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">procedureB</span><span class="params">()</span> </span>&#123;<span class="comment">/* implementation */</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>The adapter which on one hand implements the IProduct and on the other hand has the adaptee.</li>
<li>Note that Adapter selects the correct corresponding method from the adaptee.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">implements</span> <span class="title">IProduct</span> </span>&#123;</div><div class="line">    Adaptee adaptee;</div><div class="line">    Adapter(Adaptee adaptee) &#123; <span class="keyword">this</span>.adaptee = adaptee; &#125;</div><div class="line">    <span class="comment">// imagine that operation shall be mapped to procedureB</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123; adaptee.procedureB(); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Serve"><a href="#Serve" class="headerlink" title="Serve"></a>Serve</h3><p>Create an adapter and pass an instance of the class that needs to be adapted. It will behave as if it is a product.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        Adapter adapter = <span class="keyword">new</span> Adapter(<span class="keyword">new</span> Adaptee());</div><div class="line">        adapter.operation();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Important-Benefits"><a href="#Important-Benefits" class="headerlink" title="Important Benefits"></a>Important Benefits</h3><ul>
<li>Allows you to translate the behaviors in one family of classes to not-completely-different behaviors in another family of classes.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Suppose that you’ve been assigned to update the code behind the user profile of a legacy code in a social networking company. The legacy code will be running in some regions of the world, however the company wants to update user profiles in some small regions.</p>
<ul>
<li>The new code for the profile looks very simple. Two methods to update and also sign out the owner of it.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IModernProfile</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Object[] props)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">signOut</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>The legacy profile, like it or not, has much more granular methods and behaviors.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LegacyProfile</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">closeCurrentSession</span><span class="params">()</span> </span>&#123;<span class="comment">/* implementation */</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">closeDatabaseConnections</span><span class="params">()</span> </span>&#123;<span class="comment">/* implementation */</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;<span class="comment">/* implementation */</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setFullName</span><span class="params">(String fullName)</span> </span>&#123;<span class="comment">/* implementation */</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setUserAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;<span class="comment">/* implementation */</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setUserAddress</span><span class="params">(String address)</span> </span>&#123;<span class="comment">/* implementation */</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Since we cannot change its source code directly, we can write an adapter that implements the new profile interface and accepts an instance of the old one.</li>
<li>Notice that the adapter will map actions between the adapter and the adaptee.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModernProfileAdapter</span> <span class="keyword">implements</span> <span class="title">IModernProfile</span> </span>&#123;</div><div class="line">    LegacyProfile legacyProfile;</div><div class="line">    ModernProfileAdapter(LegacyProfile legacyProfile) &#123;</div><div class="line">        <span class="keyword">this</span>.legacyProfile = legacyProfile;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Object[] props)</span> </span>&#123;</div><div class="line">        legacyProfile.setUsername(props[<span class="number">0</span>].toString());</div><div class="line">        legacyProfile.setFullName(props[<span class="number">1</span>].toString());</div><div class="line">        legacyProfile.setUserAge(toInt(props[<span class="number">2</span>]));</div><div class="line">        legacyProfile.setUserAddress(props[<span class="number">3</span>].toString());</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">signOut</span><span class="params">()</span> </span>&#123;</div><div class="line">        legacyProfile.closeDatabaseConnections();</div><div class="line">        legacyProfile.closeCurrentSession();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Finally, we’re now able to use the legacy profile as if it’s a modern profile.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        ModernProfileAdapter profileAdapter =</div><div class="line">            <span class="keyword">new</span> ModernProfileAdapter(<span class="keyword">new</span> LegacyProfile());</div><div class="line">        profileAdapter.update</div><div class="line">            (<span class="keyword">new</span> Object[]</div><div class="line">            &#123;</div><div class="line">                <span class="string">"john12"</span>, <span class="string">"John Doe"</span>, <span class="number">33</span>, <span class="string">"1234 XYZ Street"</span></div><div class="line">            &#125;);</div><div class="line">        profileAdapter.signOut();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2010/design-patterns&quot;&gt;Design Patterns Overview&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Create Adaptability Among Different Interfaces.&lt;/strong&gt; &lt;em&gt;Adapt an Existing Class to Work With Others Without Modifying It.&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Software Architecture" scheme="http://truelogician.com/categories/Software-Architecture/"/>
    
      <category term="Design Patterns" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/"/>
    
      <category term="Types" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"/>
    
      <category term="Structural" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Structural/"/>
    
    
      <category term="Design-Patterns" scheme="http://truelogician.com/tags/Design-Patterns/"/>
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
  </entry>
  
  <entry>
    <title>Decorator Pattern</title>
    <link href="http://truelogician.com/2011/decorator/"/>
    <id>http://truelogician.com/2011/decorator/</id>
    <published>2011-09-24T09:27:03.000Z</published>
    <updated>2016-09-06T13:31:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><strong>Provide New Abilities/Behaviors at Runtime.</strong> <em>Wrapping an Object (Through Composition) In Order to Provide Additional Abilities</em></p>
<a id="more"></a>
<h3 id="Recipe"><a href="#Recipe" class="headerlink" title="Recipe"></a>Recipe</h3><ul>
<li>The product definition and one concrete class to show the pattern use later on.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IProduct</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> <span class="keyword">implements</span> <span class="title">IProduct</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>The definition of a ‘Decorator’ along various derivations; each of them modifies the given product’s behaviors and abilities in a certain way.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">implements</span> <span class="title">IProduct</span> </span>&#123;</div><div class="line">    IProduct product;</div><div class="line">    Decorator(IProduct product) &#123; <span class="keyword">this</span>.product = product; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123; product.operation1(); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span> </span>&#123; product.operation2(); &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecoratorX</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</div><div class="line">    DecoratorX(IProduct product) &#123; <span class="keyword">super</span>(product); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123;<span class="comment">/*modified implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span> </span>&#123;<span class="comment">/*modified implementation*/</span>&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecoratorY</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</div><div class="line">    DecoratorY(IProduct product) &#123; <span class="keyword">super</span>(product); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123;<span class="comment">/*modified implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span> </span>&#123;<span class="comment">/*modified implementation*/</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Serve"><a href="#Serve" class="headerlink" title="Serve"></a>Serve</h3><p>Once decorators are in place, create an instance of the base product and then wrap them with the new decorators. It is basically like an onion with the base product at the core which is wrapped by layers of decorators around one another.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        IProduct customProduct =</div><div class="line">            <span class="keyword">new</span> DecoratorX(<span class="keyword">new</span> DecoratorY(<span class="keyword">new</span> Product()));</div><div class="line">        customProduct.operation1();</div><div class="line">        customProduct.operation2();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Important-Benefits"><a href="#Important-Benefits" class="headerlink" title="Important Benefits"></a>Important Benefits</h3><ul>
<li>It simplifies the code while it is more flexible than inheritance and above all it gives us the ability to extend the old code with the new code instead of rewriting it.</li>
<li>It allows the behavior to be extended without the need to modify the existing code. You can wrap a component with any number of decorators.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Suppose that we are about to create a logger that logs text messages to file. So, the basic logger only appends given strings to a file.</p>
<p>However, many of our developer users also demanded us to equip the logs with the current timestamp. Our test department users also requested the logs to be colorful, since they open the logs with an enhanced text editor and they want errors and warning to stand out.</p>
<p>Accordingly, the product would be a ‘Logger’ as defined below.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ILogger</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">log</span><span class="params">(String message)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> <span class="keyword">implements</span> <span class="title">ILogger</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">log</span><span class="params">(String message)</span> </span>&#123;<span class="comment">/* log to file */</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Based on the demands, instead of modifying the base logger, we could introduce two decorators to improve the base logger.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">implements</span> <span class="title">ILogger</span> </span>&#123;</div><div class="line">    ILogger logger;</div><div class="line">    Decorator(ILogger logger) &#123; <span class="keyword">this</span>.logger = logger; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">log</span><span class="params">(String message)</span> </span>&#123; logger.log(message); &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeDecorator</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</div><div class="line">    TimeDecorator(ILogger logger) &#123; <span class="keyword">super</span>(logger); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">log</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        String timestamp = <span class="string">"&lt;formatted-timestamp-of-current-moment&gt;"</span>;</div><div class="line">        String timestampedMessage =</div><div class="line">                String.format(<span class="string">"Timestamp %s: %s"</span>, timestamp, message);</div><div class="line">        <span class="keyword">super</span>.log(timestampedMessage);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorDecorator</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</div><div class="line">    ColorDecorator(ILogger logger) &#123; <span class="keyword">super</span>(logger); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">log</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.log(toColored(message));</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">toColored</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        String template = <span class="string">"&lt;font color=\"%s\"&gt;%s&lt;/font&gt;"</span>;</div><div class="line">        <span class="keyword">if</span> (message.startsWith(<span class="string">"Error"</span>))</div><div class="line">            <span class="keyword">return</span> String.format(template, <span class="string">"red"</span>, message);</div><div class="line">        <span class="keyword">if</span> (message.startsWith(<span class="string">"Warning"</span>))</div><div class="line">            <span class="keyword">return</span> String.format(template, <span class="string">"yellow"</span>, message);</div><div class="line">        <span class="keyword">return</span> String.format(template, <span class="string">"green"</span> message);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Now, the client is able to equip the base logger with any amount of decorators and use it.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        Logger simpleLogger = <span class="keyword">new</span> Logger();</div><div class="line">        ColorDecorator colorLogger = <span class="keyword">new</span> ColorDecorator(simpleLogger);</div><div class="line">        ILogger timedColorLogger = <span class="keyword">new</span> TimeDecorator(colorLogger);</div><div class="line"></div><div class="line">        timedColorLogger.log(<span class="string">"Error: invalid id"</span>);</div><div class="line">        timedColorLogger.log(<span class="string">"Warning: address not defined"</span>);</div><div class="line"></div><div class="line">        simpleLogger.log(<span class="string">"application started"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2010/design-patterns&quot;&gt;Design Patterns Overview&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Provide New Abilities/Behaviors at Runtime.&lt;/strong&gt; &lt;em&gt;Wrapping an Object (Through Composition) In Order to Provide Additional Abilities&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Software Architecture" scheme="http://truelogician.com/categories/Software-Architecture/"/>
    
      <category term="Design Patterns" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/"/>
    
      <category term="Types" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"/>
    
      <category term="Structural" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Structural/"/>
    
    
      <category term="Design-Patterns" scheme="http://truelogician.com/tags/Design-Patterns/"/>
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
  </entry>
  
  <entry>
    <title>Command Pattern</title>
    <link href="http://truelogician.com/2011/command/"/>
    <id>http://truelogician.com/2011/command/</id>
    <published>2011-07-16T08:14:47.000Z</published>
    <updated>2016-09-06T13:31:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><strong>Create a Set of Reusable Commands For Various Products.</strong> <em>Encapsulate the concept of an action (Command).</em></p>
<a id="more"></a>
<h3 id="Recipe"><a href="#Recipe" class="headerlink" title="Recipe"></a>Recipe</h3><ul>
<li>The definition of product and its operations.</li>
<li>The product subclasses family.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IProduct</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doA</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doB</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doC</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product1</span> <span class="keyword">implements</span> <span class="title">IProduct</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doA</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doB</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doC</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product2</span> <span class="keyword">implements</span> <span class="title">IProduct</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doA</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doB</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doC</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product3</span> <span class="keyword">implements</span> <span class="title">IProduct</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doA</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doB</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doC</span><span class="params">()</span> </span>&#123;<span class="comment">/*implementation*/</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>The command has a very simple structure. a command can only be executed.</li>
<li>The command subclasses accept such a product and invoke corresponding actions on them.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ICommand</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommandX</span> <span class="keyword">implements</span> <span class="title">ICommand</span> </span>&#123;</div><div class="line">    IProduct product;</div><div class="line">    CommandA(IProduct product) &#123; <span class="keyword">this</span>.product = product; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123; product.doC(); &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommandY</span> <span class="keyword">implements</span> <span class="title">ICommand</span> </span>&#123;</div><div class="line">    IProduct product;</div><div class="line">    CommandB(IProduct product) &#123; <span class="keyword">this</span>.product = product; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123; product.doA(); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Serve"><a href="#Serve" class="headerlink" title="Serve"></a>Serve</h3><p>Now that we defined both the command and product, we can simple pass a product to a command and ask it to execute.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        <span class="keyword">new</span> CommandY(<span class="keyword">new</span> Product2()).execute();</div><div class="line">        <span class="keyword">new</span> CommandX(<span class="keyword">new</span> Product1()).execute();</div><div class="line">        <span class="keyword">new</span> CommandX(<span class="keyword">new</span> Product2()).execute();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Important-Benefits"><a href="#Important-Benefits" class="headerlink" title="Important Benefits"></a>Important Benefits</h3><ul>
<li>Allows using a set of commands over and over on different products.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Let’s imagine that we’re about to develop a visual GUI designing framework. Also we are about to provide a functionality that allows developers to select a component on the screen and hit the enable/disable button to act on the component accordingly. We also know that enable or disable functionality workd differently on different GUI components.</p>
<ul>
<li>As a result let’s define our components first</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IComponent</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(IComponent component)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enable</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">disable</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextBox</span> <span class="keyword">implements</span> <span class="title">IComponent</span> </span>&#123;</div><div class="line">    TextBox(String text) &#123;<span class="comment">/* set text */</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(IComponent component)</span> </span>&#123;<span class="comment">/* no sub component */</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enable</span><span class="params">()</span> </span>&#123;<span class="comment">/* enable text component */</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">disable</span><span class="params">()</span> </span>&#123;<span class="comment">/* disable text component */</span>&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListBox</span> <span class="keyword">implements</span> <span class="title">IComponent</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(IComponent component)</span> </span>&#123;</div><div class="line">        <span class="comment">/* add to list as a TextBox */</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enable</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">/* go through all child text</span></div><div class="line">           components and enable them */</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">disable</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">/* go through all child text</span></div><div class="line">           components and disable them */</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Panel</span> <span class="keyword">implements</span> <span class="title">IComponent</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(IComponent component)</span> </span>&#123;</div><div class="line">        <span class="comment">/* add to the container */</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enable</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">/* go through all child</span></div><div class="line">           components and enable them */</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">disable</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">/* go through all child</span></div><div class="line">           components and disable them */</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Note the command interface also provides the ability to undo</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ICommand</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Enable</span> <span class="keyword">implements</span> <span class="title">ICommand</span> </span>&#123;</div><div class="line">    IComponent component;</div><div class="line">    Enable(IComponent component) &#123; <span class="keyword">this</span>.component = component; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123; component.enable(); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123; component.disable(); &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Disable</span> <span class="keyword">implements</span> <span class="title">ICommand</span> </span>&#123;</div><div class="line">    IComponent component;</div><div class="line">    Disable(IComponent component) &#123; <span class="keyword">this</span>.component = component; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123; component.disable(); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123; component.enable(); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>And finnaly the client that allows for enabling/disabling one component or a group of them.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        IComponent orange = <span class="keyword">new</span> TextBox(<span class="string">"Orange"</span>);</div><div class="line">        IComponent apple = <span class="keyword">new</span> TextBox(<span class="string">"Apple"</span>);</div><div class="line">        IComponent banana = <span class="keyword">new</span> TextBox(<span class="string">"Banana"</span>);</div><div class="line"></div><div class="line">        IComponent fruitsList = <span class="keyword">new</span> ListBox();</div><div class="line">        fruitsList.add(orange);</div><div class="line">        fruitsList.add(apple);</div><div class="line">        fruitsList.add(banana);</div><div class="line"></div><div class="line">        IComponent panel = <span class="keyword">new</span> Panel();</div><div class="line">        panel.add(fruitsList);</div><div class="line"></div><div class="line">        ICommand disablePanel = <span class="keyword">new</span> Disable(panel);</div><div class="line">        ICommand disableList = <span class="keyword">new</span> Disable(fruitsList);</div><div class="line"></div><div class="line">        disablePanel.execute();</div><div class="line">        disablePanel.undo();</div><div class="line">        disableList.execute();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2010/design-patterns&quot;&gt;Design Patterns Overview&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Create a Set of Reusable Commands For Various Products.&lt;/strong&gt; &lt;em&gt;Encapsulate the concept of an action (Command).&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Software Architecture" scheme="http://truelogician.com/categories/Software-Architecture/"/>
    
      <category term="Design Patterns" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/"/>
    
      <category term="Types" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"/>
    
      <category term="Behavioral" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Behavioral/"/>
    
    
      <category term="Design-Patterns" scheme="http://truelogician.com/tags/Design-Patterns/"/>
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
  </entry>
  
  <entry>
    <title>Prototype Pattern</title>
    <link href="http://truelogician.com/2011/prototype/"/>
    <id>http://truelogician.com/2011/prototype/</id>
    <published>2011-06-09T17:11:09.000Z</published>
    <updated>2016-09-06T13:32:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><strong>Create new instances by copying the existing one.</strong> <em>Client code can make new instances without knowing which specific class is being instantiated.</em></p>
<a id="more"></a>
<h3 id="Recipe"><a href="#Recipe" class="headerlink" title="Recipe"></a>Recipe</h3><ul>
<li>The product prototype and its concrete implementation.</li>
<li>Notice how each product casts the clone to self type.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IPrototype</span> <span class="keyword">extends</span> <span class="title">Cloneable</span> </span>&#123;</div><div class="line">    <span class="function">IPrototype <span class="title">copy</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductA</span> <span class="keyword">implements</span> <span class="title">IPrototype</span> </span>&#123;</div><div class="line">    <span class="function">IPrototype <span class="title">copy</span><span class="params">()</span> </span>&#123;</div><div class="line">        ProductA product = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123; product = (ProductA) <span class="keyword">super</span>.clone(); &#125;</div><div class="line">        <span class="keyword">catch</span> (CloneNotSupportedException e) &#123; log(e); &#125;</div><div class="line">        <span class="keyword">return</span> product;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductB</span> <span class="keyword">implements</span> <span class="title">IPrototype</span> </span>&#123;</div><div class="line">    <span class="function">IPrototype <span class="title">copy</span><span class="params">()</span> </span>&#123;</div><div class="line">        ProductB product = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123; product = (ProductB) <span class="keyword">super</span>.clone(); &#125;</div><div class="line">        <span class="keyword">catch</span> (CloneNotSupportedException e) &#123; log(e); &#125;</div><div class="line">        <span class="keyword">return</span> product;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>The clone factory which receives a prototype or a subclass of it and creates a clone of it</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CloneFactory</span> </span>&#123;</div><div class="line">    <span class="function">IPrototype <span class="title">clone</span><span class="params">(IPrototype prototype)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> prototype.copy();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Serve"><a href="#Serve" class="headerlink" title="Serve"></a>Serve</h3><p>Now that you have everything in place, to clone a product, simply pass it to the clone factory and cast it back.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    ProductA a = <span class="keyword">new</span> ProductA();</div><div class="line">    ProductB b = <span class="keyword">new</span> ProductB();</div><div class="line">    Client() &#123;</div><div class="line">        CloneFactory cloneFactory = <span class="keyword">new</span> CloneFactory();</div><div class="line">        ProductA a1 = (ProductA) cloneFactory.clone(a);</div><div class="line">        ProductA a2 = (ProductA) cloneFactory.clone(a);</div><div class="line">        ProductB b1 = (ProductB) cloneFactory.clone(b);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Important-Benefits"><a href="#Important-Benefits" class="headerlink" title="Important Benefits"></a>Important Benefits</h3><ul>
<li>Reduces the need for creating subclasses.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Alright, imagine that a graphical application needs to present its graphical elements. In this example, they are ‘Pixel’ and ‘Circle’. A Pixel is defined by its x and y coordinates and a circle is defined by its center and radius.</p>
<p>We want provide our users with shape duplication ability in order to clone shapes instead of drawing an identical ones.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IPrototype</span> <span class="keyword">extends</span> <span class="title">Cloneable</span> </span>&#123;</div><div class="line">    <span class="function">IPrototype <span class="title">copy</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pixel</span> <span class="keyword">implements</span> <span class="title">IPrototype</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    <span class="keyword">int</span> y;</div><div class="line">    Pixel(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</div><div class="line">        <span class="keyword">this</span>.x = x;</div><div class="line">        <span class="keyword">this</span>.y = y;</div><div class="line">    &#125;</div><div class="line">    <span class="function">IPrototype <span class="title">copy</span><span class="params">()</span> </span>&#123;</div><div class="line">        Pixel pixel = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            pixel = (Pixel) <span class="keyword">super</span>.clone();</div><div class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123; log(e); &#125;</div><div class="line">        <span class="keyword">return</span> pixel;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">IPrototype</span> </span>&#123;</div><div class="line">    Pixel center;</div><div class="line">    <span class="keyword">double</span> radius;</div><div class="line">    Circle(Pixel center, <span class="keyword">double</span> radius) &#123;</div><div class="line">        <span class="keyword">this</span>.center = center;</div><div class="line">        <span class="keyword">this</span>.radius = radius;</div><div class="line">    &#125;</div><div class="line">    <span class="function">IPrototype <span class="title">copy</span><span class="params">()</span> </span>&#123;</div><div class="line">        Circle circle = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            circle = (Circle) <span class="keyword">super</span>.clone();</div><div class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123; log(e); &#125;</div><div class="line">        <span class="keyword">return</span> circle;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;<span class="comment">/*logic to draw a circle*/</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The clone factory is completely untouched.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CloneFactory</span> </span>&#123;</div><div class="line">    <span class="function">IPrototype <span class="title">clone</span><span class="params">(IPrototype prototype)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> prototype.copy();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>And finally the ‘Canvas’ provides the duplication functionality and draws a circle with the same specs next to the original one.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Canvas</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">duplicate</span><span class="params">(Circle circle)</span> </span>&#123;</div><div class="line">        CloneFactory cloneFactory = <span class="keyword">new</span> CloneFactory();</div><div class="line">        Circle clone = (Circle) cloneFactory.clone(circle);</div><div class="line">        clone.center = <span class="keyword">new</span> Pixel(clone.center.x + <span class="number">1</span>, clone.center.y + <span class="number">1</span>);</div><div class="line">        clone.draw();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2010/design-patterns&quot;&gt;Design Patterns Overview&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Create new instances by copying the existing one.&lt;/strong&gt; &lt;em&gt;Client code can make new instances without knowing which specific class is being instantiated.&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Software Architecture" scheme="http://truelogician.com/categories/Software-Architecture/"/>
    
      <category term="Design Patterns" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/"/>
    
      <category term="Types" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"/>
    
      <category term="Creational" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Creational/"/>
    
    
      <category term="Design-Patterns" scheme="http://truelogician.com/tags/Design-Patterns/"/>
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
  </entry>
  
  <entry>
    <title>Builder Pattern</title>
    <link href="http://truelogician.com/2011/builder/"/>
    <id>http://truelogician.com/2011/builder/</id>
    <published>2011-03-19T21:37:18.000Z</published>
    <updated>2016-09-06T13:31:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><strong>Simplify Creation of Objects Which Need Many Properties for Creation.</strong></p>
<a id="more"></a>
<h3 id="Recipe"><a href="#Recipe" class="headerlink" title="Recipe"></a>Recipe</h3><ul>
<li>The product definition along with its required/optional properties.</li>
<li>Notice it uses the passed ‘builder’ object to propagate its property values.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</div><div class="line">    String  propertyA;</div><div class="line">    <span class="keyword">int</span>     propertyB;</div><div class="line">    <span class="keyword">boolean</span> propertyC;</div><div class="line"></div><div class="line">    Product(Builder builder) &#123;</div><div class="line">        propertyA = builder.propertyA;</div><div class="line">        propertyB = builder.propertyB;</div><div class="line">        propertyC = builder.propertyC;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>The builder which almost maps the properties of the product.</li>
<li>Notice the setter method return a ‘Builder’ to allow chaining methods.<ul>
<li>Enforce the product’s required properties in the builder too.</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">    String  propertyA;</div><div class="line">    <span class="keyword">int</span>     propertyB;</div><div class="line">    <span class="keyword">boolean</span> propertyC;</div><div class="line"></div><div class="line">    <span class="function">Builder <span class="title">setPropertyA</span><span class="params">(String value)</span> </span>&#123;</div><div class="line">        propertyA = value;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function">Builder <span class="title">setPropertyB</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">        propertyB = value;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function">Builder <span class="title">setPropertyC</span><span class="params">(<span class="keyword">boolean</span> value)</span> </span>&#123;</div><div class="line">        propertyC = value;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">Product <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Product(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>The build director which could be optional to have.</li>
<li>It uses the ‘Builder’ to instantiate certain products.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuildDirector</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">static</span> Product <span class="title">buildAbc123True</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Builder()</div><div class="line">                .setPropertyA(<span class="string">"abc"</span>)</div><div class="line">                .setPropertyB(<span class="number">123</span>)</div><div class="line">                .setPropertyC(<span class="keyword">true</span>)</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> Product <span class="title">buildDef456False</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Builder()</div><div class="line">                .setPropertyA(<span class="string">"def"</span>)</div><div class="line">                .setPropertyB(<span class="number">456</span>)</div><div class="line">                .setPropertyC(<span class="keyword">false</span>)</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Serve"><a href="#Serve" class="headerlink" title="Serve"></a>Serve</h3><p>It is now possible to use the build director to create specific products or simply ask the builder to assign the product’s properties and build it.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        Product p1 = BuildDirector.buildAbc123True();</div><div class="line">        Product p2 = BuildDirector.buildDef456False();</div><div class="line"></div><div class="line">        Product p3 = <span class="keyword">new</span> Builder()</div><div class="line">                .setPropertyA(<span class="string">"xyz"</span>)</div><div class="line">                .setPropertyB(<span class="number">789</span>)</div><div class="line">                .setPropertyC(<span class="keyword">true</span>)</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Important-Benefits"><a href="#Important-Benefits" class="headerlink" title="Important Benefits"></a>Important Benefits</h3><p>Hiding from clients the creation of all side-objects and logics that are probably required for an instantiation. Hence, only the builder will know the specifics of this creation and no one else.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Keeping in mind that the following code is merely an example, let’s imaging that we need to create our own Socket class. Well, one might come up with many properties when designing a sophisticated object such as this. Note that two of these properties however, are mandatory for instantiation and as a result are part of the socket builder constructor.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Socket</span> </span>&#123;</div><div class="line"></div><div class="line">    InetAddress addr;</div><div class="line">    <span class="keyword">int</span> port;</div><div class="line">    <span class="keyword">boolean</span> keepAlive;</div><div class="line">    ComplexProperty complexProperty;</div><div class="line">    <span class="keyword">long</span> timeout;</div><div class="line">    <span class="function"><span class="keyword">long</span> sendBufferSize</span></div><div class="line"></div><div class="line">    <span class="title">Socket</span><span class="params">(SocketBuilder builder)</span> &#123;</div><div class="line">        <span class="keyword">this</span>.addr = builder.addr;</div><div class="line">        <span class="keyword">this</span>.port = builder.port;</div><div class="line">        <span class="keyword">this</span>.keepAlive = builder.keepAlive;</div><div class="line">        <span class="keyword">this</span>.complexProperty = builder.complexProperty;</div><div class="line">        <span class="keyword">this</span>.socketChannel = builder.socketChannel;</div><div class="line">        <span class="keyword">this</span>.timeout = builder.timeout;</div><div class="line">        <span class="keyword">this</span>.sendBufferSize = builder.sendBufferSize;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The builder class. Note that how builder tries to hide the complexity of object creation within ‘setComplexProperty()’ method.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SocketBuilder</span> </span>&#123;</div><div class="line"></div><div class="line">    InetAddress addr;</div><div class="line">    <span class="keyword">int</span> port;</div><div class="line">    <span class="keyword">boolean</span> keepAlive;</div><div class="line">    <span class="keyword">boolean</span> complexProperty;</div><div class="line">    <span class="keyword">long</span> timeout;</div><div class="line">    <span class="function"><span class="keyword">long</span> sendBufferSize</span></div><div class="line"></div><div class="line">    <span class="title">SocketBuilder</span><span class="params">(InetAddress addr, <span class="keyword">int</span> port)</span> &#123;</div><div class="line">        <span class="keyword">this</span>.addr = addr;</div><div class="line">        <span class="keyword">this</span>.port = port;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">Builder <span class="title">setKeepAlive</span><span class="params">(<span class="keyword">boolean</span> value)</span> </span>&#123;</div><div class="line">        keepAlive = value;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function">Builder <span class="title">setComplexProperty</span><span class="params">(String simpleValue)</span> </span>&#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line">        performing complex actions on simpleValue to</div><div class="line">        create the complexValue needed for the property</div><div class="line">        */</div><div class="line">        complexProperty = complexValue;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function">Builder <span class="title">setTimeout</span><span class="params">(<span class="keyword">long</span> value)</span> </span>&#123;</div><div class="line">        timeout = value;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function">Builder <span class="title">setSendBufferSize</span><span class="params">(<span class="keyword">long</span> value)</span> </span>&#123;</div><div class="line">        sendBufferSize = value;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">Product <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Socket(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>And finally the builder class which can either be used in a director or the client code.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SocketDirector</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> InetAddress host = InetAddress.getByName(<span class="string">"127.0.0.1"</span>);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> Product <span class="title">buildHostSocket</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SocketBuilder(host, <span class="number">8080</span>)</div><div class="line">                .setKeepAlive(<span class="keyword">true</span>)</div><div class="line">                .setTimeout(<span class="number">0</span>)</div><div class="line">                .setSendBufferSize(<span class="number">1024</span>)</div><div class="line">                .setComplexProperty(<span class="string">"F42"</span>);</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2010/design-patterns&quot;&gt;Design Patterns Overview&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Simplify Creation of Objects Which Need Many Properties for Creation.&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Software Architecture" scheme="http://truelogician.com/categories/Software-Architecture/"/>
    
      <category term="Design Patterns" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/"/>
    
      <category term="Types" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"/>
    
      <category term="Creational" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Creational/"/>
    
    
      <category term="Design-Patterns" scheme="http://truelogician.com/tags/Design-Patterns/"/>
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
  </entry>
  
  <entry>
    <title>Singleton Pattern</title>
    <link href="http://truelogician.com/2011/singleton/"/>
    <id>http://truelogician.com/2011/singleton/</id>
    <published>2011-02-21T08:49:21.000Z</published>
    <updated>2016-09-06T13:32:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><strong>Making Only One Object of a Class to Be Available for All.</strong> <em>Making Only One Object of a Class to Be Available for All.</em></p>
<a id="more"></a>
<h3 id="Recipe"><a href="#Recipe" class="headerlink" title="Recipe"></a>Recipe</h3><p>There are different ways to define a singleton. The snippet below presents one of the simplest thread-safe approaches that is not too complicated to confuse you and also not too simple to ignore the complexities it might require in real implementation.</p>
<ul>
<li>A class with a private constructor and a private instance of itself that can be assigned only once.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</div><div class="line">    <span class="comment">// constructor</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (singleton != <span class="keyword">null</span>) <span class="keyword">return</span> singleton;</div><div class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;</div><div class="line">            <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</div><div class="line">                singleton = <span class="keyword">new</span> Singleton();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> singleton;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;<span class="comment">/*do sth.*/</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Serve"><a href="#Serve" class="headerlink" title="Serve"></a>Serve</h3><p>After defining the singleton, all other classes can only access the very same instance of it across the virtual machine (JVM) as shown below.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    Client() &#123;</div><div class="line">        Singleton singleton = Singleton.getInstance();</div><div class="line">        singleton.operation();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Important-Benefits"><a href="#Important-Benefits" class="headerlink" title="Important Benefits"></a>Important Benefits</h3><p>Disadvantages of singletons are far more than their benefits. They reduce testability in great deal and introduce unnecessary coupling throughout the system. A singleton can yield best results in a situation where various parts of an application concurrently try to access a shared resource. An example of a shared resource would be Logger, Print Spooler, etc.<br>In general, the use of singletons are only encouraged through the dependency injection.</p>
<p><a href="/2010/design-patterns">Design Patterns Overview</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2010/design-patterns&quot;&gt;Design Patterns Overview&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Making Only One Object of a Class to Be Available for All.&lt;/strong&gt; &lt;em&gt;Making Only One Object of a Class to Be Available for All.&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Software Architecture" scheme="http://truelogician.com/categories/Software-Architecture/"/>
    
      <category term="Design Patterns" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/"/>
    
      <category term="Types" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/"/>
    
      <category term="Creational" scheme="http://truelogician.com/categories/Software-Architecture/Design-Patterns/Types/Creational/"/>
    
    
      <category term="Design-Patterns" scheme="http://truelogician.com/tags/Design-Patterns/"/>
    
      <category term="Tutorials" scheme="http://truelogician.com/tags/Tutorials/"/>
    
  </entry>
  
</feed>
